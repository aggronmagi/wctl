S0{
	S' : •Start «$»
	Start : •FileElements «$»
	FileElements : empty• «$»
	FileElements : •FileElements Doc Element «$»
	FileElements : empty• «enum»
	FileElements : empty• «import»
	FileElements : empty• «message»
	FileElements : empty• «package»
	FileElements : empty• «project»
	FileElements : empty• «service»
	FileElements : empty• «tok_doc»
	FileElements : empty• «tok_option»
	FileElements : •FileElements Doc Element «enum»
	FileElements : •FileElements Doc Element «import»
	FileElements : •FileElements Doc Element «message»
	FileElements : •FileElements Doc Element «package»
	FileElements : •FileElements Doc Element «project»
	FileElements : •FileElements Doc Element «service»
	FileElements : •FileElements Doc Element «tok_doc»
	FileElements : •FileElements Doc Element «tok_option»
}
Transitions:
	Start -> 1
	FileElements -> 2


S1{
	S' : Start• «$»
}
Transitions:


S2{
	Start : FileElements• «$»
	FileElements : FileElements •Doc Element «$»
	FileElements : FileElements •Doc Element «enum»
	FileElements : FileElements •Doc Element «import»
	FileElements : FileElements •Doc Element «message»
	FileElements : FileElements •Doc Element «package»
	FileElements : FileElements •Doc Element «project»
	FileElements : FileElements •Doc Element «service»
	FileElements : FileElements •Doc Element «tok_doc»
	FileElements : FileElements •Doc Element «tok_option»
	Doc : empty• «enum»
	Doc : empty• «import»
	Doc : empty• «message»
	Doc : empty• «package»
	Doc : empty• «project»
	Doc : empty• «service»
	Doc : empty• «tok_option»
	Doc : •Doc tok_doc «enum»
	Doc : •Doc tok_doc «import»
	Doc : •Doc tok_doc «message»
	Doc : •Doc tok_doc «package»
	Doc : •Doc tok_doc «project»
	Doc : •Doc tok_doc «service»
	Doc : •Doc tok_doc «tok_option»
	Doc : empty• «tok_doc»
	Doc : •Doc tok_doc «tok_doc»
}
Transitions:
	Doc -> 3


S3{
	FileElements : FileElements Doc •Element «$»
	FileElements : FileElements Doc •Element «enum»
	FileElements : FileElements Doc •Element «import»
	FileElements : FileElements Doc •Element «message»
	FileElements : FileElements Doc •Element «package»
	FileElements : FileElements Doc •Element «project»
	FileElements : FileElements Doc •Element «service»
	FileElements : FileElements Doc •Element «tok_doc»
	FileElements : FileElements Doc •Element «tok_option»
	Doc : Doc •tok_doc «enum»
	Doc : Doc •tok_doc «import»
	Doc : Doc •tok_doc «message»
	Doc : Doc •tok_doc «package»
	Doc : Doc •tok_doc «project»
	Doc : Doc •tok_doc «service»
	Doc : Doc •tok_doc «tok_option»
	Doc : Doc •tok_doc «tok_doc»
	Element : •Package «$»
	Element : •Import «$»
	Element : •Option «$»
	Element : •Enum «$»
	Element : •Message «$»
	Element : •Service «$»
	Element : •Project «$»
	Element : •Package «enum»
	Element : •Import «enum»
	Element : •Option «enum»
	Element : •Enum «enum»
	Element : •Message «enum»
	Element : •Service «enum»
	Element : •Project «enum»
	Element : •Package «import»
	Element : •Import «import»
	Element : •Option «import»
	Element : •Enum «import»
	Element : •Message «import»
	Element : •Service «import»
	Element : •Project «import»
	Element : •Package «message»
	Element : •Import «message»
	Element : •Option «message»
	Element : •Enum «message»
	Element : •Message «message»
	Element : •Service «message»
	Element : •Project «message»
	Element : •Package «package»
	Element : •Import «package»
	Element : •Option «package»
	Element : •Enum «package»
	Element : •Message «package»
	Element : •Service «package»
	Element : •Project «package»
	Element : •Package «project»
	Element : •Import «project»
	Element : •Option «project»
	Element : •Enum «project»
	Element : •Message «project»
	Element : •Service «project»
	Element : •Project «project»
	Element : •Package «service»
	Element : •Import «service»
	Element : •Option «service»
	Element : •Enum «service»
	Element : •Message «service»
	Element : •Service «service»
	Element : •Project «service»
	Element : •Package «tok_doc»
	Element : •Import «tok_doc»
	Element : •Option «tok_doc»
	Element : •Enum «tok_doc»
	Element : •Message «tok_doc»
	Element : •Service «tok_doc»
	Element : •Project «tok_doc»
	Element : •Package «tok_option»
	Element : •Import «tok_option»
	Element : •Option «tok_option»
	Element : •Enum «tok_option»
	Element : •Message «tok_option»
	Element : •Service «tok_option»
	Element : •Project «tok_option»
	Package : •package tok_identifier OptEnd «$»
	Import : •import AliasName tok_literal OptEnd «$»
	Option : •tok_option OptionValue «$»
	Enum : •enum tok_identifier { EnumItems } OptEnd «$»
	Message : •message tok_identifier { MessageElements } OptEnd «$»
	Service : •service tok_identifier { ServiceElements } OptEnd «$»
	Project : •project tok_identifier { ProjElements } «$»
	Package : •package tok_identifier OptEnd «enum»
	Import : •import AliasName tok_literal OptEnd «enum»
	Option : •tok_option OptionValue «enum»
	Enum : •enum tok_identifier { EnumItems } OptEnd «enum»
	Message : •message tok_identifier { MessageElements } OptEnd «enum»
	Service : •service tok_identifier { ServiceElements } OptEnd «enum»
	Project : •project tok_identifier { ProjElements } «enum»
	Package : •package tok_identifier OptEnd «import»
	Import : •import AliasName tok_literal OptEnd «import»
	Option : •tok_option OptionValue «import»
	Enum : •enum tok_identifier { EnumItems } OptEnd «import»
	Message : •message tok_identifier { MessageElements } OptEnd «import»
	Service : •service tok_identifier { ServiceElements } OptEnd «import»
	Project : •project tok_identifier { ProjElements } «import»
	Package : •package tok_identifier OptEnd «message»
	Import : •import AliasName tok_literal OptEnd «message»
	Option : •tok_option OptionValue «message»
	Enum : •enum tok_identifier { EnumItems } OptEnd «message»
	Message : •message tok_identifier { MessageElements } OptEnd «message»
	Service : •service tok_identifier { ServiceElements } OptEnd «message»
	Project : •project tok_identifier { ProjElements } «message»
	Package : •package tok_identifier OptEnd «package»
	Import : •import AliasName tok_literal OptEnd «package»
	Option : •tok_option OptionValue «package»
	Enum : •enum tok_identifier { EnumItems } OptEnd «package»
	Message : •message tok_identifier { MessageElements } OptEnd «package»
	Service : •service tok_identifier { ServiceElements } OptEnd «package»
	Project : •project tok_identifier { ProjElements } «package»
	Package : •package tok_identifier OptEnd «project»
	Import : •import AliasName tok_literal OptEnd «project»
	Option : •tok_option OptionValue «project»
	Enum : •enum tok_identifier { EnumItems } OptEnd «project»
	Message : •message tok_identifier { MessageElements } OptEnd «project»
	Service : •service tok_identifier { ServiceElements } OptEnd «project»
	Project : •project tok_identifier { ProjElements } «project»
	Package : •package tok_identifier OptEnd «service»
	Import : •import AliasName tok_literal OptEnd «service»
	Option : •tok_option OptionValue «service»
	Enum : •enum tok_identifier { EnumItems } OptEnd «service»
	Message : •message tok_identifier { MessageElements } OptEnd «service»
	Service : •service tok_identifier { ServiceElements } OptEnd «service»
	Project : •project tok_identifier { ProjElements } «service»
	Package : •package tok_identifier OptEnd «tok_doc»
	Import : •import AliasName tok_literal OptEnd «tok_doc»
	Option : •tok_option OptionValue «tok_doc»
	Enum : •enum tok_identifier { EnumItems } OptEnd «tok_doc»
	Message : •message tok_identifier { MessageElements } OptEnd «tok_doc»
	Service : •service tok_identifier { ServiceElements } OptEnd «tok_doc»
	Project : •project tok_identifier { ProjElements } «tok_doc»
	Package : •package tok_identifier OptEnd «tok_option»
	Import : •import AliasName tok_literal OptEnd «tok_option»
	Option : •tok_option OptionValue «tok_option»
	Enum : •enum tok_identifier { EnumItems } OptEnd «tok_option»
	Message : •message tok_identifier { MessageElements } OptEnd «tok_option»
	Service : •service tok_identifier { ServiceElements } OptEnd «tok_option»
	Project : •project tok_identifier { ProjElements } «tok_option»
}
Transitions:
	Element -> 4
	Package -> 5
	Import -> 6
	Option -> 7
	Enum -> 8
	Message -> 9
	Service -> 10
	Project -> 11
	tok_doc -> 12
	package -> 13
	import -> 14
	tok_option -> 15
	enum -> 16
	message -> 17
	service -> 18
	project -> 19


S4{
	FileElements : FileElements Doc Element• «$»
	FileElements : FileElements Doc Element• «enum»
	FileElements : FileElements Doc Element• «import»
	FileElements : FileElements Doc Element• «message»
	FileElements : FileElements Doc Element• «package»
	FileElements : FileElements Doc Element• «project»
	FileElements : FileElements Doc Element• «service»
	FileElements : FileElements Doc Element• «tok_doc»
	FileElements : FileElements Doc Element• «tok_option»
}
Transitions:


S5{
	Element : Package• «$»
	Element : Package• «enum»
	Element : Package• «import»
	Element : Package• «message»
	Element : Package• «package»
	Element : Package• «project»
	Element : Package• «service»
	Element : Package• «tok_doc»
	Element : Package• «tok_option»
}
Transitions:


S6{
	Element : Import• «$»
	Element : Import• «enum»
	Element : Import• «import»
	Element : Import• «message»
	Element : Import• «package»
	Element : Import• «project»
	Element : Import• «service»
	Element : Import• «tok_doc»
	Element : Import• «tok_option»
}
Transitions:


S7{
	Element : Option• «$»
	Element : Option• «enum»
	Element : Option• «import»
	Element : Option• «message»
	Element : Option• «package»
	Element : Option• «project»
	Element : Option• «service»
	Element : Option• «tok_doc»
	Element : Option• «tok_option»
}
Transitions:


S8{
	Element : Enum• «$»
	Element : Enum• «enum»
	Element : Enum• «import»
	Element : Enum• «message»
	Element : Enum• «package»
	Element : Enum• «project»
	Element : Enum• «service»
	Element : Enum• «tok_doc»
	Element : Enum• «tok_option»
}
Transitions:


S9{
	Element : Message• «$»
	Element : Message• «enum»
	Element : Message• «import»
	Element : Message• «message»
	Element : Message• «package»
	Element : Message• «project»
	Element : Message• «service»
	Element : Message• «tok_doc»
	Element : Message• «tok_option»
}
Transitions:


S10{
	Element : Service• «$»
	Element : Service• «enum»
	Element : Service• «import»
	Element : Service• «message»
	Element : Service• «package»
	Element : Service• «project»
	Element : Service• «service»
	Element : Service• «tok_doc»
	Element : Service• «tok_option»
}
Transitions:


S11{
	Element : Project• «$»
	Element : Project• «enum»
	Element : Project• «import»
	Element : Project• «message»
	Element : Project• «package»
	Element : Project• «project»
	Element : Project• «service»
	Element : Project• «tok_doc»
	Element : Project• «tok_option»
}
Transitions:


S12{
	Doc : Doc tok_doc• «enum»
	Doc : Doc tok_doc• «import»
	Doc : Doc tok_doc• «message»
	Doc : Doc tok_doc• «package»
	Doc : Doc tok_doc• «project»
	Doc : Doc tok_doc• «service»
	Doc : Doc tok_doc• «tok_option»
	Doc : Doc tok_doc• «tok_doc»
}
Transitions:


S13{
	Package : package •tok_identifier OptEnd «$»
	Package : package •tok_identifier OptEnd «enum»
	Package : package •tok_identifier OptEnd «import»
	Package : package •tok_identifier OptEnd «message»
	Package : package •tok_identifier OptEnd «package»
	Package : package •tok_identifier OptEnd «project»
	Package : package •tok_identifier OptEnd «service»
	Package : package •tok_identifier OptEnd «tok_doc»
	Package : package •tok_identifier OptEnd «tok_option»
}
Transitions:
	tok_identifier -> 20


S14{
	Import : import •AliasName tok_literal OptEnd «$»
	Import : import •AliasName tok_literal OptEnd «enum»
	Import : import •AliasName tok_literal OptEnd «import»
	Import : import •AliasName tok_literal OptEnd «message»
	Import : import •AliasName tok_literal OptEnd «package»
	Import : import •AliasName tok_literal OptEnd «project»
	Import : import •AliasName tok_literal OptEnd «service»
	Import : import •AliasName tok_literal OptEnd «tok_doc»
	Import : import •AliasName tok_literal OptEnd «tok_option»
	AliasName : empty• «tok_literal»
	AliasName : •tok_identifier «tok_literal»
}
Transitions:
	tok_identifier -> 21
	AliasName -> 22


S15{
	Option : tok_option •OptionValue «$»
	Option : tok_option •OptionValue «enum»
	Option : tok_option •OptionValue «import»
	Option : tok_option •OptionValue «message»
	Option : tok_option •OptionValue «package»
	Option : tok_option •OptionValue «project»
	Option : tok_option •OptionValue «service»
	Option : tok_option •OptionValue «tok_doc»
	Option : tok_option •OptionValue «tok_option»
	OptionValue : empty• «$»
	OptionValue : •= tok_literal OptEnd «$»
	OptionValue : •= tok_const_int OptEnd «$»
	OptionValue : empty• «enum»
	OptionValue : •= tok_literal OptEnd «enum»
	OptionValue : •= tok_const_int OptEnd «enum»
	OptionValue : empty• «import»
	OptionValue : •= tok_literal OptEnd «import»
	OptionValue : •= tok_const_int OptEnd «import»
	OptionValue : empty• «message»
	OptionValue : •= tok_literal OptEnd «message»
	OptionValue : •= tok_const_int OptEnd «message»
	OptionValue : empty• «package»
	OptionValue : •= tok_literal OptEnd «package»
	OptionValue : •= tok_const_int OptEnd «package»
	OptionValue : empty• «project»
	OptionValue : •= tok_literal OptEnd «project»
	OptionValue : •= tok_const_int OptEnd «project»
	OptionValue : empty• «service»
	OptionValue : •= tok_literal OptEnd «service»
	OptionValue : •= tok_const_int OptEnd «service»
	OptionValue : empty• «tok_doc»
	OptionValue : •= tok_literal OptEnd «tok_doc»
	OptionValue : •= tok_const_int OptEnd «tok_doc»
	OptionValue : empty• «tok_option»
	OptionValue : •= tok_literal OptEnd «tok_option»
	OptionValue : •= tok_const_int OptEnd «tok_option»
}
Transitions:
	OptionValue -> 23
	= -> 24


S16{
	Enum : enum •tok_identifier { EnumItems } OptEnd «$»
	Enum : enum •tok_identifier { EnumItems } OptEnd «enum»
	Enum : enum •tok_identifier { EnumItems } OptEnd «import»
	Enum : enum •tok_identifier { EnumItems } OptEnd «message»
	Enum : enum •tok_identifier { EnumItems } OptEnd «package»
	Enum : enum •tok_identifier { EnumItems } OptEnd «project»
	Enum : enum •tok_identifier { EnumItems } OptEnd «service»
	Enum : enum •tok_identifier { EnumItems } OptEnd «tok_doc»
	Enum : enum •tok_identifier { EnumItems } OptEnd «tok_option»
}
Transitions:
	tok_identifier -> 25


S17{
	Message : message •tok_identifier { MessageElements } OptEnd «$»
	Message : message •tok_identifier { MessageElements } OptEnd «enum»
	Message : message •tok_identifier { MessageElements } OptEnd «import»
	Message : message •tok_identifier { MessageElements } OptEnd «message»
	Message : message •tok_identifier { MessageElements } OptEnd «package»
	Message : message •tok_identifier { MessageElements } OptEnd «project»
	Message : message •tok_identifier { MessageElements } OptEnd «service»
	Message : message •tok_identifier { MessageElements } OptEnd «tok_doc»
	Message : message •tok_identifier { MessageElements } OptEnd «tok_option»
}
Transitions:
	tok_identifier -> 26


S18{
	Service : service •tok_identifier { ServiceElements } OptEnd «$»
	Service : service •tok_identifier { ServiceElements } OptEnd «enum»
	Service : service •tok_identifier { ServiceElements } OptEnd «import»
	Service : service •tok_identifier { ServiceElements } OptEnd «message»
	Service : service •tok_identifier { ServiceElements } OptEnd «package»
	Service : service •tok_identifier { ServiceElements } OptEnd «project»
	Service : service •tok_identifier { ServiceElements } OptEnd «service»
	Service : service •tok_identifier { ServiceElements } OptEnd «tok_doc»
	Service : service •tok_identifier { ServiceElements } OptEnd «tok_option»
}
Transitions:
	tok_identifier -> 27


S19{
	Project : project •tok_identifier { ProjElements } «$»
	Project : project •tok_identifier { ProjElements } «enum»
	Project : project •tok_identifier { ProjElements } «import»
	Project : project •tok_identifier { ProjElements } «message»
	Project : project •tok_identifier { ProjElements } «package»
	Project : project •tok_identifier { ProjElements } «project»
	Project : project •tok_identifier { ProjElements } «service»
	Project : project •tok_identifier { ProjElements } «tok_doc»
	Project : project •tok_identifier { ProjElements } «tok_option»
}
Transitions:
	tok_identifier -> 28


S20{
	Package : package tok_identifier •OptEnd «$»
	Package : package tok_identifier •OptEnd «enum»
	Package : package tok_identifier •OptEnd «import»
	Package : package tok_identifier •OptEnd «message»
	Package : package tok_identifier •OptEnd «package»
	Package : package tok_identifier •OptEnd «project»
	Package : package tok_identifier •OptEnd «service»
	Package : package tok_identifier •OptEnd «tok_doc»
	Package : package tok_identifier •OptEnd «tok_option»
	OptEnd : empty• «$»
	OptEnd : •; «$»
	OptEnd : •, «$»
	OptEnd : empty• «enum»
	OptEnd : •; «enum»
	OptEnd : •, «enum»
	OptEnd : empty• «import»
	OptEnd : •; «import»
	OptEnd : •, «import»
	OptEnd : empty• «message»
	OptEnd : •; «message»
	OptEnd : •, «message»
	OptEnd : empty• «package»
	OptEnd : •; «package»
	OptEnd : •, «package»
	OptEnd : empty• «project»
	OptEnd : •; «project»
	OptEnd : •, «project»
	OptEnd : empty• «service»
	OptEnd : •; «service»
	OptEnd : •, «service»
	OptEnd : empty• «tok_doc»
	OptEnd : •; «tok_doc»
	OptEnd : •, «tok_doc»
	OptEnd : empty• «tok_option»
	OptEnd : •; «tok_option»
	OptEnd : •, «tok_option»
}
Transitions:
	OptEnd -> 29
	; -> 30
	, -> 31


S21{
	AliasName : tok_identifier• «tok_literal»
}
Transitions:


S22{
	Import : import AliasName •tok_literal OptEnd «$»
	Import : import AliasName •tok_literal OptEnd «enum»
	Import : import AliasName •tok_literal OptEnd «import»
	Import : import AliasName •tok_literal OptEnd «message»
	Import : import AliasName •tok_literal OptEnd «package»
	Import : import AliasName •tok_literal OptEnd «project»
	Import : import AliasName •tok_literal OptEnd «service»
	Import : import AliasName •tok_literal OptEnd «tok_doc»
	Import : import AliasName •tok_literal OptEnd «tok_option»
}
Transitions:
	tok_literal -> 32


S23{
	Option : tok_option OptionValue• «$»
	Option : tok_option OptionValue• «enum»
	Option : tok_option OptionValue• «import»
	Option : tok_option OptionValue• «message»
	Option : tok_option OptionValue• «package»
	Option : tok_option OptionValue• «project»
	Option : tok_option OptionValue• «service»
	Option : tok_option OptionValue• «tok_doc»
	Option : tok_option OptionValue• «tok_option»
}
Transitions:


S24{
	OptionValue : = •tok_literal OptEnd «$»
	OptionValue : = •tok_const_int OptEnd «$»
	OptionValue : = •tok_literal OptEnd «enum»
	OptionValue : = •tok_const_int OptEnd «enum»
	OptionValue : = •tok_literal OptEnd «import»
	OptionValue : = •tok_const_int OptEnd «import»
	OptionValue : = •tok_literal OptEnd «message»
	OptionValue : = •tok_const_int OptEnd «message»
	OptionValue : = •tok_literal OptEnd «package»
	OptionValue : = •tok_const_int OptEnd «package»
	OptionValue : = •tok_literal OptEnd «project»
	OptionValue : = •tok_const_int OptEnd «project»
	OptionValue : = •tok_literal OptEnd «service»
	OptionValue : = •tok_const_int OptEnd «service»
	OptionValue : = •tok_literal OptEnd «tok_doc»
	OptionValue : = •tok_const_int OptEnd «tok_doc»
	OptionValue : = •tok_literal OptEnd «tok_option»
	OptionValue : = •tok_const_int OptEnd «tok_option»
}
Transitions:
	tok_literal -> 33
	tok_const_int -> 34


S25{
	Enum : enum tok_identifier •{ EnumItems } OptEnd «$»
	Enum : enum tok_identifier •{ EnumItems } OptEnd «enum»
	Enum : enum tok_identifier •{ EnumItems } OptEnd «import»
	Enum : enum tok_identifier •{ EnumItems } OptEnd «message»
	Enum : enum tok_identifier •{ EnumItems } OptEnd «package»
	Enum : enum tok_identifier •{ EnumItems } OptEnd «project»
	Enum : enum tok_identifier •{ EnumItems } OptEnd «service»
	Enum : enum tok_identifier •{ EnumItems } OptEnd «tok_doc»
	Enum : enum tok_identifier •{ EnumItems } OptEnd «tok_option»
}
Transitions:
	{ -> 35


S26{
	Message : message tok_identifier •{ MessageElements } OptEnd «$»
	Message : message tok_identifier •{ MessageElements } OptEnd «enum»
	Message : message tok_identifier •{ MessageElements } OptEnd «import»
	Message : message tok_identifier •{ MessageElements } OptEnd «message»
	Message : message tok_identifier •{ MessageElements } OptEnd «package»
	Message : message tok_identifier •{ MessageElements } OptEnd «project»
	Message : message tok_identifier •{ MessageElements } OptEnd «service»
	Message : message tok_identifier •{ MessageElements } OptEnd «tok_doc»
	Message : message tok_identifier •{ MessageElements } OptEnd «tok_option»
}
Transitions:
	{ -> 36


S27{
	Service : service tok_identifier •{ ServiceElements } OptEnd «$»
	Service : service tok_identifier •{ ServiceElements } OptEnd «enum»
	Service : service tok_identifier •{ ServiceElements } OptEnd «import»
	Service : service tok_identifier •{ ServiceElements } OptEnd «message»
	Service : service tok_identifier •{ ServiceElements } OptEnd «package»
	Service : service tok_identifier •{ ServiceElements } OptEnd «project»
	Service : service tok_identifier •{ ServiceElements } OptEnd «service»
	Service : service tok_identifier •{ ServiceElements } OptEnd «tok_doc»
	Service : service tok_identifier •{ ServiceElements } OptEnd «tok_option»
}
Transitions:
	{ -> 37


S28{
	Project : project tok_identifier •{ ProjElements } «$»
	Project : project tok_identifier •{ ProjElements } «enum»
	Project : project tok_identifier •{ ProjElements } «import»
	Project : project tok_identifier •{ ProjElements } «message»
	Project : project tok_identifier •{ ProjElements } «package»
	Project : project tok_identifier •{ ProjElements } «project»
	Project : project tok_identifier •{ ProjElements } «service»
	Project : project tok_identifier •{ ProjElements } «tok_doc»
	Project : project tok_identifier •{ ProjElements } «tok_option»
}
Transitions:
	{ -> 38


S29{
	Package : package tok_identifier OptEnd• «$»
	Package : package tok_identifier OptEnd• «enum»
	Package : package tok_identifier OptEnd• «import»
	Package : package tok_identifier OptEnd• «message»
	Package : package tok_identifier OptEnd• «package»
	Package : package tok_identifier OptEnd• «project»
	Package : package tok_identifier OptEnd• «service»
	Package : package tok_identifier OptEnd• «tok_doc»
	Package : package tok_identifier OptEnd• «tok_option»
}
Transitions:


S30{
	OptEnd : ;• «$»
	OptEnd : ;• «enum»
	OptEnd : ;• «import»
	OptEnd : ;• «message»
	OptEnd : ;• «package»
	OptEnd : ;• «project»
	OptEnd : ;• «service»
	OptEnd : ;• «tok_doc»
	OptEnd : ;• «tok_option»
}
Transitions:


S31{
	OptEnd : ,• «$»
	OptEnd : ,• «enum»
	OptEnd : ,• «import»
	OptEnd : ,• «message»
	OptEnd : ,• «package»
	OptEnd : ,• «project»
	OptEnd : ,• «service»
	OptEnd : ,• «tok_doc»
	OptEnd : ,• «tok_option»
}
Transitions:


S32{
	Import : import AliasName tok_literal •OptEnd «$»
	Import : import AliasName tok_literal •OptEnd «enum»
	Import : import AliasName tok_literal •OptEnd «import»
	Import : import AliasName tok_literal •OptEnd «message»
	Import : import AliasName tok_literal •OptEnd «package»
	Import : import AliasName tok_literal •OptEnd «project»
	Import : import AliasName tok_literal •OptEnd «service»
	Import : import AliasName tok_literal •OptEnd «tok_doc»
	Import : import AliasName tok_literal •OptEnd «tok_option»
	OptEnd : empty• «$»
	OptEnd : •; «$»
	OptEnd : •, «$»
	OptEnd : empty• «enum»
	OptEnd : •; «enum»
	OptEnd : •, «enum»
	OptEnd : empty• «import»
	OptEnd : •; «import»
	OptEnd : •, «import»
	OptEnd : empty• «message»
	OptEnd : •; «message»
	OptEnd : •, «message»
	OptEnd : empty• «package»
	OptEnd : •; «package»
	OptEnd : •, «package»
	OptEnd : empty• «project»
	OptEnd : •; «project»
	OptEnd : •, «project»
	OptEnd : empty• «service»
	OptEnd : •; «service»
	OptEnd : •, «service»
	OptEnd : empty• «tok_doc»
	OptEnd : •; «tok_doc»
	OptEnd : •, «tok_doc»
	OptEnd : empty• «tok_option»
	OptEnd : •; «tok_option»
	OptEnd : •, «tok_option»
}
Transitions:
	; -> 30
	, -> 31
	OptEnd -> 39


S33{
	OptionValue : = tok_literal •OptEnd «$»
	OptionValue : = tok_literal •OptEnd «enum»
	OptionValue : = tok_literal •OptEnd «import»
	OptionValue : = tok_literal •OptEnd «message»
	OptionValue : = tok_literal •OptEnd «package»
	OptionValue : = tok_literal •OptEnd «project»
	OptionValue : = tok_literal •OptEnd «service»
	OptionValue : = tok_literal •OptEnd «tok_doc»
	OptionValue : = tok_literal •OptEnd «tok_option»
	OptEnd : empty• «$»
	OptEnd : •; «$»
	OptEnd : •, «$»
	OptEnd : empty• «enum»
	OptEnd : •; «enum»
	OptEnd : •, «enum»
	OptEnd : empty• «import»
	OptEnd : •; «import»
	OptEnd : •, «import»
	OptEnd : empty• «message»
	OptEnd : •; «message»
	OptEnd : •, «message»
	OptEnd : empty• «package»
	OptEnd : •; «package»
	OptEnd : •, «package»
	OptEnd : empty• «project»
	OptEnd : •; «project»
	OptEnd : •, «project»
	OptEnd : empty• «service»
	OptEnd : •; «service»
	OptEnd : •, «service»
	OptEnd : empty• «tok_doc»
	OptEnd : •; «tok_doc»
	OptEnd : •, «tok_doc»
	OptEnd : empty• «tok_option»
	OptEnd : •; «tok_option»
	OptEnd : •, «tok_option»
}
Transitions:
	; -> 30
	, -> 31
	OptEnd -> 40


S34{
	OptionValue : = tok_const_int •OptEnd «$»
	OptionValue : = tok_const_int •OptEnd «enum»
	OptionValue : = tok_const_int •OptEnd «import»
	OptionValue : = tok_const_int •OptEnd «message»
	OptionValue : = tok_const_int •OptEnd «package»
	OptionValue : = tok_const_int •OptEnd «project»
	OptionValue : = tok_const_int •OptEnd «service»
	OptionValue : = tok_const_int •OptEnd «tok_doc»
	OptionValue : = tok_const_int •OptEnd «tok_option»
	OptEnd : empty• «$»
	OptEnd : •; «$»
	OptEnd : •, «$»
	OptEnd : empty• «enum»
	OptEnd : •; «enum»
	OptEnd : •, «enum»
	OptEnd : empty• «import»
	OptEnd : •; «import»
	OptEnd : •, «import»
	OptEnd : empty• «message»
	OptEnd : •; «message»
	OptEnd : •, «message»
	OptEnd : empty• «package»
	OptEnd : •; «package»
	OptEnd : •, «package»
	OptEnd : empty• «project»
	OptEnd : •; «project»
	OptEnd : •, «project»
	OptEnd : empty• «service»
	OptEnd : •; «service»
	OptEnd : •, «service»
	OptEnd : empty• «tok_doc»
	OptEnd : •; «tok_doc»
	OptEnd : •, «tok_doc»
	OptEnd : empty• «tok_option»
	OptEnd : •; «tok_option»
	OptEnd : •, «tok_option»
}
Transitions:
	; -> 30
	, -> 31
	OptEnd -> 41


S35{
	Enum : enum tok_identifier { •EnumItems } OptEnd «$»
	Enum : enum tok_identifier { •EnumItems } OptEnd «enum»
	Enum : enum tok_identifier { •EnumItems } OptEnd «import»
	Enum : enum tok_identifier { •EnumItems } OptEnd «message»
	Enum : enum tok_identifier { •EnumItems } OptEnd «package»
	Enum : enum tok_identifier { •EnumItems } OptEnd «project»
	Enum : enum tok_identifier { •EnumItems } OptEnd «service»
	Enum : enum tok_identifier { •EnumItems } OptEnd «tok_doc»
	Enum : enum tok_identifier { •EnumItems } OptEnd «tok_option»
	EnumItems : empty• «}»
	EnumItems : •EnumItems Doc EnumItem «}»
	EnumItems : •EnumItems Doc Option «}»
	EnumItems : empty• «tok_doc»
	EnumItems : empty• «tok_identifier»
	EnumItems : •EnumItems Doc EnumItem «tok_doc»
	EnumItems : •EnumItems Doc EnumItem «tok_identifier»
	EnumItems : •EnumItems Doc Option «tok_doc»
	EnumItems : •EnumItems Doc Option «tok_identifier»
	EnumItems : empty• «tok_option»
	EnumItems : •EnumItems Doc EnumItem «tok_option»
	EnumItems : •EnumItems Doc Option «tok_option»
}
Transitions:
	EnumItems -> 42


S36{
	Message : message tok_identifier { •MessageElements } OptEnd «$»
	Message : message tok_identifier { •MessageElements } OptEnd «enum»
	Message : message tok_identifier { •MessageElements } OptEnd «import»
	Message : message tok_identifier { •MessageElements } OptEnd «message»
	Message : message tok_identifier { •MessageElements } OptEnd «package»
	Message : message tok_identifier { •MessageElements } OptEnd «project»
	Message : message tok_identifier { •MessageElements } OptEnd «service»
	Message : message tok_identifier { •MessageElements } OptEnd «tok_doc»
	Message : message tok_identifier { •MessageElements } OptEnd «tok_option»
	MessageElements : empty• «}»
	MessageElements : •MessageElements Doc Field «}»
	MessageElements : •MessageElements Doc Option «}»
	MessageElements : empty• «[»
	MessageElements : empty• «bool»
	MessageElements : empty• «bytes»
	MessageElements : empty• «i16»
	MessageElements : empty• «i32»
	MessageElements : empty• «i64»
	MessageElements : empty• «i8»
	MessageElements : empty• «int16»
	MessageElements : empty• «int32»
	MessageElements : empty• «int64»
	MessageElements : empty• «int8»
	MessageElements : empty• «map»
	MessageElements : empty• «string»
	MessageElements : empty• «tok_doc»
	MessageElements : empty• «tok_identifier»
	MessageElements : empty• «tok_option»
	MessageElements : empty• «u16»
	MessageElements : empty• «u32»
	MessageElements : empty• «u64»
	MessageElements : empty• «u8»
	MessageElements : empty• «uint16»
	MessageElements : empty• «uint32»
	MessageElements : empty• «uint64»
	MessageElements : empty• «uint8»
	MessageElements : •MessageElements Doc Field «[»
	MessageElements : •MessageElements Doc Field «bool»
	MessageElements : •MessageElements Doc Field «bytes»
	MessageElements : •MessageElements Doc Field «i16»
	MessageElements : •MessageElements Doc Field «i32»
	MessageElements : •MessageElements Doc Field «i64»
	MessageElements : •MessageElements Doc Field «i8»
	MessageElements : •MessageElements Doc Field «int16»
	MessageElements : •MessageElements Doc Field «int32»
	MessageElements : •MessageElements Doc Field «int64»
	MessageElements : •MessageElements Doc Field «int8»
	MessageElements : •MessageElements Doc Field «map»
	MessageElements : •MessageElements Doc Field «string»
	MessageElements : •MessageElements Doc Field «tok_doc»
	MessageElements : •MessageElements Doc Field «tok_identifier»
	MessageElements : •MessageElements Doc Field «tok_option»
	MessageElements : •MessageElements Doc Field «u16»
	MessageElements : •MessageElements Doc Field «u32»
	MessageElements : •MessageElements Doc Field «u64»
	MessageElements : •MessageElements Doc Field «u8»
	MessageElements : •MessageElements Doc Field «uint16»
	MessageElements : •MessageElements Doc Field «uint32»
	MessageElements : •MessageElements Doc Field «uint64»
	MessageElements : •MessageElements Doc Field «uint8»
	MessageElements : •MessageElements Doc Option «[»
	MessageElements : •MessageElements Doc Option «bool»
	MessageElements : •MessageElements Doc Option «bytes»
	MessageElements : •MessageElements Doc Option «i16»
	MessageElements : •MessageElements Doc Option «i32»
	MessageElements : •MessageElements Doc Option «i64»
	MessageElements : •MessageElements Doc Option «i8»
	MessageElements : •MessageElements Doc Option «int16»
	MessageElements : •MessageElements Doc Option «int32»
	MessageElements : •MessageElements Doc Option «int64»
	MessageElements : •MessageElements Doc Option «int8»
	MessageElements : •MessageElements Doc Option «map»
	MessageElements : •MessageElements Doc Option «string»
	MessageElements : •MessageElements Doc Option «tok_doc»
	MessageElements : •MessageElements Doc Option «tok_identifier»
	MessageElements : •MessageElements Doc Option «tok_option»
	MessageElements : •MessageElements Doc Option «u16»
	MessageElements : •MessageElements Doc Option «u32»
	MessageElements : •MessageElements Doc Option «u64»
	MessageElements : •MessageElements Doc Option «u8»
	MessageElements : •MessageElements Doc Option «uint16»
	MessageElements : •MessageElements Doc Option «uint32»
	MessageElements : •MessageElements Doc Option «uint64»
	MessageElements : •MessageElements Doc Option «uint8»
}
Transitions:
	MessageElements -> 43


S37{
	Service : service tok_identifier { •ServiceElements } OptEnd «$»
	Service : service tok_identifier { •ServiceElements } OptEnd «enum»
	Service : service tok_identifier { •ServiceElements } OptEnd «import»
	Service : service tok_identifier { •ServiceElements } OptEnd «message»
	Service : service tok_identifier { •ServiceElements } OptEnd «package»
	Service : service tok_identifier { •ServiceElements } OptEnd «project»
	Service : service tok_identifier { •ServiceElements } OptEnd «service»
	Service : service tok_identifier { •ServiceElements } OptEnd «tok_doc»
	Service : service tok_identifier { •ServiceElements } OptEnd «tok_option»
	ServiceElements : empty• «}»
	ServiceElements : •ServiceElements Doc Option «}»
	ServiceElements : •ServiceElements Doc MethodFlag «}»
	ServiceElements : •ServiceElements Doc Method «}»
	ServiceElements : empty• «tok_doc»
	ServiceElements : empty• «tok_option»
	ServiceElements : •ServiceElements Doc Option «tok_doc»
	ServiceElements : •ServiceElements Doc Option «tok_option»
	ServiceElements : •ServiceElements Doc MethodFlag «tok_doc»
	ServiceElements : •ServiceElements Doc MethodFlag «tok_option»
	ServiceElements : •ServiceElements Doc Method «tok_doc»
	ServiceElements : •ServiceElements Doc Method «tok_option»
	ServiceElements : empty• «notify»
	ServiceElements : empty• «oneway»
	ServiceElements : empty• «twoway»
	ServiceElements : •ServiceElements Doc Option «notify»
	ServiceElements : •ServiceElements Doc Option «oneway»
	ServiceElements : •ServiceElements Doc Option «twoway»
	ServiceElements : •ServiceElements Doc MethodFlag «notify»
	ServiceElements : •ServiceElements Doc MethodFlag «oneway»
	ServiceElements : •ServiceElements Doc MethodFlag «twoway»
	ServiceElements : •ServiceElements Doc Method «notify»
	ServiceElements : •ServiceElements Doc Method «oneway»
	ServiceElements : •ServiceElements Doc Method «twoway»
	ServiceElements : empty• «tok_identifier»
	ServiceElements : •ServiceElements Doc Option «tok_identifier»
	ServiceElements : •ServiceElements Doc MethodFlag «tok_identifier»
	ServiceElements : •ServiceElements Doc Method «tok_identifier»
}
Transitions:
	ServiceElements -> 44


S38{
	Project : project tok_identifier { •ProjElements } «$»
	Project : project tok_identifier { •ProjElements } «enum»
	Project : project tok_identifier { •ProjElements } «import»
	Project : project tok_identifier { •ProjElements } «message»
	Project : project tok_identifier { •ProjElements } «package»
	Project : project tok_identifier { •ProjElements } «project»
	Project : project tok_identifier { •ProjElements } «service»
	Project : project tok_identifier { •ProjElements } «tok_doc»
	Project : project tok_identifier { •ProjElements } «tok_option»
	ProjElements : empty• «}»
	ProjElements : •ProjElements Doc ProjArea «}»
	ProjElements : •ProjElements Doc Option «}»
	ProjElements : empty• «tok_doc»
	ProjElements : empty• «tok_identifier»
	ProjElements : •ProjElements Doc ProjArea «tok_doc»
	ProjElements : •ProjElements Doc ProjArea «tok_identifier»
	ProjElements : •ProjElements Doc Option «tok_doc»
	ProjElements : •ProjElements Doc Option «tok_identifier»
	ProjElements : empty• «tok_option»
	ProjElements : •ProjElements Doc ProjArea «tok_option»
	ProjElements : •ProjElements Doc Option «tok_option»
}
Transitions:
	ProjElements -> 45


S39{
	Import : import AliasName tok_literal OptEnd• «$»
	Import : import AliasName tok_literal OptEnd• «enum»
	Import : import AliasName tok_literal OptEnd• «import»
	Import : import AliasName tok_literal OptEnd• «message»
	Import : import AliasName tok_literal OptEnd• «package»
	Import : import AliasName tok_literal OptEnd• «project»
	Import : import AliasName tok_literal OptEnd• «service»
	Import : import AliasName tok_literal OptEnd• «tok_doc»
	Import : import AliasName tok_literal OptEnd• «tok_option»
}
Transitions:


S40{
	OptionValue : = tok_literal OptEnd• «$»
	OptionValue : = tok_literal OptEnd• «enum»
	OptionValue : = tok_literal OptEnd• «import»
	OptionValue : = tok_literal OptEnd• «message»
	OptionValue : = tok_literal OptEnd• «package»
	OptionValue : = tok_literal OptEnd• «project»
	OptionValue : = tok_literal OptEnd• «service»
	OptionValue : = tok_literal OptEnd• «tok_doc»
	OptionValue : = tok_literal OptEnd• «tok_option»
}
Transitions:


S41{
	OptionValue : = tok_const_int OptEnd• «$»
	OptionValue : = tok_const_int OptEnd• «enum»
	OptionValue : = tok_const_int OptEnd• «import»
	OptionValue : = tok_const_int OptEnd• «message»
	OptionValue : = tok_const_int OptEnd• «package»
	OptionValue : = tok_const_int OptEnd• «project»
	OptionValue : = tok_const_int OptEnd• «service»
	OptionValue : = tok_const_int OptEnd• «tok_doc»
	OptionValue : = tok_const_int OptEnd• «tok_option»
}
Transitions:


S42{
	Enum : enum tok_identifier { EnumItems •} OptEnd «$»
	Enum : enum tok_identifier { EnumItems •} OptEnd «enum»
	Enum : enum tok_identifier { EnumItems •} OptEnd «import»
	Enum : enum tok_identifier { EnumItems •} OptEnd «message»
	Enum : enum tok_identifier { EnumItems •} OptEnd «package»
	Enum : enum tok_identifier { EnumItems •} OptEnd «project»
	Enum : enum tok_identifier { EnumItems •} OptEnd «service»
	Enum : enum tok_identifier { EnumItems •} OptEnd «tok_doc»
	Enum : enum tok_identifier { EnumItems •} OptEnd «tok_option»
	EnumItems : EnumItems •Doc EnumItem «}»
	EnumItems : EnumItems •Doc Option «}»
	EnumItems : EnumItems •Doc EnumItem «tok_doc»
	EnumItems : EnumItems •Doc EnumItem «tok_identifier»
	EnumItems : EnumItems •Doc Option «tok_doc»
	EnumItems : EnumItems •Doc Option «tok_identifier»
	EnumItems : EnumItems •Doc EnumItem «tok_option»
	EnumItems : EnumItems •Doc Option «tok_option»
	Doc : empty• «tok_identifier»
	Doc : •Doc tok_doc «tok_identifier»
	Doc : empty• «tok_option»
	Doc : •Doc tok_doc «tok_option»
	Doc : empty• «tok_doc»
	Doc : •Doc tok_doc «tok_doc»
}
Transitions:
	Doc -> 46
	} -> 47


S43{
	Message : message tok_identifier { MessageElements •} OptEnd «$»
	Message : message tok_identifier { MessageElements •} OptEnd «enum»
	Message : message tok_identifier { MessageElements •} OptEnd «import»
	Message : message tok_identifier { MessageElements •} OptEnd «message»
	Message : message tok_identifier { MessageElements •} OptEnd «package»
	Message : message tok_identifier { MessageElements •} OptEnd «project»
	Message : message tok_identifier { MessageElements •} OptEnd «service»
	Message : message tok_identifier { MessageElements •} OptEnd «tok_doc»
	Message : message tok_identifier { MessageElements •} OptEnd «tok_option»
	MessageElements : MessageElements •Doc Field «}»
	MessageElements : MessageElements •Doc Option «}»
	MessageElements : MessageElements •Doc Field «[»
	MessageElements : MessageElements •Doc Field «bool»
	MessageElements : MessageElements •Doc Field «bytes»
	MessageElements : MessageElements •Doc Field «i16»
	MessageElements : MessageElements •Doc Field «i32»
	MessageElements : MessageElements •Doc Field «i64»
	MessageElements : MessageElements •Doc Field «i8»
	MessageElements : MessageElements •Doc Field «int16»
	MessageElements : MessageElements •Doc Field «int32»
	MessageElements : MessageElements •Doc Field «int64»
	MessageElements : MessageElements •Doc Field «int8»
	MessageElements : MessageElements •Doc Field «map»
	MessageElements : MessageElements •Doc Field «string»
	MessageElements : MessageElements •Doc Field «tok_doc»
	MessageElements : MessageElements •Doc Field «tok_identifier»
	MessageElements : MessageElements •Doc Field «tok_option»
	MessageElements : MessageElements •Doc Field «u16»
	MessageElements : MessageElements •Doc Field «u32»
	MessageElements : MessageElements •Doc Field «u64»
	MessageElements : MessageElements •Doc Field «u8»
	MessageElements : MessageElements •Doc Field «uint16»
	MessageElements : MessageElements •Doc Field «uint32»
	MessageElements : MessageElements •Doc Field «uint64»
	MessageElements : MessageElements •Doc Field «uint8»
	MessageElements : MessageElements •Doc Option «[»
	MessageElements : MessageElements •Doc Option «bool»
	MessageElements : MessageElements •Doc Option «bytes»
	MessageElements : MessageElements •Doc Option «i16»
	MessageElements : MessageElements •Doc Option «i32»
	MessageElements : MessageElements •Doc Option «i64»
	MessageElements : MessageElements •Doc Option «i8»
	MessageElements : MessageElements •Doc Option «int16»
	MessageElements : MessageElements •Doc Option «int32»
	MessageElements : MessageElements •Doc Option «int64»
	MessageElements : MessageElements •Doc Option «int8»
	MessageElements : MessageElements •Doc Option «map»
	MessageElements : MessageElements •Doc Option «string»
	MessageElements : MessageElements •Doc Option «tok_doc»
	MessageElements : MessageElements •Doc Option «tok_identifier»
	MessageElements : MessageElements •Doc Option «tok_option»
	MessageElements : MessageElements •Doc Option «u16»
	MessageElements : MessageElements •Doc Option «u32»
	MessageElements : MessageElements •Doc Option «u64»
	MessageElements : MessageElements •Doc Option «u8»
	MessageElements : MessageElements •Doc Option «uint16»
	MessageElements : MessageElements •Doc Option «uint32»
	MessageElements : MessageElements •Doc Option «uint64»
	MessageElements : MessageElements •Doc Option «uint8»
	Doc : empty• «[»
	Doc : empty• «bool»
	Doc : empty• «bytes»
	Doc : empty• «i16»
	Doc : empty• «i32»
	Doc : empty• «i64»
	Doc : empty• «i8»
	Doc : empty• «int16»
	Doc : empty• «int32»
	Doc : empty• «int64»
	Doc : empty• «int8»
	Doc : empty• «map»
	Doc : empty• «string»
	Doc : empty• «tok_identifier»
	Doc : empty• «tok_option»
	Doc : empty• «u16»
	Doc : empty• «u32»
	Doc : empty• «u64»
	Doc : empty• «u8»
	Doc : empty• «uint16»
	Doc : empty• «uint32»
	Doc : empty• «uint64»
	Doc : empty• «uint8»
	Doc : •Doc tok_doc «[»
	Doc : •Doc tok_doc «bool»
	Doc : •Doc tok_doc «bytes»
	Doc : •Doc tok_doc «i16»
	Doc : •Doc tok_doc «i32»
	Doc : •Doc tok_doc «i64»
	Doc : •Doc tok_doc «i8»
	Doc : •Doc tok_doc «int16»
	Doc : •Doc tok_doc «int32»
	Doc : •Doc tok_doc «int64»
	Doc : •Doc tok_doc «int8»
	Doc : •Doc tok_doc «map»
	Doc : •Doc tok_doc «string»
	Doc : •Doc tok_doc «tok_identifier»
	Doc : •Doc tok_doc «tok_option»
	Doc : •Doc tok_doc «u16»
	Doc : •Doc tok_doc «u32»
	Doc : •Doc tok_doc «u64»
	Doc : •Doc tok_doc «u8»
	Doc : •Doc tok_doc «uint16»
	Doc : •Doc tok_doc «uint32»
	Doc : •Doc tok_doc «uint64»
	Doc : •Doc tok_doc «uint8»
	Doc : empty• «tok_doc»
	Doc : •Doc tok_doc «tok_doc»
}
Transitions:
	Doc -> 48
	} -> 49


S44{
	Service : service tok_identifier { ServiceElements •} OptEnd «$»
	Service : service tok_identifier { ServiceElements •} OptEnd «enum»
	Service : service tok_identifier { ServiceElements •} OptEnd «import»
	Service : service tok_identifier { ServiceElements •} OptEnd «message»
	Service : service tok_identifier { ServiceElements •} OptEnd «package»
	Service : service tok_identifier { ServiceElements •} OptEnd «project»
	Service : service tok_identifier { ServiceElements •} OptEnd «service»
	Service : service tok_identifier { ServiceElements •} OptEnd «tok_doc»
	Service : service tok_identifier { ServiceElements •} OptEnd «tok_option»
	ServiceElements : ServiceElements •Doc Option «}»
	ServiceElements : ServiceElements •Doc MethodFlag «}»
	ServiceElements : ServiceElements •Doc Method «}»
	ServiceElements : ServiceElements •Doc Option «tok_doc»
	ServiceElements : ServiceElements •Doc Option «tok_option»
	ServiceElements : ServiceElements •Doc MethodFlag «tok_doc»
	ServiceElements : ServiceElements •Doc MethodFlag «tok_option»
	ServiceElements : ServiceElements •Doc Method «tok_doc»
	ServiceElements : ServiceElements •Doc Method «tok_option»
	ServiceElements : ServiceElements •Doc Option «notify»
	ServiceElements : ServiceElements •Doc Option «oneway»
	ServiceElements : ServiceElements •Doc Option «twoway»
	ServiceElements : ServiceElements •Doc MethodFlag «notify»
	ServiceElements : ServiceElements •Doc MethodFlag «oneway»
	ServiceElements : ServiceElements •Doc MethodFlag «twoway»
	ServiceElements : ServiceElements •Doc Method «notify»
	ServiceElements : ServiceElements •Doc Method «oneway»
	ServiceElements : ServiceElements •Doc Method «twoway»
	ServiceElements : ServiceElements •Doc Option «tok_identifier»
	ServiceElements : ServiceElements •Doc MethodFlag «tok_identifier»
	ServiceElements : ServiceElements •Doc Method «tok_identifier»
	Doc : empty• «tok_option»
	Doc : •Doc tok_doc «tok_option»
	Doc : empty• «notify»
	Doc : empty• «oneway»
	Doc : empty• «twoway»
	Doc : •Doc tok_doc «notify»
	Doc : •Doc tok_doc «oneway»
	Doc : •Doc tok_doc «twoway»
	Doc : empty• «tok_identifier»
	Doc : •Doc tok_doc «tok_identifier»
	Doc : empty• «tok_doc»
	Doc : •Doc tok_doc «tok_doc»
}
Transitions:
	Doc -> 50
	} -> 51


S45{
	Project : project tok_identifier { ProjElements •} «$»
	Project : project tok_identifier { ProjElements •} «enum»
	Project : project tok_identifier { ProjElements •} «import»
	Project : project tok_identifier { ProjElements •} «message»
	Project : project tok_identifier { ProjElements •} «package»
	Project : project tok_identifier { ProjElements •} «project»
	Project : project tok_identifier { ProjElements •} «service»
	Project : project tok_identifier { ProjElements •} «tok_doc»
	Project : project tok_identifier { ProjElements •} «tok_option»
	ProjElements : ProjElements •Doc ProjArea «}»
	ProjElements : ProjElements •Doc Option «}»
	ProjElements : ProjElements •Doc ProjArea «tok_doc»
	ProjElements : ProjElements •Doc ProjArea «tok_identifier»
	ProjElements : ProjElements •Doc Option «tok_doc»
	ProjElements : ProjElements •Doc Option «tok_identifier»
	ProjElements : ProjElements •Doc ProjArea «tok_option»
	ProjElements : ProjElements •Doc Option «tok_option»
	Doc : empty• «tok_identifier»
	Doc : •Doc tok_doc «tok_identifier»
	Doc : empty• «tok_option»
	Doc : •Doc tok_doc «tok_option»
	Doc : empty• «tok_doc»
	Doc : •Doc tok_doc «tok_doc»
}
Transitions:
	Doc -> 52
	} -> 53


S46{
	EnumItems : EnumItems Doc •EnumItem «}»
	EnumItems : EnumItems Doc •Option «}»
	EnumItems : EnumItems Doc •EnumItem «tok_doc»
	EnumItems : EnumItems Doc •EnumItem «tok_identifier»
	EnumItems : EnumItems Doc •Option «tok_doc»
	EnumItems : EnumItems Doc •Option «tok_identifier»
	EnumItems : EnumItems Doc •EnumItem «tok_option»
	EnumItems : EnumItems Doc •Option «tok_option»
	Doc : Doc •tok_doc «tok_identifier»
	Doc : Doc •tok_doc «tok_option»
	Doc : Doc •tok_doc «tok_doc»
	EnumItem : •tok_identifier EnumItemValue OptEnd «}»
	Option : •tok_option OptionValue «}»
	EnumItem : •tok_identifier EnumItemValue OptEnd «tok_doc»
	EnumItem : •tok_identifier EnumItemValue OptEnd «tok_identifier»
	Option : •tok_option OptionValue «tok_doc»
	Option : •tok_option OptionValue «tok_identifier»
	EnumItem : •tok_identifier EnumItemValue OptEnd «tok_option»
	Option : •tok_option OptionValue «tok_option»
}
Transitions:
	Option -> 54
	tok_doc -> 55
	tok_identifier -> 56
	tok_option -> 57
	EnumItem -> 58


S47{
	Enum : enum tok_identifier { EnumItems } •OptEnd «$»
	Enum : enum tok_identifier { EnumItems } •OptEnd «enum»
	Enum : enum tok_identifier { EnumItems } •OptEnd «import»
	Enum : enum tok_identifier { EnumItems } •OptEnd «message»
	Enum : enum tok_identifier { EnumItems } •OptEnd «package»
	Enum : enum tok_identifier { EnumItems } •OptEnd «project»
	Enum : enum tok_identifier { EnumItems } •OptEnd «service»
	Enum : enum tok_identifier { EnumItems } •OptEnd «tok_doc»
	Enum : enum tok_identifier { EnumItems } •OptEnd «tok_option»
	OptEnd : empty• «$»
	OptEnd : •; «$»
	OptEnd : •, «$»
	OptEnd : empty• «enum»
	OptEnd : •; «enum»
	OptEnd : •, «enum»
	OptEnd : empty• «import»
	OptEnd : •; «import»
	OptEnd : •, «import»
	OptEnd : empty• «message»
	OptEnd : •; «message»
	OptEnd : •, «message»
	OptEnd : empty• «package»
	OptEnd : •; «package»
	OptEnd : •, «package»
	OptEnd : empty• «project»
	OptEnd : •; «project»
	OptEnd : •, «project»
	OptEnd : empty• «service»
	OptEnd : •; «service»
	OptEnd : •, «service»
	OptEnd : empty• «tok_doc»
	OptEnd : •; «tok_doc»
	OptEnd : •, «tok_doc»
	OptEnd : empty• «tok_option»
	OptEnd : •; «tok_option»
	OptEnd : •, «tok_option»
}
Transitions:
	; -> 30
	, -> 31
	OptEnd -> 59


S48{
	MessageElements : MessageElements Doc •Field «}»
	MessageElements : MessageElements Doc •Option «}»
	MessageElements : MessageElements Doc •Field «[»
	MessageElements : MessageElements Doc •Field «bool»
	MessageElements : MessageElements Doc •Field «bytes»
	MessageElements : MessageElements Doc •Field «i16»
	MessageElements : MessageElements Doc •Field «i32»
	MessageElements : MessageElements Doc •Field «i64»
	MessageElements : MessageElements Doc •Field «i8»
	MessageElements : MessageElements Doc •Field «int16»
	MessageElements : MessageElements Doc •Field «int32»
	MessageElements : MessageElements Doc •Field «int64»
	MessageElements : MessageElements Doc •Field «int8»
	MessageElements : MessageElements Doc •Field «map»
	MessageElements : MessageElements Doc •Field «string»
	MessageElements : MessageElements Doc •Field «tok_doc»
	MessageElements : MessageElements Doc •Field «tok_identifier»
	MessageElements : MessageElements Doc •Field «tok_option»
	MessageElements : MessageElements Doc •Field «u16»
	MessageElements : MessageElements Doc •Field «u32»
	MessageElements : MessageElements Doc •Field «u64»
	MessageElements : MessageElements Doc •Field «u8»
	MessageElements : MessageElements Doc •Field «uint16»
	MessageElements : MessageElements Doc •Field «uint32»
	MessageElements : MessageElements Doc •Field «uint64»
	MessageElements : MessageElements Doc •Field «uint8»
	MessageElements : MessageElements Doc •Option «[»
	MessageElements : MessageElements Doc •Option «bool»
	MessageElements : MessageElements Doc •Option «bytes»
	MessageElements : MessageElements Doc •Option «i16»
	MessageElements : MessageElements Doc •Option «i32»
	MessageElements : MessageElements Doc •Option «i64»
	MessageElements : MessageElements Doc •Option «i8»
	MessageElements : MessageElements Doc •Option «int16»
	MessageElements : MessageElements Doc •Option «int32»
	MessageElements : MessageElements Doc •Option «int64»
	MessageElements : MessageElements Doc •Option «int8»
	MessageElements : MessageElements Doc •Option «map»
	MessageElements : MessageElements Doc •Option «string»
	MessageElements : MessageElements Doc •Option «tok_doc»
	MessageElements : MessageElements Doc •Option «tok_identifier»
	MessageElements : MessageElements Doc •Option «tok_option»
	MessageElements : MessageElements Doc •Option «u16»
	MessageElements : MessageElements Doc •Option «u32»
	MessageElements : MessageElements Doc •Option «u64»
	MessageElements : MessageElements Doc •Option «u8»
	MessageElements : MessageElements Doc •Option «uint16»
	MessageElements : MessageElements Doc •Option «uint32»
	MessageElements : MessageElements Doc •Option «uint64»
	MessageElements : MessageElements Doc •Option «uint8»
	Doc : Doc •tok_doc «[»
	Doc : Doc •tok_doc «bool»
	Doc : Doc •tok_doc «bytes»
	Doc : Doc •tok_doc «i16»
	Doc : Doc •tok_doc «i32»
	Doc : Doc •tok_doc «i64»
	Doc : Doc •tok_doc «i8»
	Doc : Doc •tok_doc «int16»
	Doc : Doc •tok_doc «int32»
	Doc : Doc •tok_doc «int64»
	Doc : Doc •tok_doc «int8»
	Doc : Doc •tok_doc «map»
	Doc : Doc •tok_doc «string»
	Doc : Doc •tok_doc «tok_identifier»
	Doc : Doc •tok_doc «tok_option»
	Doc : Doc •tok_doc «u16»
	Doc : Doc •tok_doc «u32»
	Doc : Doc •tok_doc «u64»
	Doc : Doc •tok_doc «u8»
	Doc : Doc •tok_doc «uint16»
	Doc : Doc •tok_doc «uint32»
	Doc : Doc •tok_doc «uint64»
	Doc : Doc •tok_doc «uint8»
	Doc : Doc •tok_doc «tok_doc»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «}»
	Option : •tok_option OptionValue «}»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «[»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «bool»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «bytes»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «i16»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «i32»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «i64»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «i8»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «int16»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «int32»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «int64»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «int8»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «map»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «string»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «tok_doc»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «tok_identifier»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «tok_option»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «u16»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «u32»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «u64»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «u8»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «uint16»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «uint32»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «uint64»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «uint8»
	Option : •tok_option OptionValue «[»
	Option : •tok_option OptionValue «bool»
	Option : •tok_option OptionValue «bytes»
	Option : •tok_option OptionValue «i16»
	Option : •tok_option OptionValue «i32»
	Option : •tok_option OptionValue «i64»
	Option : •tok_option OptionValue «i8»
	Option : •tok_option OptionValue «int16»
	Option : •tok_option OptionValue «int32»
	Option : •tok_option OptionValue «int64»
	Option : •tok_option OptionValue «int8»
	Option : •tok_option OptionValue «map»
	Option : •tok_option OptionValue «string»
	Option : •tok_option OptionValue «tok_doc»
	Option : •tok_option OptionValue «tok_identifier»
	Option : •tok_option OptionValue «tok_option»
	Option : •tok_option OptionValue «u16»
	Option : •tok_option OptionValue «u32»
	Option : •tok_option OptionValue «u64»
	Option : •tok_option OptionValue «u8»
	Option : •tok_option OptionValue «uint16»
	Option : •tok_option OptionValue «uint32»
	Option : •tok_option OptionValue «uint64»
	Option : •tok_option OptionValue «uint8»
	FiledType : •ContainerElemType «tok_identifier»
	FiledType : •ContainerType «tok_identifier»
	ContainerElemType : •BaseType «tok_identifier»
	ContainerElemType : •CustomType «tok_identifier»
	ContainerType : •ListType «tok_identifier»
	ContainerType : •MapType «tok_identifier»
	BaseType : •int8 «tok_identifier»
	BaseType : •uint8 «tok_identifier»
	BaseType : •int16 «tok_identifier»
	BaseType : •uint16 «tok_identifier»
	BaseType : •int32 «tok_identifier»
	BaseType : •uint32 «tok_identifier»
	BaseType : •int64 «tok_identifier»
	BaseType : •uint64 «tok_identifier»
	BaseType : •string «tok_identifier»
	BaseType : •bytes «tok_identifier»
	BaseType : •bool «tok_identifier»
	BaseType : •i8 «tok_identifier»
	BaseType : •u8 «tok_identifier»
	BaseType : •i16 «tok_identifier»
	BaseType : •u16 «tok_identifier»
	BaseType : •i32 «tok_identifier»
	BaseType : •u32 «tok_identifier»
	BaseType : •i64 «tok_identifier»
	BaseType : •u64 «tok_identifier»
	CustomType : •tok_identifier «tok_identifier»
	CustomType : •tok_option «tok_identifier»
	ListType : •[ ] ContainerElemType «tok_identifier»
	MapType : •map [ BaseType ] ContainerElemType «tok_identifier»
}
Transitions:
	Option -> 60
	tok_doc -> 61
	tok_identifier -> 62
	tok_option -> 63
	Field -> 64
	FiledType -> 65
	ContainerElemType -> 66
	ContainerType -> 67
	ListType -> 68
	MapType -> 69
	BaseType -> 70
	CustomType -> 71
	[ -> 72
	map -> 73
	int8 -> 74
	uint8 -> 75
	int16 -> 76
	uint16 -> 77
	int32 -> 78
	uint32 -> 79
	int64 -> 80
	uint64 -> 81
	string -> 82
	bytes -> 83
	bool -> 84
	i8 -> 85
	u8 -> 86
	i16 -> 87
	u16 -> 88
	i32 -> 89
	u32 -> 90
	i64 -> 91
	u64 -> 92


S49{
	Message : message tok_identifier { MessageElements } •OptEnd «$»
	Message : message tok_identifier { MessageElements } •OptEnd «enum»
	Message : message tok_identifier { MessageElements } •OptEnd «import»
	Message : message tok_identifier { MessageElements } •OptEnd «message»
	Message : message tok_identifier { MessageElements } •OptEnd «package»
	Message : message tok_identifier { MessageElements } •OptEnd «project»
	Message : message tok_identifier { MessageElements } •OptEnd «service»
	Message : message tok_identifier { MessageElements } •OptEnd «tok_doc»
	Message : message tok_identifier { MessageElements } •OptEnd «tok_option»
	OptEnd : empty• «$»
	OptEnd : •; «$»
	OptEnd : •, «$»
	OptEnd : empty• «enum»
	OptEnd : •; «enum»
	OptEnd : •, «enum»
	OptEnd : empty• «import»
	OptEnd : •; «import»
	OptEnd : •, «import»
	OptEnd : empty• «message»
	OptEnd : •; «message»
	OptEnd : •, «message»
	OptEnd : empty• «package»
	OptEnd : •; «package»
	OptEnd : •, «package»
	OptEnd : empty• «project»
	OptEnd : •; «project»
	OptEnd : •, «project»
	OptEnd : empty• «service»
	OptEnd : •; «service»
	OptEnd : •, «service»
	OptEnd : empty• «tok_doc»
	OptEnd : •; «tok_doc»
	OptEnd : •, «tok_doc»
	OptEnd : empty• «tok_option»
	OptEnd : •; «tok_option»
	OptEnd : •, «tok_option»
}
Transitions:
	; -> 30
	, -> 31
	OptEnd -> 93


S50{
	ServiceElements : ServiceElements Doc •Option «}»
	ServiceElements : ServiceElements Doc •MethodFlag «}»
	ServiceElements : ServiceElements Doc •Method «}»
	ServiceElements : ServiceElements Doc •Option «tok_doc»
	ServiceElements : ServiceElements Doc •Option «tok_option»
	ServiceElements : ServiceElements Doc •MethodFlag «tok_doc»
	ServiceElements : ServiceElements Doc •MethodFlag «tok_option»
	ServiceElements : ServiceElements Doc •Method «tok_doc»
	ServiceElements : ServiceElements Doc •Method «tok_option»
	ServiceElements : ServiceElements Doc •Option «notify»
	ServiceElements : ServiceElements Doc •Option «oneway»
	ServiceElements : ServiceElements Doc •Option «twoway»
	ServiceElements : ServiceElements Doc •MethodFlag «notify»
	ServiceElements : ServiceElements Doc •MethodFlag «oneway»
	ServiceElements : ServiceElements Doc •MethodFlag «twoway»
	ServiceElements : ServiceElements Doc •Method «notify»
	ServiceElements : ServiceElements Doc •Method «oneway»
	ServiceElements : ServiceElements Doc •Method «twoway»
	ServiceElements : ServiceElements Doc •Option «tok_identifier»
	ServiceElements : ServiceElements Doc •MethodFlag «tok_identifier»
	ServiceElements : ServiceElements Doc •Method «tok_identifier»
	Doc : Doc •tok_doc «tok_option»
	Doc : Doc •tok_doc «notify»
	Doc : Doc •tok_doc «oneway»
	Doc : Doc •tok_doc «twoway»
	Doc : Doc •tok_doc «tok_identifier»
	Doc : Doc •tok_doc «tok_doc»
	Option : •tok_option OptionValue «}»
	MethodFlag : •oneway : «}»
	MethodFlag : •notify : «}»
	MethodFlag : •twoway : «}»
	Method : •tok_identifier ( MethodArgs ) MethodRet MethodNo AddtionOption OptEnd «}»
	Option : •tok_option OptionValue «tok_doc»
	Option : •tok_option OptionValue «tok_option»
	MethodFlag : •oneway : «tok_doc»
	MethodFlag : •notify : «tok_doc»
	MethodFlag : •twoway : «tok_doc»
	MethodFlag : •oneway : «tok_option»
	MethodFlag : •notify : «tok_option»
	MethodFlag : •twoway : «tok_option»
	Method : •tok_identifier ( MethodArgs ) MethodRet MethodNo AddtionOption OptEnd «tok_doc»
	Method : •tok_identifier ( MethodArgs ) MethodRet MethodNo AddtionOption OptEnd «tok_option»
	Option : •tok_option OptionValue «notify»
	Option : •tok_option OptionValue «oneway»
	Option : •tok_option OptionValue «twoway»
	MethodFlag : •oneway : «notify»
	MethodFlag : •notify : «notify»
	MethodFlag : •twoway : «notify»
	MethodFlag : •oneway : «oneway»
	MethodFlag : •notify : «oneway»
	MethodFlag : •twoway : «oneway»
	MethodFlag : •oneway : «twoway»
	MethodFlag : •notify : «twoway»
	MethodFlag : •twoway : «twoway»
	Method : •tok_identifier ( MethodArgs ) MethodRet MethodNo AddtionOption OptEnd «notify»
	Method : •tok_identifier ( MethodArgs ) MethodRet MethodNo AddtionOption OptEnd «oneway»
	Method : •tok_identifier ( MethodArgs ) MethodRet MethodNo AddtionOption OptEnd «twoway»
	Option : •tok_option OptionValue «tok_identifier»
	MethodFlag : •oneway : «tok_identifier»
	MethodFlag : •notify : «tok_identifier»
	MethodFlag : •twoway : «tok_identifier»
	Method : •tok_identifier ( MethodArgs ) MethodRet MethodNo AddtionOption OptEnd «tok_identifier»
}
Transitions:
	Option -> 94
	tok_doc -> 95
	tok_identifier -> 96
	tok_option -> 97
	MethodFlag -> 98
	Method -> 99
	oneway -> 100
	notify -> 101
	twoway -> 102


S51{
	Service : service tok_identifier { ServiceElements } •OptEnd «$»
	Service : service tok_identifier { ServiceElements } •OptEnd «enum»
	Service : service tok_identifier { ServiceElements } •OptEnd «import»
	Service : service tok_identifier { ServiceElements } •OptEnd «message»
	Service : service tok_identifier { ServiceElements } •OptEnd «package»
	Service : service tok_identifier { ServiceElements } •OptEnd «project»
	Service : service tok_identifier { ServiceElements } •OptEnd «service»
	Service : service tok_identifier { ServiceElements } •OptEnd «tok_doc»
	Service : service tok_identifier { ServiceElements } •OptEnd «tok_option»
	OptEnd : empty• «$»
	OptEnd : •; «$»
	OptEnd : •, «$»
	OptEnd : empty• «enum»
	OptEnd : •; «enum»
	OptEnd : •, «enum»
	OptEnd : empty• «import»
	OptEnd : •; «import»
	OptEnd : •, «import»
	OptEnd : empty• «message»
	OptEnd : •; «message»
	OptEnd : •, «message»
	OptEnd : empty• «package»
	OptEnd : •; «package»
	OptEnd : •, «package»
	OptEnd : empty• «project»
	OptEnd : •; «project»
	OptEnd : •, «project»
	OptEnd : empty• «service»
	OptEnd : •; «service»
	OptEnd : •, «service»
	OptEnd : empty• «tok_doc»
	OptEnd : •; «tok_doc»
	OptEnd : •, «tok_doc»
	OptEnd : empty• «tok_option»
	OptEnd : •; «tok_option»
	OptEnd : •, «tok_option»
}
Transitions:
	; -> 30
	, -> 31
	OptEnd -> 103


S52{
	ProjElements : ProjElements Doc •ProjArea «}»
	ProjElements : ProjElements Doc •Option «}»
	ProjElements : ProjElements Doc •ProjArea «tok_doc»
	ProjElements : ProjElements Doc •ProjArea «tok_identifier»
	ProjElements : ProjElements Doc •Option «tok_doc»
	ProjElements : ProjElements Doc •Option «tok_identifier»
	ProjElements : ProjElements Doc •ProjArea «tok_option»
	ProjElements : ProjElements Doc •Option «tok_option»
	Doc : Doc •tok_doc «tok_identifier»
	Doc : Doc •tok_doc «tok_option»
	Doc : Doc •tok_doc «tok_doc»
	ProjArea : •tok_identifier : «}»
	Option : •tok_option OptionValue «}»
	ProjArea : •tok_identifier : «tok_doc»
	ProjArea : •tok_identifier : «tok_identifier»
	Option : •tok_option OptionValue «tok_doc»
	Option : •tok_option OptionValue «tok_identifier»
	ProjArea : •tok_identifier : «tok_option»
	Option : •tok_option OptionValue «tok_option»
}
Transitions:
	tok_doc -> 55
	tok_option -> 57
	Option -> 104
	tok_identifier -> 105
	ProjArea -> 106


S53{
	Project : project tok_identifier { ProjElements }• «$»
	Project : project tok_identifier { ProjElements }• «enum»
	Project : project tok_identifier { ProjElements }• «import»
	Project : project tok_identifier { ProjElements }• «message»
	Project : project tok_identifier { ProjElements }• «package»
	Project : project tok_identifier { ProjElements }• «project»
	Project : project tok_identifier { ProjElements }• «service»
	Project : project tok_identifier { ProjElements }• «tok_doc»
	Project : project tok_identifier { ProjElements }• «tok_option»
}
Transitions:


S54{
	EnumItems : EnumItems Doc Option• «}»
	EnumItems : EnumItems Doc Option• «tok_doc»
	EnumItems : EnumItems Doc Option• «tok_identifier»
	EnumItems : EnumItems Doc Option• «tok_option»
}
Transitions:


S55{
	Doc : Doc tok_doc• «tok_identifier»
	Doc : Doc tok_doc• «tok_option»
	Doc : Doc tok_doc• «tok_doc»
}
Transitions:


S56{
	EnumItem : tok_identifier •EnumItemValue OptEnd «}»
	EnumItem : tok_identifier •EnumItemValue OptEnd «tok_doc»
	EnumItem : tok_identifier •EnumItemValue OptEnd «tok_identifier»
	EnumItem : tok_identifier •EnumItemValue OptEnd «tok_option»
	EnumItemValue : empty• «,»
	EnumItemValue : empty• «;»
	EnumItemValue : empty• «}»
	EnumItemValue : •= tok_const_int «,»
	EnumItemValue : •= tok_const_int «;»
	EnumItemValue : •= tok_const_int «}»
	EnumItemValue : empty• «tok_doc»
	EnumItemValue : •= tok_const_int «tok_doc»
	EnumItemValue : empty• «tok_identifier»
	EnumItemValue : •= tok_const_int «tok_identifier»
	EnumItemValue : empty• «tok_option»
	EnumItemValue : •= tok_const_int «tok_option»
}
Transitions:
	= -> 107
	EnumItemValue -> 108


S57{
	Option : tok_option •OptionValue «}»
	Option : tok_option •OptionValue «tok_doc»
	Option : tok_option •OptionValue «tok_identifier»
	Option : tok_option •OptionValue «tok_option»
	OptionValue : empty• «}»
	OptionValue : •= tok_literal OptEnd «}»
	OptionValue : •= tok_const_int OptEnd «}»
	OptionValue : empty• «tok_doc»
	OptionValue : •= tok_literal OptEnd «tok_doc»
	OptionValue : •= tok_const_int OptEnd «tok_doc»
	OptionValue : empty• «tok_identifier»
	OptionValue : •= tok_literal OptEnd «tok_identifier»
	OptionValue : •= tok_const_int OptEnd «tok_identifier»
	OptionValue : empty• «tok_option»
	OptionValue : •= tok_literal OptEnd «tok_option»
	OptionValue : •= tok_const_int OptEnd «tok_option»
}
Transitions:
	OptionValue -> 109
	= -> 110


S58{
	EnumItems : EnumItems Doc EnumItem• «}»
	EnumItems : EnumItems Doc EnumItem• «tok_doc»
	EnumItems : EnumItems Doc EnumItem• «tok_identifier»
	EnumItems : EnumItems Doc EnumItem• «tok_option»
}
Transitions:


S59{
	Enum : enum tok_identifier { EnumItems } OptEnd• «$»
	Enum : enum tok_identifier { EnumItems } OptEnd• «enum»
	Enum : enum tok_identifier { EnumItems } OptEnd• «import»
	Enum : enum tok_identifier { EnumItems } OptEnd• «message»
	Enum : enum tok_identifier { EnumItems } OptEnd• «package»
	Enum : enum tok_identifier { EnumItems } OptEnd• «project»
	Enum : enum tok_identifier { EnumItems } OptEnd• «service»
	Enum : enum tok_identifier { EnumItems } OptEnd• «tok_doc»
	Enum : enum tok_identifier { EnumItems } OptEnd• «tok_option»
}
Transitions:


S60{
	MessageElements : MessageElements Doc Option• «}»
	MessageElements : MessageElements Doc Option• «[»
	MessageElements : MessageElements Doc Option• «bool»
	MessageElements : MessageElements Doc Option• «bytes»
	MessageElements : MessageElements Doc Option• «i16»
	MessageElements : MessageElements Doc Option• «i32»
	MessageElements : MessageElements Doc Option• «i64»
	MessageElements : MessageElements Doc Option• «i8»
	MessageElements : MessageElements Doc Option• «int16»
	MessageElements : MessageElements Doc Option• «int32»
	MessageElements : MessageElements Doc Option• «int64»
	MessageElements : MessageElements Doc Option• «int8»
	MessageElements : MessageElements Doc Option• «map»
	MessageElements : MessageElements Doc Option• «string»
	MessageElements : MessageElements Doc Option• «tok_doc»
	MessageElements : MessageElements Doc Option• «tok_identifier»
	MessageElements : MessageElements Doc Option• «tok_option»
	MessageElements : MessageElements Doc Option• «u16»
	MessageElements : MessageElements Doc Option• «u32»
	MessageElements : MessageElements Doc Option• «u64»
	MessageElements : MessageElements Doc Option• «u8»
	MessageElements : MessageElements Doc Option• «uint16»
	MessageElements : MessageElements Doc Option• «uint32»
	MessageElements : MessageElements Doc Option• «uint64»
	MessageElements : MessageElements Doc Option• «uint8»
}
Transitions:


S61{
	Doc : Doc tok_doc• «[»
	Doc : Doc tok_doc• «bool»
	Doc : Doc tok_doc• «bytes»
	Doc : Doc tok_doc• «i16»
	Doc : Doc tok_doc• «i32»
	Doc : Doc tok_doc• «i64»
	Doc : Doc tok_doc• «i8»
	Doc : Doc tok_doc• «int16»
	Doc : Doc tok_doc• «int32»
	Doc : Doc tok_doc• «int64»
	Doc : Doc tok_doc• «int8»
	Doc : Doc tok_doc• «map»
	Doc : Doc tok_doc• «string»
	Doc : Doc tok_doc• «tok_identifier»
	Doc : Doc tok_doc• «tok_option»
	Doc : Doc tok_doc• «u16»
	Doc : Doc tok_doc• «u32»
	Doc : Doc tok_doc• «u64»
	Doc : Doc tok_doc• «u8»
	Doc : Doc tok_doc• «uint16»
	Doc : Doc tok_doc• «uint32»
	Doc : Doc tok_doc• «uint64»
	Doc : Doc tok_doc• «uint8»
	Doc : Doc tok_doc• «tok_doc»
}
Transitions:


S62{
	CustomType : tok_identifier• «tok_identifier»
}
Transitions:


S63{
	Option : tok_option •OptionValue «}»
	Option : tok_option •OptionValue «[»
	Option : tok_option •OptionValue «bool»
	Option : tok_option •OptionValue «bytes»
	Option : tok_option •OptionValue «i16»
	Option : tok_option •OptionValue «i32»
	Option : tok_option •OptionValue «i64»
	Option : tok_option •OptionValue «i8»
	Option : tok_option •OptionValue «int16»
	Option : tok_option •OptionValue «int32»
	Option : tok_option •OptionValue «int64»
	Option : tok_option •OptionValue «int8»
	Option : tok_option •OptionValue «map»
	Option : tok_option •OptionValue «string»
	Option : tok_option •OptionValue «tok_doc»
	Option : tok_option •OptionValue «tok_identifier»
	Option : tok_option •OptionValue «tok_option»
	Option : tok_option •OptionValue «u16»
	Option : tok_option •OptionValue «u32»
	Option : tok_option •OptionValue «u64»
	Option : tok_option •OptionValue «u8»
	Option : tok_option •OptionValue «uint16»
	Option : tok_option •OptionValue «uint32»
	Option : tok_option •OptionValue «uint64»
	Option : tok_option •OptionValue «uint8»
	CustomType : tok_option• «tok_identifier»
	OptionValue : empty• «}»
	OptionValue : •= tok_literal OptEnd «}»
	OptionValue : •= tok_const_int OptEnd «}»
	OptionValue : empty• «[»
	OptionValue : •= tok_literal OptEnd «[»
	OptionValue : •= tok_const_int OptEnd «[»
	OptionValue : empty• «bool»
	OptionValue : •= tok_literal OptEnd «bool»
	OptionValue : •= tok_const_int OptEnd «bool»
	OptionValue : empty• «bytes»
	OptionValue : •= tok_literal OptEnd «bytes»
	OptionValue : •= tok_const_int OptEnd «bytes»
	OptionValue : empty• «i16»
	OptionValue : •= tok_literal OptEnd «i16»
	OptionValue : •= tok_const_int OptEnd «i16»
	OptionValue : empty• «i32»
	OptionValue : •= tok_literal OptEnd «i32»
	OptionValue : •= tok_const_int OptEnd «i32»
	OptionValue : empty• «i64»
	OptionValue : •= tok_literal OptEnd «i64»
	OptionValue : •= tok_const_int OptEnd «i64»
	OptionValue : empty• «i8»
	OptionValue : •= tok_literal OptEnd «i8»
	OptionValue : •= tok_const_int OptEnd «i8»
	OptionValue : empty• «int16»
	OptionValue : •= tok_literal OptEnd «int16»
	OptionValue : •= tok_const_int OptEnd «int16»
	OptionValue : empty• «int32»
	OptionValue : •= tok_literal OptEnd «int32»
	OptionValue : •= tok_const_int OptEnd «int32»
	OptionValue : empty• «int64»
	OptionValue : •= tok_literal OptEnd «int64»
	OptionValue : •= tok_const_int OptEnd «int64»
	OptionValue : empty• «int8»
	OptionValue : •= tok_literal OptEnd «int8»
	OptionValue : •= tok_const_int OptEnd «int8»
	OptionValue : empty• «map»
	OptionValue : •= tok_literal OptEnd «map»
	OptionValue : •= tok_const_int OptEnd «map»
	OptionValue : empty• «string»
	OptionValue : •= tok_literal OptEnd «string»
	OptionValue : •= tok_const_int OptEnd «string»
	OptionValue : empty• «tok_doc»
	OptionValue : •= tok_literal OptEnd «tok_doc»
	OptionValue : •= tok_const_int OptEnd «tok_doc»
	OptionValue : empty• «tok_identifier»
	OptionValue : •= tok_literal OptEnd «tok_identifier»
	OptionValue : •= tok_const_int OptEnd «tok_identifier»
	OptionValue : empty• «tok_option»
	OptionValue : •= tok_literal OptEnd «tok_option»
	OptionValue : •= tok_const_int OptEnd «tok_option»
	OptionValue : empty• «u16»
	OptionValue : •= tok_literal OptEnd «u16»
	OptionValue : •= tok_const_int OptEnd «u16»
	OptionValue : empty• «u32»
	OptionValue : •= tok_literal OptEnd «u32»
	OptionValue : •= tok_const_int OptEnd «u32»
	OptionValue : empty• «u64»
	OptionValue : •= tok_literal OptEnd «u64»
	OptionValue : •= tok_const_int OptEnd «u64»
	OptionValue : empty• «u8»
	OptionValue : •= tok_literal OptEnd «u8»
	OptionValue : •= tok_const_int OptEnd «u8»
	OptionValue : empty• «uint16»
	OptionValue : •= tok_literal OptEnd «uint16»
	OptionValue : •= tok_const_int OptEnd «uint16»
	OptionValue : empty• «uint32»
	OptionValue : •= tok_literal OptEnd «uint32»
	OptionValue : •= tok_const_int OptEnd «uint32»
	OptionValue : empty• «uint64»
	OptionValue : •= tok_literal OptEnd «uint64»
	OptionValue : •= tok_const_int OptEnd «uint64»
	OptionValue : empty• «uint8»
	OptionValue : •= tok_literal OptEnd «uint8»
	OptionValue : •= tok_const_int OptEnd «uint8»
}
Transitions:
	OptionValue -> 111
	= -> 112


S64{
	MessageElements : MessageElements Doc Field• «}»
	MessageElements : MessageElements Doc Field• «[»
	MessageElements : MessageElements Doc Field• «bool»
	MessageElements : MessageElements Doc Field• «bytes»
	MessageElements : MessageElements Doc Field• «i16»
	MessageElements : MessageElements Doc Field• «i32»
	MessageElements : MessageElements Doc Field• «i64»
	MessageElements : MessageElements Doc Field• «i8»
	MessageElements : MessageElements Doc Field• «int16»
	MessageElements : MessageElements Doc Field• «int32»
	MessageElements : MessageElements Doc Field• «int64»
	MessageElements : MessageElements Doc Field• «int8»
	MessageElements : MessageElements Doc Field• «map»
	MessageElements : MessageElements Doc Field• «string»
	MessageElements : MessageElements Doc Field• «tok_doc»
	MessageElements : MessageElements Doc Field• «tok_identifier»
	MessageElements : MessageElements Doc Field• «tok_option»
	MessageElements : MessageElements Doc Field• «u16»
	MessageElements : MessageElements Doc Field• «u32»
	MessageElements : MessageElements Doc Field• «u64»
	MessageElements : MessageElements Doc Field• «u8»
	MessageElements : MessageElements Doc Field• «uint16»
	MessageElements : MessageElements Doc Field• «uint32»
	MessageElements : MessageElements Doc Field• «uint64»
	MessageElements : MessageElements Doc Field• «uint8»
}
Transitions:


S65{
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «}»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «[»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «bool»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «bytes»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «i16»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «i32»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «i64»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «i8»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «int16»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «int32»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «int64»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «int8»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «map»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «string»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «tok_doc»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «tok_identifier»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «tok_option»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «u16»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «u32»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «u64»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «u8»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «uint16»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «uint32»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «uint64»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «uint8»
}
Transitions:
	tok_identifier -> 113


S66{
	FiledType : ContainerElemType• «tok_identifier»
}
Transitions:


S67{
	FiledType : ContainerType• «tok_identifier»
}
Transitions:


S68{
	ContainerType : ListType• «tok_identifier»
}
Transitions:


S69{
	ContainerType : MapType• «tok_identifier»
}
Transitions:


S70{
	ContainerElemType : BaseType• «tok_identifier»
}
Transitions:


S71{
	ContainerElemType : CustomType• «tok_identifier»
}
Transitions:


S72{
	ListType : [ •] ContainerElemType «tok_identifier»
}
Transitions:
	] -> 114


S73{
	MapType : map •[ BaseType ] ContainerElemType «tok_identifier»
}
Transitions:
	[ -> 115


S74{
	BaseType : int8• «tok_identifier»
}
Transitions:


S75{
	BaseType : uint8• «tok_identifier»
}
Transitions:


S76{
	BaseType : int16• «tok_identifier»
}
Transitions:


S77{
	BaseType : uint16• «tok_identifier»
}
Transitions:


S78{
	BaseType : int32• «tok_identifier»
}
Transitions:


S79{
	BaseType : uint32• «tok_identifier»
}
Transitions:


S80{
	BaseType : int64• «tok_identifier»
}
Transitions:


S81{
	BaseType : uint64• «tok_identifier»
}
Transitions:


S82{
	BaseType : string• «tok_identifier»
}
Transitions:


S83{
	BaseType : bytes• «tok_identifier»
}
Transitions:


S84{
	BaseType : bool• «tok_identifier»
}
Transitions:


S85{
	BaseType : i8• «tok_identifier»
}
Transitions:


S86{
	BaseType : u8• «tok_identifier»
}
Transitions:


S87{
	BaseType : i16• «tok_identifier»
}
Transitions:


S88{
	BaseType : u16• «tok_identifier»
}
Transitions:


S89{
	BaseType : i32• «tok_identifier»
}
Transitions:


S90{
	BaseType : u32• «tok_identifier»
}
Transitions:


S91{
	BaseType : i64• «tok_identifier»
}
Transitions:


S92{
	BaseType : u64• «tok_identifier»
}
Transitions:


S93{
	Message : message tok_identifier { MessageElements } OptEnd• «$»
	Message : message tok_identifier { MessageElements } OptEnd• «enum»
	Message : message tok_identifier { MessageElements } OptEnd• «import»
	Message : message tok_identifier { MessageElements } OptEnd• «message»
	Message : message tok_identifier { MessageElements } OptEnd• «package»
	Message : message tok_identifier { MessageElements } OptEnd• «project»
	Message : message tok_identifier { MessageElements } OptEnd• «service»
	Message : message tok_identifier { MessageElements } OptEnd• «tok_doc»
	Message : message tok_identifier { MessageElements } OptEnd• «tok_option»
}
Transitions:


S94{
	ServiceElements : ServiceElements Doc Option• «}»
	ServiceElements : ServiceElements Doc Option• «tok_doc»
	ServiceElements : ServiceElements Doc Option• «tok_option»
	ServiceElements : ServiceElements Doc Option• «notify»
	ServiceElements : ServiceElements Doc Option• «oneway»
	ServiceElements : ServiceElements Doc Option• «twoway»
	ServiceElements : ServiceElements Doc Option• «tok_identifier»
}
Transitions:


S95{
	Doc : Doc tok_doc• «tok_option»
	Doc : Doc tok_doc• «notify»
	Doc : Doc tok_doc• «oneway»
	Doc : Doc tok_doc• «twoway»
	Doc : Doc tok_doc• «tok_identifier»
	Doc : Doc tok_doc• «tok_doc»
}
Transitions:


S96{
	Method : tok_identifier •( MethodArgs ) MethodRet MethodNo AddtionOption OptEnd «}»
	Method : tok_identifier •( MethodArgs ) MethodRet MethodNo AddtionOption OptEnd «tok_doc»
	Method : tok_identifier •( MethodArgs ) MethodRet MethodNo AddtionOption OptEnd «tok_option»
	Method : tok_identifier •( MethodArgs ) MethodRet MethodNo AddtionOption OptEnd «notify»
	Method : tok_identifier •( MethodArgs ) MethodRet MethodNo AddtionOption OptEnd «oneway»
	Method : tok_identifier •( MethodArgs ) MethodRet MethodNo AddtionOption OptEnd «twoway»
	Method : tok_identifier •( MethodArgs ) MethodRet MethodNo AddtionOption OptEnd «tok_identifier»
}
Transitions:
	( -> 116


S97{
	Option : tok_option •OptionValue «}»
	Option : tok_option •OptionValue «tok_doc»
	Option : tok_option •OptionValue «tok_option»
	Option : tok_option •OptionValue «notify»
	Option : tok_option •OptionValue «oneway»
	Option : tok_option •OptionValue «twoway»
	Option : tok_option •OptionValue «tok_identifier»
	OptionValue : empty• «}»
	OptionValue : •= tok_literal OptEnd «}»
	OptionValue : •= tok_const_int OptEnd «}»
	OptionValue : empty• «tok_doc»
	OptionValue : •= tok_literal OptEnd «tok_doc»
	OptionValue : •= tok_const_int OptEnd «tok_doc»
	OptionValue : empty• «tok_option»
	OptionValue : •= tok_literal OptEnd «tok_option»
	OptionValue : •= tok_const_int OptEnd «tok_option»
	OptionValue : empty• «notify»
	OptionValue : •= tok_literal OptEnd «notify»
	OptionValue : •= tok_const_int OptEnd «notify»
	OptionValue : empty• «oneway»
	OptionValue : •= tok_literal OptEnd «oneway»
	OptionValue : •= tok_const_int OptEnd «oneway»
	OptionValue : empty• «twoway»
	OptionValue : •= tok_literal OptEnd «twoway»
	OptionValue : •= tok_const_int OptEnd «twoway»
	OptionValue : empty• «tok_identifier»
	OptionValue : •= tok_literal OptEnd «tok_identifier»
	OptionValue : •= tok_const_int OptEnd «tok_identifier»
}
Transitions:
	OptionValue -> 117
	= -> 118


S98{
	ServiceElements : ServiceElements Doc MethodFlag• «}»
	ServiceElements : ServiceElements Doc MethodFlag• «tok_doc»
	ServiceElements : ServiceElements Doc MethodFlag• «tok_option»
	ServiceElements : ServiceElements Doc MethodFlag• «notify»
	ServiceElements : ServiceElements Doc MethodFlag• «oneway»
	ServiceElements : ServiceElements Doc MethodFlag• «twoway»
	ServiceElements : ServiceElements Doc MethodFlag• «tok_identifier»
}
Transitions:


S99{
	ServiceElements : ServiceElements Doc Method• «}»
	ServiceElements : ServiceElements Doc Method• «tok_doc»
	ServiceElements : ServiceElements Doc Method• «tok_option»
	ServiceElements : ServiceElements Doc Method• «notify»
	ServiceElements : ServiceElements Doc Method• «oneway»
	ServiceElements : ServiceElements Doc Method• «twoway»
	ServiceElements : ServiceElements Doc Method• «tok_identifier»
}
Transitions:


S100{
	MethodFlag : oneway •: «}»
	MethodFlag : oneway •: «tok_doc»
	MethodFlag : oneway •: «tok_option»
	MethodFlag : oneway •: «notify»
	MethodFlag : oneway •: «oneway»
	MethodFlag : oneway •: «twoway»
	MethodFlag : oneway •: «tok_identifier»
}
Transitions:
	: -> 119


S101{
	MethodFlag : notify •: «}»
	MethodFlag : notify •: «tok_doc»
	MethodFlag : notify •: «tok_option»
	MethodFlag : notify •: «notify»
	MethodFlag : notify •: «oneway»
	MethodFlag : notify •: «twoway»
	MethodFlag : notify •: «tok_identifier»
}
Transitions:
	: -> 120


S102{
	MethodFlag : twoway •: «}»
	MethodFlag : twoway •: «tok_doc»
	MethodFlag : twoway •: «tok_option»
	MethodFlag : twoway •: «notify»
	MethodFlag : twoway •: «oneway»
	MethodFlag : twoway •: «twoway»
	MethodFlag : twoway •: «tok_identifier»
}
Transitions:
	: -> 121


S103{
	Service : service tok_identifier { ServiceElements } OptEnd• «$»
	Service : service tok_identifier { ServiceElements } OptEnd• «enum»
	Service : service tok_identifier { ServiceElements } OptEnd• «import»
	Service : service tok_identifier { ServiceElements } OptEnd• «message»
	Service : service tok_identifier { ServiceElements } OptEnd• «package»
	Service : service tok_identifier { ServiceElements } OptEnd• «project»
	Service : service tok_identifier { ServiceElements } OptEnd• «service»
	Service : service tok_identifier { ServiceElements } OptEnd• «tok_doc»
	Service : service tok_identifier { ServiceElements } OptEnd• «tok_option»
}
Transitions:


S104{
	ProjElements : ProjElements Doc Option• «}»
	ProjElements : ProjElements Doc Option• «tok_doc»
	ProjElements : ProjElements Doc Option• «tok_identifier»
	ProjElements : ProjElements Doc Option• «tok_option»
}
Transitions:


S105{
	ProjArea : tok_identifier •: «}»
	ProjArea : tok_identifier •: «tok_doc»
	ProjArea : tok_identifier •: «tok_identifier»
	ProjArea : tok_identifier •: «tok_option»
}
Transitions:
	: -> 122


S106{
	ProjElements : ProjElements Doc ProjArea• «}»
	ProjElements : ProjElements Doc ProjArea• «tok_doc»
	ProjElements : ProjElements Doc ProjArea• «tok_identifier»
	ProjElements : ProjElements Doc ProjArea• «tok_option»
}
Transitions:


S107{
	EnumItemValue : = •tok_const_int «,»
	EnumItemValue : = •tok_const_int «;»
	EnumItemValue : = •tok_const_int «}»
	EnumItemValue : = •tok_const_int «tok_doc»
	EnumItemValue : = •tok_const_int «tok_identifier»
	EnumItemValue : = •tok_const_int «tok_option»
}
Transitions:
	tok_const_int -> 123


S108{
	EnumItem : tok_identifier EnumItemValue •OptEnd «}»
	EnumItem : tok_identifier EnumItemValue •OptEnd «tok_doc»
	EnumItem : tok_identifier EnumItemValue •OptEnd «tok_identifier»
	EnumItem : tok_identifier EnumItemValue •OptEnd «tok_option»
	OptEnd : empty• «}»
	OptEnd : •; «}»
	OptEnd : •, «}»
	OptEnd : empty• «tok_doc»
	OptEnd : •; «tok_doc»
	OptEnd : •, «tok_doc»
	OptEnd : empty• «tok_identifier»
	OptEnd : •; «tok_identifier»
	OptEnd : •, «tok_identifier»
	OptEnd : empty• «tok_option»
	OptEnd : •; «tok_option»
	OptEnd : •, «tok_option»
}
Transitions:
	OptEnd -> 124
	; -> 125
	, -> 126


S109{
	Option : tok_option OptionValue• «}»
	Option : tok_option OptionValue• «tok_doc»
	Option : tok_option OptionValue• «tok_identifier»
	Option : tok_option OptionValue• «tok_option»
}
Transitions:


S110{
	OptionValue : = •tok_literal OptEnd «}»
	OptionValue : = •tok_const_int OptEnd «}»
	OptionValue : = •tok_literal OptEnd «tok_doc»
	OptionValue : = •tok_const_int OptEnd «tok_doc»
	OptionValue : = •tok_literal OptEnd «tok_identifier»
	OptionValue : = •tok_const_int OptEnd «tok_identifier»
	OptionValue : = •tok_literal OptEnd «tok_option»
	OptionValue : = •tok_const_int OptEnd «tok_option»
}
Transitions:
	tok_literal -> 127
	tok_const_int -> 128


S111{
	Option : tok_option OptionValue• «}»
	Option : tok_option OptionValue• «[»
	Option : tok_option OptionValue• «bool»
	Option : tok_option OptionValue• «bytes»
	Option : tok_option OptionValue• «i16»
	Option : tok_option OptionValue• «i32»
	Option : tok_option OptionValue• «i64»
	Option : tok_option OptionValue• «i8»
	Option : tok_option OptionValue• «int16»
	Option : tok_option OptionValue• «int32»
	Option : tok_option OptionValue• «int64»
	Option : tok_option OptionValue• «int8»
	Option : tok_option OptionValue• «map»
	Option : tok_option OptionValue• «string»
	Option : tok_option OptionValue• «tok_doc»
	Option : tok_option OptionValue• «tok_identifier»
	Option : tok_option OptionValue• «tok_option»
	Option : tok_option OptionValue• «u16»
	Option : tok_option OptionValue• «u32»
	Option : tok_option OptionValue• «u64»
	Option : tok_option OptionValue• «u8»
	Option : tok_option OptionValue• «uint16»
	Option : tok_option OptionValue• «uint32»
	Option : tok_option OptionValue• «uint64»
	Option : tok_option OptionValue• «uint8»
}
Transitions:


S112{
	OptionValue : = •tok_literal OptEnd «}»
	OptionValue : = •tok_const_int OptEnd «}»
	OptionValue : = •tok_literal OptEnd «[»
	OptionValue : = •tok_const_int OptEnd «[»
	OptionValue : = •tok_literal OptEnd «bool»
	OptionValue : = •tok_const_int OptEnd «bool»
	OptionValue : = •tok_literal OptEnd «bytes»
	OptionValue : = •tok_const_int OptEnd «bytes»
	OptionValue : = •tok_literal OptEnd «i16»
	OptionValue : = •tok_const_int OptEnd «i16»
	OptionValue : = •tok_literal OptEnd «i32»
	OptionValue : = •tok_const_int OptEnd «i32»
	OptionValue : = •tok_literal OptEnd «i64»
	OptionValue : = •tok_const_int OptEnd «i64»
	OptionValue : = •tok_literal OptEnd «i8»
	OptionValue : = •tok_const_int OptEnd «i8»
	OptionValue : = •tok_literal OptEnd «int16»
	OptionValue : = •tok_const_int OptEnd «int16»
	OptionValue : = •tok_literal OptEnd «int32»
	OptionValue : = •tok_const_int OptEnd «int32»
	OptionValue : = •tok_literal OptEnd «int64»
	OptionValue : = •tok_const_int OptEnd «int64»
	OptionValue : = •tok_literal OptEnd «int8»
	OptionValue : = •tok_const_int OptEnd «int8»
	OptionValue : = •tok_literal OptEnd «map»
	OptionValue : = •tok_const_int OptEnd «map»
	OptionValue : = •tok_literal OptEnd «string»
	OptionValue : = •tok_const_int OptEnd «string»
	OptionValue : = •tok_literal OptEnd «tok_doc»
	OptionValue : = •tok_const_int OptEnd «tok_doc»
	OptionValue : = •tok_literal OptEnd «tok_identifier»
	OptionValue : = •tok_const_int OptEnd «tok_identifier»
	OptionValue : = •tok_literal OptEnd «tok_option»
	OptionValue : = •tok_const_int OptEnd «tok_option»
	OptionValue : = •tok_literal OptEnd «u16»
	OptionValue : = •tok_const_int OptEnd «u16»
	OptionValue : = •tok_literal OptEnd «u32»
	OptionValue : = •tok_const_int OptEnd «u32»
	OptionValue : = •tok_literal OptEnd «u64»
	OptionValue : = •tok_const_int OptEnd «u64»
	OptionValue : = •tok_literal OptEnd «u8»
	OptionValue : = •tok_const_int OptEnd «u8»
	OptionValue : = •tok_literal OptEnd «uint16»
	OptionValue : = •tok_const_int OptEnd «uint16»
	OptionValue : = •tok_literal OptEnd «uint32»
	OptionValue : = •tok_const_int OptEnd «uint32»
	OptionValue : = •tok_literal OptEnd «uint64»
	OptionValue : = •tok_const_int OptEnd «uint64»
	OptionValue : = •tok_literal OptEnd «uint8»
	OptionValue : = •tok_const_int OptEnd «uint8»
}
Transitions:
	tok_literal -> 129
	tok_const_int -> 130


S113{
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «}»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «[»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «bool»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «bytes»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «i16»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «i32»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «i64»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «i8»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «int16»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «int32»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «int64»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «int8»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «map»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «string»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «tok_doc»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «tok_identifier»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «tok_option»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «u16»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «u32»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «u64»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «u8»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «uint16»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «uint32»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «uint64»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «uint8»
}
Transitions:
	= -> 131


S114{
	ListType : [ ] •ContainerElemType «tok_identifier»
	ContainerElemType : •BaseType «tok_identifier»
	ContainerElemType : •CustomType «tok_identifier»
	BaseType : •int8 «tok_identifier»
	BaseType : •uint8 «tok_identifier»
	BaseType : •int16 «tok_identifier»
	BaseType : •uint16 «tok_identifier»
	BaseType : •int32 «tok_identifier»
	BaseType : •uint32 «tok_identifier»
	BaseType : •int64 «tok_identifier»
	BaseType : •uint64 «tok_identifier»
	BaseType : •string «tok_identifier»
	BaseType : •bytes «tok_identifier»
	BaseType : •bool «tok_identifier»
	BaseType : •i8 «tok_identifier»
	BaseType : •u8 «tok_identifier»
	BaseType : •i16 «tok_identifier»
	BaseType : •u16 «tok_identifier»
	BaseType : •i32 «tok_identifier»
	BaseType : •u32 «tok_identifier»
	BaseType : •i64 «tok_identifier»
	BaseType : •u64 «tok_identifier»
	CustomType : •tok_identifier «tok_identifier»
	CustomType : •tok_option «tok_identifier»
}
Transitions:
	tok_identifier -> 62
	BaseType -> 70
	CustomType -> 71
	int8 -> 74
	uint8 -> 75
	int16 -> 76
	uint16 -> 77
	int32 -> 78
	uint32 -> 79
	int64 -> 80
	uint64 -> 81
	string -> 82
	bytes -> 83
	bool -> 84
	i8 -> 85
	u8 -> 86
	i16 -> 87
	u16 -> 88
	i32 -> 89
	u32 -> 90
	i64 -> 91
	u64 -> 92
	tok_option -> 132
	ContainerElemType -> 133


S115{
	MapType : map [ •BaseType ] ContainerElemType «tok_identifier»
	BaseType : •int8 «]»
	BaseType : •uint8 «]»
	BaseType : •int16 «]»
	BaseType : •uint16 «]»
	BaseType : •int32 «]»
	BaseType : •uint32 «]»
	BaseType : •int64 «]»
	BaseType : •uint64 «]»
	BaseType : •string «]»
	BaseType : •bytes «]»
	BaseType : •bool «]»
	BaseType : •i8 «]»
	BaseType : •u8 «]»
	BaseType : •i16 «]»
	BaseType : •u16 «]»
	BaseType : •i32 «]»
	BaseType : •u32 «]»
	BaseType : •i64 «]»
	BaseType : •u64 «]»
}
Transitions:
	BaseType -> 134
	int8 -> 135
	uint8 -> 136
	int16 -> 137
	uint16 -> 138
	int32 -> 139
	uint32 -> 140
	int64 -> 141
	uint64 -> 142
	string -> 143
	bytes -> 144
	bool -> 145
	i8 -> 146
	u8 -> 147
	i16 -> 148
	u16 -> 149
	i32 -> 150
	u32 -> 151
	i64 -> 152
	u64 -> 153


S116{
	Method : tok_identifier ( •MethodArgs ) MethodRet MethodNo AddtionOption OptEnd «}»
	Method : tok_identifier ( •MethodArgs ) MethodRet MethodNo AddtionOption OptEnd «tok_doc»
	Method : tok_identifier ( •MethodArgs ) MethodRet MethodNo AddtionOption OptEnd «tok_option»
	Method : tok_identifier ( •MethodArgs ) MethodRet MethodNo AddtionOption OptEnd «notify»
	Method : tok_identifier ( •MethodArgs ) MethodRet MethodNo AddtionOption OptEnd «oneway»
	Method : tok_identifier ( •MethodArgs ) MethodRet MethodNo AddtionOption OptEnd «twoway»
	Method : tok_identifier ( •MethodArgs ) MethodRet MethodNo AddtionOption OptEnd «tok_identifier»
	MethodArgs : •void «)»
	MethodArgs : •FiledType «)»
	MethodArgs : •MethodArgFields «)»
	FiledType : •ContainerElemType «)»
	FiledType : •ContainerType «)»
	MethodArgFields : •MethodArgFields Doc Field «)»
	ContainerElemType : •BaseType «)»
	ContainerElemType : •CustomType «)»
	ContainerType : •ListType «)»
	ContainerType : •MapType «)»
	MethodArgFields : •MethodArgFields Doc Field «[»
	MethodArgFields : •MethodArgFields Doc Field «bool»
	MethodArgFields : •MethodArgFields Doc Field «bytes»
	MethodArgFields : •MethodArgFields Doc Field «i16»
	MethodArgFields : •MethodArgFields Doc Field «i32»
	MethodArgFields : •MethodArgFields Doc Field «i64»
	MethodArgFields : •MethodArgFields Doc Field «i8»
	MethodArgFields : •MethodArgFields Doc Field «int16»
	MethodArgFields : •MethodArgFields Doc Field «int32»
	MethodArgFields : •MethodArgFields Doc Field «int64»
	MethodArgFields : •MethodArgFields Doc Field «int8»
	MethodArgFields : •MethodArgFields Doc Field «map»
	MethodArgFields : •MethodArgFields Doc Field «string»
	MethodArgFields : •MethodArgFields Doc Field «tok_doc»
	MethodArgFields : •MethodArgFields Doc Field «tok_identifier»
	MethodArgFields : •MethodArgFields Doc Field «tok_option»
	MethodArgFields : •MethodArgFields Doc Field «u16»
	MethodArgFields : •MethodArgFields Doc Field «u32»
	MethodArgFields : •MethodArgFields Doc Field «u64»
	MethodArgFields : •MethodArgFields Doc Field «u8»
	MethodArgFields : •MethodArgFields Doc Field «uint16»
	MethodArgFields : •MethodArgFields Doc Field «uint32»
	MethodArgFields : •MethodArgFields Doc Field «uint64»
	MethodArgFields : •MethodArgFields Doc Field «uint8»
	BaseType : •int8 «)»
	BaseType : •uint8 «)»
	BaseType : •int16 «)»
	BaseType : •uint16 «)»
	BaseType : •int32 «)»
	BaseType : •uint32 «)»
	BaseType : •int64 «)»
	BaseType : •uint64 «)»
	BaseType : •string «)»
	BaseType : •bytes «)»
	BaseType : •bool «)»
	BaseType : •i8 «)»
	BaseType : •u8 «)»
	BaseType : •i16 «)»
	BaseType : •u16 «)»
	BaseType : •i32 «)»
	BaseType : •u32 «)»
	BaseType : •i64 «)»
	BaseType : •u64 «)»
	CustomType : •tok_identifier «)»
	CustomType : •tok_option «)»
	ListType : •[ ] ContainerElemType «)»
	MapType : •map [ BaseType ] ContainerElemType «)»
}
Transitions:
	tok_identifier -> 154
	tok_option -> 155
	FiledType -> 156
	ContainerElemType -> 157
	ContainerType -> 158
	ListType -> 159
	MapType -> 160
	BaseType -> 161
	CustomType -> 162
	[ -> 163
	map -> 164
	int8 -> 165
	uint8 -> 166
	int16 -> 167
	uint16 -> 168
	int32 -> 169
	uint32 -> 170
	int64 -> 171
	uint64 -> 172
	string -> 173
	bytes -> 174
	bool -> 175
	i8 -> 176
	u8 -> 177
	i16 -> 178
	u16 -> 179
	i32 -> 180
	u32 -> 181
	i64 -> 182
	u64 -> 183
	MethodArgs -> 184
	void -> 185
	MethodArgFields -> 186


S117{
	Option : tok_option OptionValue• «}»
	Option : tok_option OptionValue• «tok_doc»
	Option : tok_option OptionValue• «tok_option»
	Option : tok_option OptionValue• «notify»
	Option : tok_option OptionValue• «oneway»
	Option : tok_option OptionValue• «twoway»
	Option : tok_option OptionValue• «tok_identifier»
}
Transitions:


S118{
	OptionValue : = •tok_literal OptEnd «}»
	OptionValue : = •tok_const_int OptEnd «}»
	OptionValue : = •tok_literal OptEnd «tok_doc»
	OptionValue : = •tok_const_int OptEnd «tok_doc»
	OptionValue : = •tok_literal OptEnd «tok_option»
	OptionValue : = •tok_const_int OptEnd «tok_option»
	OptionValue : = •tok_literal OptEnd «notify»
	OptionValue : = •tok_const_int OptEnd «notify»
	OptionValue : = •tok_literal OptEnd «oneway»
	OptionValue : = •tok_const_int OptEnd «oneway»
	OptionValue : = •tok_literal OptEnd «twoway»
	OptionValue : = •tok_const_int OptEnd «twoway»
	OptionValue : = •tok_literal OptEnd «tok_identifier»
	OptionValue : = •tok_const_int OptEnd «tok_identifier»
}
Transitions:
	tok_literal -> 187
	tok_const_int -> 188


S119{
	MethodFlag : oneway :• «}»
	MethodFlag : oneway :• «tok_doc»
	MethodFlag : oneway :• «tok_option»
	MethodFlag : oneway :• «notify»
	MethodFlag : oneway :• «oneway»
	MethodFlag : oneway :• «twoway»
	MethodFlag : oneway :• «tok_identifier»
}
Transitions:


S120{
	MethodFlag : notify :• «}»
	MethodFlag : notify :• «tok_doc»
	MethodFlag : notify :• «tok_option»
	MethodFlag : notify :• «notify»
	MethodFlag : notify :• «oneway»
	MethodFlag : notify :• «twoway»
	MethodFlag : notify :• «tok_identifier»
}
Transitions:


S121{
	MethodFlag : twoway :• «}»
	MethodFlag : twoway :• «tok_doc»
	MethodFlag : twoway :• «tok_option»
	MethodFlag : twoway :• «notify»
	MethodFlag : twoway :• «oneway»
	MethodFlag : twoway :• «twoway»
	MethodFlag : twoway :• «tok_identifier»
}
Transitions:


S122{
	ProjArea : tok_identifier :• «}»
	ProjArea : tok_identifier :• «tok_doc»
	ProjArea : tok_identifier :• «tok_identifier»
	ProjArea : tok_identifier :• «tok_option»
}
Transitions:


S123{
	EnumItemValue : = tok_const_int• «,»
	EnumItemValue : = tok_const_int• «;»
	EnumItemValue : = tok_const_int• «}»
	EnumItemValue : = tok_const_int• «tok_doc»
	EnumItemValue : = tok_const_int• «tok_identifier»
	EnumItemValue : = tok_const_int• «tok_option»
}
Transitions:


S124{
	EnumItem : tok_identifier EnumItemValue OptEnd• «}»
	EnumItem : tok_identifier EnumItemValue OptEnd• «tok_doc»
	EnumItem : tok_identifier EnumItemValue OptEnd• «tok_identifier»
	EnumItem : tok_identifier EnumItemValue OptEnd• «tok_option»
}
Transitions:


S125{
	OptEnd : ;• «}»
	OptEnd : ;• «tok_doc»
	OptEnd : ;• «tok_identifier»
	OptEnd : ;• «tok_option»
}
Transitions:


S126{
	OptEnd : ,• «}»
	OptEnd : ,• «tok_doc»
	OptEnd : ,• «tok_identifier»
	OptEnd : ,• «tok_option»
}
Transitions:


S127{
	OptionValue : = tok_literal •OptEnd «}»
	OptionValue : = tok_literal •OptEnd «tok_doc»
	OptionValue : = tok_literal •OptEnd «tok_identifier»
	OptionValue : = tok_literal •OptEnd «tok_option»
	OptEnd : empty• «}»
	OptEnd : •; «}»
	OptEnd : •, «}»
	OptEnd : empty• «tok_doc»
	OptEnd : •; «tok_doc»
	OptEnd : •, «tok_doc»
	OptEnd : empty• «tok_identifier»
	OptEnd : •; «tok_identifier»
	OptEnd : •, «tok_identifier»
	OptEnd : empty• «tok_option»
	OptEnd : •; «tok_option»
	OptEnd : •, «tok_option»
}
Transitions:
	; -> 125
	, -> 126
	OptEnd -> 189


S128{
	OptionValue : = tok_const_int •OptEnd «}»
	OptionValue : = tok_const_int •OptEnd «tok_doc»
	OptionValue : = tok_const_int •OptEnd «tok_identifier»
	OptionValue : = tok_const_int •OptEnd «tok_option»
	OptEnd : empty• «}»
	OptEnd : •; «}»
	OptEnd : •, «}»
	OptEnd : empty• «tok_doc»
	OptEnd : •; «tok_doc»
	OptEnd : •, «tok_doc»
	OptEnd : empty• «tok_identifier»
	OptEnd : •; «tok_identifier»
	OptEnd : •, «tok_identifier»
	OptEnd : empty• «tok_option»
	OptEnd : •; «tok_option»
	OptEnd : •, «tok_option»
}
Transitions:
	; -> 125
	, -> 126
	OptEnd -> 190


S129{
	OptionValue : = tok_literal •OptEnd «}»
	OptionValue : = tok_literal •OptEnd «[»
	OptionValue : = tok_literal •OptEnd «bool»
	OptionValue : = tok_literal •OptEnd «bytes»
	OptionValue : = tok_literal •OptEnd «i16»
	OptionValue : = tok_literal •OptEnd «i32»
	OptionValue : = tok_literal •OptEnd «i64»
	OptionValue : = tok_literal •OptEnd «i8»
	OptionValue : = tok_literal •OptEnd «int16»
	OptionValue : = tok_literal •OptEnd «int32»
	OptionValue : = tok_literal •OptEnd «int64»
	OptionValue : = tok_literal •OptEnd «int8»
	OptionValue : = tok_literal •OptEnd «map»
	OptionValue : = tok_literal •OptEnd «string»
	OptionValue : = tok_literal •OptEnd «tok_doc»
	OptionValue : = tok_literal •OptEnd «tok_identifier»
	OptionValue : = tok_literal •OptEnd «tok_option»
	OptionValue : = tok_literal •OptEnd «u16»
	OptionValue : = tok_literal •OptEnd «u32»
	OptionValue : = tok_literal •OptEnd «u64»
	OptionValue : = tok_literal •OptEnd «u8»
	OptionValue : = tok_literal •OptEnd «uint16»
	OptionValue : = tok_literal •OptEnd «uint32»
	OptionValue : = tok_literal •OptEnd «uint64»
	OptionValue : = tok_literal •OptEnd «uint8»
	OptEnd : empty• «}»
	OptEnd : •; «}»
	OptEnd : •, «}»
	OptEnd : empty• «[»
	OptEnd : •; «[»
	OptEnd : •, «[»
	OptEnd : empty• «bool»
	OptEnd : •; «bool»
	OptEnd : •, «bool»
	OptEnd : empty• «bytes»
	OptEnd : •; «bytes»
	OptEnd : •, «bytes»
	OptEnd : empty• «i16»
	OptEnd : •; «i16»
	OptEnd : •, «i16»
	OptEnd : empty• «i32»
	OptEnd : •; «i32»
	OptEnd : •, «i32»
	OptEnd : empty• «i64»
	OptEnd : •; «i64»
	OptEnd : •, «i64»
	OptEnd : empty• «i8»
	OptEnd : •; «i8»
	OptEnd : •, «i8»
	OptEnd : empty• «int16»
	OptEnd : •; «int16»
	OptEnd : •, «int16»
	OptEnd : empty• «int32»
	OptEnd : •; «int32»
	OptEnd : •, «int32»
	OptEnd : empty• «int64»
	OptEnd : •; «int64»
	OptEnd : •, «int64»
	OptEnd : empty• «int8»
	OptEnd : •; «int8»
	OptEnd : •, «int8»
	OptEnd : empty• «map»
	OptEnd : •; «map»
	OptEnd : •, «map»
	OptEnd : empty• «string»
	OptEnd : •; «string»
	OptEnd : •, «string»
	OptEnd : empty• «tok_doc»
	OptEnd : •; «tok_doc»
	OptEnd : •, «tok_doc»
	OptEnd : empty• «tok_identifier»
	OptEnd : •; «tok_identifier»
	OptEnd : •, «tok_identifier»
	OptEnd : empty• «tok_option»
	OptEnd : •; «tok_option»
	OptEnd : •, «tok_option»
	OptEnd : empty• «u16»
	OptEnd : •; «u16»
	OptEnd : •, «u16»
	OptEnd : empty• «u32»
	OptEnd : •; «u32»
	OptEnd : •, «u32»
	OptEnd : empty• «u64»
	OptEnd : •; «u64»
	OptEnd : •, «u64»
	OptEnd : empty• «u8»
	OptEnd : •; «u8»
	OptEnd : •, «u8»
	OptEnd : empty• «uint16»
	OptEnd : •; «uint16»
	OptEnd : •, «uint16»
	OptEnd : empty• «uint32»
	OptEnd : •; «uint32»
	OptEnd : •, «uint32»
	OptEnd : empty• «uint64»
	OptEnd : •; «uint64»
	OptEnd : •, «uint64»
	OptEnd : empty• «uint8»
	OptEnd : •; «uint8»
	OptEnd : •, «uint8»
}
Transitions:
	OptEnd -> 191
	; -> 192
	, -> 193


S130{
	OptionValue : = tok_const_int •OptEnd «}»
	OptionValue : = tok_const_int •OptEnd «[»
	OptionValue : = tok_const_int •OptEnd «bool»
	OptionValue : = tok_const_int •OptEnd «bytes»
	OptionValue : = tok_const_int •OptEnd «i16»
	OptionValue : = tok_const_int •OptEnd «i32»
	OptionValue : = tok_const_int •OptEnd «i64»
	OptionValue : = tok_const_int •OptEnd «i8»
	OptionValue : = tok_const_int •OptEnd «int16»
	OptionValue : = tok_const_int •OptEnd «int32»
	OptionValue : = tok_const_int •OptEnd «int64»
	OptionValue : = tok_const_int •OptEnd «int8»
	OptionValue : = tok_const_int •OptEnd «map»
	OptionValue : = tok_const_int •OptEnd «string»
	OptionValue : = tok_const_int •OptEnd «tok_doc»
	OptionValue : = tok_const_int •OptEnd «tok_identifier»
	OptionValue : = tok_const_int •OptEnd «tok_option»
	OptionValue : = tok_const_int •OptEnd «u16»
	OptionValue : = tok_const_int •OptEnd «u32»
	OptionValue : = tok_const_int •OptEnd «u64»
	OptionValue : = tok_const_int •OptEnd «u8»
	OptionValue : = tok_const_int •OptEnd «uint16»
	OptionValue : = tok_const_int •OptEnd «uint32»
	OptionValue : = tok_const_int •OptEnd «uint64»
	OptionValue : = tok_const_int •OptEnd «uint8»
	OptEnd : empty• «}»
	OptEnd : •; «}»
	OptEnd : •, «}»
	OptEnd : empty• «[»
	OptEnd : •; «[»
	OptEnd : •, «[»
	OptEnd : empty• «bool»
	OptEnd : •; «bool»
	OptEnd : •, «bool»
	OptEnd : empty• «bytes»
	OptEnd : •; «bytes»
	OptEnd : •, «bytes»
	OptEnd : empty• «i16»
	OptEnd : •; «i16»
	OptEnd : •, «i16»
	OptEnd : empty• «i32»
	OptEnd : •; «i32»
	OptEnd : •, «i32»
	OptEnd : empty• «i64»
	OptEnd : •; «i64»
	OptEnd : •, «i64»
	OptEnd : empty• «i8»
	OptEnd : •; «i8»
	OptEnd : •, «i8»
	OptEnd : empty• «int16»
	OptEnd : •; «int16»
	OptEnd : •, «int16»
	OptEnd : empty• «int32»
	OptEnd : •; «int32»
	OptEnd : •, «int32»
	OptEnd : empty• «int64»
	OptEnd : •; «int64»
	OptEnd : •, «int64»
	OptEnd : empty• «int8»
	OptEnd : •; «int8»
	OptEnd : •, «int8»
	OptEnd : empty• «map»
	OptEnd : •; «map»
	OptEnd : •, «map»
	OptEnd : empty• «string»
	OptEnd : •; «string»
	OptEnd : •, «string»
	OptEnd : empty• «tok_doc»
	OptEnd : •; «tok_doc»
	OptEnd : •, «tok_doc»
	OptEnd : empty• «tok_identifier»
	OptEnd : •; «tok_identifier»
	OptEnd : •, «tok_identifier»
	OptEnd : empty• «tok_option»
	OptEnd : •; «tok_option»
	OptEnd : •, «tok_option»
	OptEnd : empty• «u16»
	OptEnd : •; «u16»
	OptEnd : •, «u16»
	OptEnd : empty• «u32»
	OptEnd : •; «u32»
	OptEnd : •, «u32»
	OptEnd : empty• «u64»
	OptEnd : •; «u64»
	OptEnd : •, «u64»
	OptEnd : empty• «u8»
	OptEnd : •; «u8»
	OptEnd : •, «u8»
	OptEnd : empty• «uint16»
	OptEnd : •; «uint16»
	OptEnd : •, «uint16»
	OptEnd : empty• «uint32»
	OptEnd : •; «uint32»
	OptEnd : •, «uint32»
	OptEnd : empty• «uint64»
	OptEnd : •; «uint64»
	OptEnd : •, «uint64»
	OptEnd : empty• «uint8»
	OptEnd : •; «uint8»
	OptEnd : •, «uint8»
}
Transitions:
	; -> 192
	, -> 193
	OptEnd -> 194


S131{
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «}»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «[»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «bool»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «bytes»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «i16»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «i32»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «i64»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «i8»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «int16»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «int32»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «int64»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «int8»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «map»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «string»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «tok_doc»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «tok_identifier»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «tok_option»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «u16»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «u32»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «u64»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «u8»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «uint16»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «uint32»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «uint64»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «uint8»
}
Transitions:
	tok_const_int -> 195


S132{
	CustomType : tok_option• «tok_identifier»
}
Transitions:


S133{
	ListType : [ ] ContainerElemType• «tok_identifier»
}
Transitions:


S134{
	MapType : map [ BaseType •] ContainerElemType «tok_identifier»
}
Transitions:
	] -> 196


S135{
	BaseType : int8• «]»
}
Transitions:


S136{
	BaseType : uint8• «]»
}
Transitions:


S137{
	BaseType : int16• «]»
}
Transitions:


S138{
	BaseType : uint16• «]»
}
Transitions:


S139{
	BaseType : int32• «]»
}
Transitions:


S140{
	BaseType : uint32• «]»
}
Transitions:


S141{
	BaseType : int64• «]»
}
Transitions:


S142{
	BaseType : uint64• «]»
}
Transitions:


S143{
	BaseType : string• «]»
}
Transitions:


S144{
	BaseType : bytes• «]»
}
Transitions:


S145{
	BaseType : bool• «]»
}
Transitions:


S146{
	BaseType : i8• «]»
}
Transitions:


S147{
	BaseType : u8• «]»
}
Transitions:


S148{
	BaseType : i16• «]»
}
Transitions:


S149{
	BaseType : u16• «]»
}
Transitions:


S150{
	BaseType : i32• «]»
}
Transitions:


S151{
	BaseType : u32• «]»
}
Transitions:


S152{
	BaseType : i64• «]»
}
Transitions:


S153{
	BaseType : u64• «]»
}
Transitions:


S154{
	CustomType : tok_identifier• «)»
}
Transitions:


S155{
	CustomType : tok_option• «)»
}
Transitions:


S156{
	MethodArgs : FiledType• «)»
}
Transitions:


S157{
	FiledType : ContainerElemType• «)»
}
Transitions:


S158{
	FiledType : ContainerType• «)»
}
Transitions:


S159{
	ContainerType : ListType• «)»
}
Transitions:


S160{
	ContainerType : MapType• «)»
}
Transitions:


S161{
	ContainerElemType : BaseType• «)»
}
Transitions:


S162{
	ContainerElemType : CustomType• «)»
}
Transitions:


S163{
	ListType : [ •] ContainerElemType «)»
}
Transitions:
	] -> 197


S164{
	MapType : map •[ BaseType ] ContainerElemType «)»
}
Transitions:
	[ -> 198


S165{
	BaseType : int8• «)»
}
Transitions:


S166{
	BaseType : uint8• «)»
}
Transitions:


S167{
	BaseType : int16• «)»
}
Transitions:


S168{
	BaseType : uint16• «)»
}
Transitions:


S169{
	BaseType : int32• «)»
}
Transitions:


S170{
	BaseType : uint32• «)»
}
Transitions:


S171{
	BaseType : int64• «)»
}
Transitions:


S172{
	BaseType : uint64• «)»
}
Transitions:


S173{
	BaseType : string• «)»
}
Transitions:


S174{
	BaseType : bytes• «)»
}
Transitions:


S175{
	BaseType : bool• «)»
}
Transitions:


S176{
	BaseType : i8• «)»
}
Transitions:


S177{
	BaseType : u8• «)»
}
Transitions:


S178{
	BaseType : i16• «)»
}
Transitions:


S179{
	BaseType : u16• «)»
}
Transitions:


S180{
	BaseType : i32• «)»
}
Transitions:


S181{
	BaseType : u32• «)»
}
Transitions:


S182{
	BaseType : i64• «)»
}
Transitions:


S183{
	BaseType : u64• «)»
}
Transitions:


S184{
	Method : tok_identifier ( MethodArgs •) MethodRet MethodNo AddtionOption OptEnd «}»
	Method : tok_identifier ( MethodArgs •) MethodRet MethodNo AddtionOption OptEnd «tok_doc»
	Method : tok_identifier ( MethodArgs •) MethodRet MethodNo AddtionOption OptEnd «tok_option»
	Method : tok_identifier ( MethodArgs •) MethodRet MethodNo AddtionOption OptEnd «notify»
	Method : tok_identifier ( MethodArgs •) MethodRet MethodNo AddtionOption OptEnd «oneway»
	Method : tok_identifier ( MethodArgs •) MethodRet MethodNo AddtionOption OptEnd «twoway»
	Method : tok_identifier ( MethodArgs •) MethodRet MethodNo AddtionOption OptEnd «tok_identifier»
}
Transitions:
	) -> 199


S185{
	MethodArgs : void• «)»
}
Transitions:


S186{
	MethodArgs : MethodArgFields• «)»
	MethodArgFields : MethodArgFields •Doc Field «)»
	MethodArgFields : MethodArgFields •Doc Field «[»
	MethodArgFields : MethodArgFields •Doc Field «bool»
	MethodArgFields : MethodArgFields •Doc Field «bytes»
	MethodArgFields : MethodArgFields •Doc Field «i16»
	MethodArgFields : MethodArgFields •Doc Field «i32»
	MethodArgFields : MethodArgFields •Doc Field «i64»
	MethodArgFields : MethodArgFields •Doc Field «i8»
	MethodArgFields : MethodArgFields •Doc Field «int16»
	MethodArgFields : MethodArgFields •Doc Field «int32»
	MethodArgFields : MethodArgFields •Doc Field «int64»
	MethodArgFields : MethodArgFields •Doc Field «int8»
	MethodArgFields : MethodArgFields •Doc Field «map»
	MethodArgFields : MethodArgFields •Doc Field «string»
	MethodArgFields : MethodArgFields •Doc Field «tok_doc»
	MethodArgFields : MethodArgFields •Doc Field «tok_identifier»
	MethodArgFields : MethodArgFields •Doc Field «tok_option»
	MethodArgFields : MethodArgFields •Doc Field «u16»
	MethodArgFields : MethodArgFields •Doc Field «u32»
	MethodArgFields : MethodArgFields •Doc Field «u64»
	MethodArgFields : MethodArgFields •Doc Field «u8»
	MethodArgFields : MethodArgFields •Doc Field «uint16»
	MethodArgFields : MethodArgFields •Doc Field «uint32»
	MethodArgFields : MethodArgFields •Doc Field «uint64»
	MethodArgFields : MethodArgFields •Doc Field «uint8»
	Doc : empty• «[»
	Doc : empty• «bool»
	Doc : empty• «bytes»
	Doc : empty• «i16»
	Doc : empty• «i32»
	Doc : empty• «i64»
	Doc : empty• «i8»
	Doc : empty• «int16»
	Doc : empty• «int32»
	Doc : empty• «int64»
	Doc : empty• «int8»
	Doc : empty• «map»
	Doc : empty• «string»
	Doc : empty• «tok_identifier»
	Doc : empty• «tok_option»
	Doc : empty• «u16»
	Doc : empty• «u32»
	Doc : empty• «u64»
	Doc : empty• «u8»
	Doc : empty• «uint16»
	Doc : empty• «uint32»
	Doc : empty• «uint64»
	Doc : empty• «uint8»
	Doc : •Doc tok_doc «[»
	Doc : •Doc tok_doc «bool»
	Doc : •Doc tok_doc «bytes»
	Doc : •Doc tok_doc «i16»
	Doc : •Doc tok_doc «i32»
	Doc : •Doc tok_doc «i64»
	Doc : •Doc tok_doc «i8»
	Doc : •Doc tok_doc «int16»
	Doc : •Doc tok_doc «int32»
	Doc : •Doc tok_doc «int64»
	Doc : •Doc tok_doc «int8»
	Doc : •Doc tok_doc «map»
	Doc : •Doc tok_doc «string»
	Doc : •Doc tok_doc «tok_identifier»
	Doc : •Doc tok_doc «tok_option»
	Doc : •Doc tok_doc «u16»
	Doc : •Doc tok_doc «u32»
	Doc : •Doc tok_doc «u64»
	Doc : •Doc tok_doc «u8»
	Doc : •Doc tok_doc «uint16»
	Doc : •Doc tok_doc «uint32»
	Doc : •Doc tok_doc «uint64»
	Doc : •Doc tok_doc «uint8»
	Doc : empty• «tok_doc»
	Doc : •Doc tok_doc «tok_doc»
}
Transitions:
	Doc -> 200


S187{
	OptionValue : = tok_literal •OptEnd «}»
	OptionValue : = tok_literal •OptEnd «tok_doc»
	OptionValue : = tok_literal •OptEnd «tok_option»
	OptionValue : = tok_literal •OptEnd «notify»
	OptionValue : = tok_literal •OptEnd «oneway»
	OptionValue : = tok_literal •OptEnd «twoway»
	OptionValue : = tok_literal •OptEnd «tok_identifier»
	OptEnd : empty• «}»
	OptEnd : •; «}»
	OptEnd : •, «}»
	OptEnd : empty• «tok_doc»
	OptEnd : •; «tok_doc»
	OptEnd : •, «tok_doc»
	OptEnd : empty• «tok_option»
	OptEnd : •; «tok_option»
	OptEnd : •, «tok_option»
	OptEnd : empty• «notify»
	OptEnd : •; «notify»
	OptEnd : •, «notify»
	OptEnd : empty• «oneway»
	OptEnd : •; «oneway»
	OptEnd : •, «oneway»
	OptEnd : empty• «twoway»
	OptEnd : •; «twoway»
	OptEnd : •, «twoway»
	OptEnd : empty• «tok_identifier»
	OptEnd : •; «tok_identifier»
	OptEnd : •, «tok_identifier»
}
Transitions:
	OptEnd -> 201
	; -> 202
	, -> 203


S188{
	OptionValue : = tok_const_int •OptEnd «}»
	OptionValue : = tok_const_int •OptEnd «tok_doc»
	OptionValue : = tok_const_int •OptEnd «tok_option»
	OptionValue : = tok_const_int •OptEnd «notify»
	OptionValue : = tok_const_int •OptEnd «oneway»
	OptionValue : = tok_const_int •OptEnd «twoway»
	OptionValue : = tok_const_int •OptEnd «tok_identifier»
	OptEnd : empty• «}»
	OptEnd : •; «}»
	OptEnd : •, «}»
	OptEnd : empty• «tok_doc»
	OptEnd : •; «tok_doc»
	OptEnd : •, «tok_doc»
	OptEnd : empty• «tok_option»
	OptEnd : •; «tok_option»
	OptEnd : •, «tok_option»
	OptEnd : empty• «notify»
	OptEnd : •; «notify»
	OptEnd : •, «notify»
	OptEnd : empty• «oneway»
	OptEnd : •; «oneway»
	OptEnd : •, «oneway»
	OptEnd : empty• «twoway»
	OptEnd : •; «twoway»
	OptEnd : •, «twoway»
	OptEnd : empty• «tok_identifier»
	OptEnd : •; «tok_identifier»
	OptEnd : •, «tok_identifier»
}
Transitions:
	; -> 202
	, -> 203
	OptEnd -> 204


S189{
	OptionValue : = tok_literal OptEnd• «}»
	OptionValue : = tok_literal OptEnd• «tok_doc»
	OptionValue : = tok_literal OptEnd• «tok_identifier»
	OptionValue : = tok_literal OptEnd• «tok_option»
}
Transitions:


S190{
	OptionValue : = tok_const_int OptEnd• «}»
	OptionValue : = tok_const_int OptEnd• «tok_doc»
	OptionValue : = tok_const_int OptEnd• «tok_identifier»
	OptionValue : = tok_const_int OptEnd• «tok_option»
}
Transitions:


S191{
	OptionValue : = tok_literal OptEnd• «}»
	OptionValue : = tok_literal OptEnd• «[»
	OptionValue : = tok_literal OptEnd• «bool»
	OptionValue : = tok_literal OptEnd• «bytes»
	OptionValue : = tok_literal OptEnd• «i16»
	OptionValue : = tok_literal OptEnd• «i32»
	OptionValue : = tok_literal OptEnd• «i64»
	OptionValue : = tok_literal OptEnd• «i8»
	OptionValue : = tok_literal OptEnd• «int16»
	OptionValue : = tok_literal OptEnd• «int32»
	OptionValue : = tok_literal OptEnd• «int64»
	OptionValue : = tok_literal OptEnd• «int8»
	OptionValue : = tok_literal OptEnd• «map»
	OptionValue : = tok_literal OptEnd• «string»
	OptionValue : = tok_literal OptEnd• «tok_doc»
	OptionValue : = tok_literal OptEnd• «tok_identifier»
	OptionValue : = tok_literal OptEnd• «tok_option»
	OptionValue : = tok_literal OptEnd• «u16»
	OptionValue : = tok_literal OptEnd• «u32»
	OptionValue : = tok_literal OptEnd• «u64»
	OptionValue : = tok_literal OptEnd• «u8»
	OptionValue : = tok_literal OptEnd• «uint16»
	OptionValue : = tok_literal OptEnd• «uint32»
	OptionValue : = tok_literal OptEnd• «uint64»
	OptionValue : = tok_literal OptEnd• «uint8»
}
Transitions:


S192{
	OptEnd : ;• «}»
	OptEnd : ;• «[»
	OptEnd : ;• «bool»
	OptEnd : ;• «bytes»
	OptEnd : ;• «i16»
	OptEnd : ;• «i32»
	OptEnd : ;• «i64»
	OptEnd : ;• «i8»
	OptEnd : ;• «int16»
	OptEnd : ;• «int32»
	OptEnd : ;• «int64»
	OptEnd : ;• «int8»
	OptEnd : ;• «map»
	OptEnd : ;• «string»
	OptEnd : ;• «tok_doc»
	OptEnd : ;• «tok_identifier»
	OptEnd : ;• «tok_option»
	OptEnd : ;• «u16»
	OptEnd : ;• «u32»
	OptEnd : ;• «u64»
	OptEnd : ;• «u8»
	OptEnd : ;• «uint16»
	OptEnd : ;• «uint32»
	OptEnd : ;• «uint64»
	OptEnd : ;• «uint8»
}
Transitions:


S193{
	OptEnd : ,• «}»
	OptEnd : ,• «[»
	OptEnd : ,• «bool»
	OptEnd : ,• «bytes»
	OptEnd : ,• «i16»
	OptEnd : ,• «i32»
	OptEnd : ,• «i64»
	OptEnd : ,• «i8»
	OptEnd : ,• «int16»
	OptEnd : ,• «int32»
	OptEnd : ,• «int64»
	OptEnd : ,• «int8»
	OptEnd : ,• «map»
	OptEnd : ,• «string»
	OptEnd : ,• «tok_doc»
	OptEnd : ,• «tok_identifier»
	OptEnd : ,• «tok_option»
	OptEnd : ,• «u16»
	OptEnd : ,• «u32»
	OptEnd : ,• «u64»
	OptEnd : ,• «u8»
	OptEnd : ,• «uint16»
	OptEnd : ,• «uint32»
	OptEnd : ,• «uint64»
	OptEnd : ,• «uint8»
}
Transitions:


S194{
	OptionValue : = tok_const_int OptEnd• «}»
	OptionValue : = tok_const_int OptEnd• «[»
	OptionValue : = tok_const_int OptEnd• «bool»
	OptionValue : = tok_const_int OptEnd• «bytes»
	OptionValue : = tok_const_int OptEnd• «i16»
	OptionValue : = tok_const_int OptEnd• «i32»
	OptionValue : = tok_const_int OptEnd• «i64»
	OptionValue : = tok_const_int OptEnd• «i8»
	OptionValue : = tok_const_int OptEnd• «int16»
	OptionValue : = tok_const_int OptEnd• «int32»
	OptionValue : = tok_const_int OptEnd• «int64»
	OptionValue : = tok_const_int OptEnd• «int8»
	OptionValue : = tok_const_int OptEnd• «map»
	OptionValue : = tok_const_int OptEnd• «string»
	OptionValue : = tok_const_int OptEnd• «tok_doc»
	OptionValue : = tok_const_int OptEnd• «tok_identifier»
	OptionValue : = tok_const_int OptEnd• «tok_option»
	OptionValue : = tok_const_int OptEnd• «u16»
	OptionValue : = tok_const_int OptEnd• «u32»
	OptionValue : = tok_const_int OptEnd• «u64»
	OptionValue : = tok_const_int OptEnd• «u8»
	OptionValue : = tok_const_int OptEnd• «uint16»
	OptionValue : = tok_const_int OptEnd• «uint32»
	OptionValue : = tok_const_int OptEnd• «uint64»
	OptionValue : = tok_const_int OptEnd• «uint8»
}
Transitions:


S195{
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «}»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «[»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «bool»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «bytes»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «i16»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «i32»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «i64»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «i8»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «int16»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «int32»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «int64»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «int8»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «map»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «string»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «tok_doc»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «tok_identifier»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «tok_option»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «u16»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «u32»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «u64»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «u8»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «uint16»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «uint32»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «uint64»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «uint8»
	AddtionOption : empty• «,»
	AddtionOption : empty• «;»
	AddtionOption : empty• «}»
	AddtionOption : •{ FieldOption } «,»
	AddtionOption : •{ FieldOption } «;»
	AddtionOption : •{ FieldOption } «}»
	AddtionOption : empty• «[»
	AddtionOption : •{ FieldOption } «[»
	AddtionOption : empty• «bool»
	AddtionOption : •{ FieldOption } «bool»
	AddtionOption : empty• «bytes»
	AddtionOption : •{ FieldOption } «bytes»
	AddtionOption : empty• «i16»
	AddtionOption : •{ FieldOption } «i16»
	AddtionOption : empty• «i32»
	AddtionOption : •{ FieldOption } «i32»
	AddtionOption : empty• «i64»
	AddtionOption : •{ FieldOption } «i64»
	AddtionOption : empty• «i8»
	AddtionOption : •{ FieldOption } «i8»
	AddtionOption : empty• «int16»
	AddtionOption : •{ FieldOption } «int16»
	AddtionOption : empty• «int32»
	AddtionOption : •{ FieldOption } «int32»
	AddtionOption : empty• «int64»
	AddtionOption : •{ FieldOption } «int64»
	AddtionOption : empty• «int8»
	AddtionOption : •{ FieldOption } «int8»
	AddtionOption : empty• «map»
	AddtionOption : •{ FieldOption } «map»
	AddtionOption : empty• «string»
	AddtionOption : •{ FieldOption } «string»
	AddtionOption : empty• «tok_doc»
	AddtionOption : •{ FieldOption } «tok_doc»
	AddtionOption : empty• «tok_identifier»
	AddtionOption : •{ FieldOption } «tok_identifier»
	AddtionOption : empty• «tok_option»
	AddtionOption : •{ FieldOption } «tok_option»
	AddtionOption : empty• «u16»
	AddtionOption : •{ FieldOption } «u16»
	AddtionOption : empty• «u32»
	AddtionOption : •{ FieldOption } «u32»
	AddtionOption : empty• «u64»
	AddtionOption : •{ FieldOption } «u64»
	AddtionOption : empty• «u8»
	AddtionOption : •{ FieldOption } «u8»
	AddtionOption : empty• «uint16»
	AddtionOption : •{ FieldOption } «uint16»
	AddtionOption : empty• «uint32»
	AddtionOption : •{ FieldOption } «uint32»
	AddtionOption : empty• «uint64»
	AddtionOption : •{ FieldOption } «uint64»
	AddtionOption : empty• «uint8»
	AddtionOption : •{ FieldOption } «uint8»
}
Transitions:
	{ -> 205
	AddtionOption -> 206


S196{
	MapType : map [ BaseType ] •ContainerElemType «tok_identifier»
	ContainerElemType : •BaseType «tok_identifier»
	ContainerElemType : •CustomType «tok_identifier»
	BaseType : •int8 «tok_identifier»
	BaseType : •uint8 «tok_identifier»
	BaseType : •int16 «tok_identifier»
	BaseType : •uint16 «tok_identifier»
	BaseType : •int32 «tok_identifier»
	BaseType : •uint32 «tok_identifier»
	BaseType : •int64 «tok_identifier»
	BaseType : •uint64 «tok_identifier»
	BaseType : •string «tok_identifier»
	BaseType : •bytes «tok_identifier»
	BaseType : •bool «tok_identifier»
	BaseType : •i8 «tok_identifier»
	BaseType : •u8 «tok_identifier»
	BaseType : •i16 «tok_identifier»
	BaseType : •u16 «tok_identifier»
	BaseType : •i32 «tok_identifier»
	BaseType : •u32 «tok_identifier»
	BaseType : •i64 «tok_identifier»
	BaseType : •u64 «tok_identifier»
	CustomType : •tok_identifier «tok_identifier»
	CustomType : •tok_option «tok_identifier»
}
Transitions:
	tok_identifier -> 62
	BaseType -> 70
	CustomType -> 71
	int8 -> 74
	uint8 -> 75
	int16 -> 76
	uint16 -> 77
	int32 -> 78
	uint32 -> 79
	int64 -> 80
	uint64 -> 81
	string -> 82
	bytes -> 83
	bool -> 84
	i8 -> 85
	u8 -> 86
	i16 -> 87
	u16 -> 88
	i32 -> 89
	u32 -> 90
	i64 -> 91
	u64 -> 92
	tok_option -> 132
	ContainerElemType -> 207


S197{
	ListType : [ ] •ContainerElemType «)»
	ContainerElemType : •BaseType «)»
	ContainerElemType : •CustomType «)»
	BaseType : •int8 «)»
	BaseType : •uint8 «)»
	BaseType : •int16 «)»
	BaseType : •uint16 «)»
	BaseType : •int32 «)»
	BaseType : •uint32 «)»
	BaseType : •int64 «)»
	BaseType : •uint64 «)»
	BaseType : •string «)»
	BaseType : •bytes «)»
	BaseType : •bool «)»
	BaseType : •i8 «)»
	BaseType : •u8 «)»
	BaseType : •i16 «)»
	BaseType : •u16 «)»
	BaseType : •i32 «)»
	BaseType : •u32 «)»
	BaseType : •i64 «)»
	BaseType : •u64 «)»
	CustomType : •tok_identifier «)»
	CustomType : •tok_option «)»
}
Transitions:
	tok_identifier -> 154
	tok_option -> 155
	BaseType -> 161
	CustomType -> 162
	int8 -> 165
	uint8 -> 166
	int16 -> 167
	uint16 -> 168
	int32 -> 169
	uint32 -> 170
	int64 -> 171
	uint64 -> 172
	string -> 173
	bytes -> 174
	bool -> 175
	i8 -> 176
	u8 -> 177
	i16 -> 178
	u16 -> 179
	i32 -> 180
	u32 -> 181
	i64 -> 182
	u64 -> 183
	ContainerElemType -> 208


S198{
	MapType : map [ •BaseType ] ContainerElemType «)»
	BaseType : •int8 «]»
	BaseType : •uint8 «]»
	BaseType : •int16 «]»
	BaseType : •uint16 «]»
	BaseType : •int32 «]»
	BaseType : •uint32 «]»
	BaseType : •int64 «]»
	BaseType : •uint64 «]»
	BaseType : •string «]»
	BaseType : •bytes «]»
	BaseType : •bool «]»
	BaseType : •i8 «]»
	BaseType : •u8 «]»
	BaseType : •i16 «]»
	BaseType : •u16 «]»
	BaseType : •i32 «]»
	BaseType : •u32 «]»
	BaseType : •i64 «]»
	BaseType : •u64 «]»
}
Transitions:
	int8 -> 135
	uint8 -> 136
	int16 -> 137
	uint16 -> 138
	int32 -> 139
	uint32 -> 140
	int64 -> 141
	uint64 -> 142
	string -> 143
	bytes -> 144
	bool -> 145
	i8 -> 146
	u8 -> 147
	i16 -> 148
	u16 -> 149
	i32 -> 150
	u32 -> 151
	i64 -> 152
	u64 -> 153
	BaseType -> 209


S199{
	Method : tok_identifier ( MethodArgs ) •MethodRet MethodNo AddtionOption OptEnd «}»
	Method : tok_identifier ( MethodArgs ) •MethodRet MethodNo AddtionOption OptEnd «tok_doc»
	Method : tok_identifier ( MethodArgs ) •MethodRet MethodNo AddtionOption OptEnd «tok_option»
	Method : tok_identifier ( MethodArgs ) •MethodRet MethodNo AddtionOption OptEnd «notify»
	Method : tok_identifier ( MethodArgs ) •MethodRet MethodNo AddtionOption OptEnd «oneway»
	Method : tok_identifier ( MethodArgs ) •MethodRet MethodNo AddtionOption OptEnd «twoway»
	Method : tok_identifier ( MethodArgs ) •MethodRet MethodNo AddtionOption OptEnd «tok_identifier»
	MethodRet : •void «,»
	MethodRet : •void «;»
	MethodRet : •void «=»
	MethodRet : •void «{»
	MethodRet : •void «}»
	MethodRet : •FiledType «,»
	MethodRet : •FiledType «;»
	MethodRet : •FiledType «=»
	MethodRet : •FiledType «{»
	MethodRet : •FiledType «}»
	MethodRet : •MethodRetArgs «,»
	MethodRet : •MethodRetArgs «;»
	MethodRet : •MethodRetArgs «=»
	MethodRet : •MethodRetArgs «{»
	MethodRet : •MethodRetArgs «}»
	MethodRet : •void «tok_doc»
	MethodRet : •FiledType «tok_doc»
	MethodRet : •MethodRetArgs «tok_doc»
	MethodRet : •void «tok_option»
	MethodRet : •FiledType «tok_option»
	MethodRet : •MethodRetArgs «tok_option»
	MethodRet : •void «notify»
	MethodRet : •FiledType «notify»
	MethodRet : •MethodRetArgs «notify»
	MethodRet : •void «oneway»
	MethodRet : •FiledType «oneway»
	MethodRet : •MethodRetArgs «oneway»
	MethodRet : •void «twoway»
	MethodRet : •FiledType «twoway»
	MethodRet : •MethodRetArgs «twoway»
	MethodRet : •void «tok_identifier»
	MethodRet : •FiledType «tok_identifier»
	MethodRet : •MethodRetArgs «tok_identifier»
	FiledType : •ContainerElemType «,»
	FiledType : •ContainerType «,»
	FiledType : •ContainerElemType «;»
	FiledType : •ContainerType «;»
	FiledType : •ContainerElemType «=»
	FiledType : •ContainerType «=»
	FiledType : •ContainerElemType «{»
	FiledType : •ContainerType «{»
	FiledType : •ContainerElemType «}»
	FiledType : •ContainerType «}»
	MethodRetArgs : •( MethodArgFields ) «,»
	MethodRetArgs : •( MethodArgFields ) «;»
	MethodRetArgs : •( MethodArgFields ) «=»
	MethodRetArgs : •( MethodArgFields ) «{»
	MethodRetArgs : •( MethodArgFields ) «}»
	FiledType : •ContainerElemType «tok_doc»
	FiledType : •ContainerType «tok_doc»
	MethodRetArgs : •( MethodArgFields ) «tok_doc»
	FiledType : •ContainerElemType «tok_option»
	FiledType : •ContainerType «tok_option»
	MethodRetArgs : •( MethodArgFields ) «tok_option»
	FiledType : •ContainerElemType «notify»
	FiledType : •ContainerType «notify»
	MethodRetArgs : •( MethodArgFields ) «notify»
	FiledType : •ContainerElemType «oneway»
	FiledType : •ContainerType «oneway»
	MethodRetArgs : •( MethodArgFields ) «oneway»
	FiledType : •ContainerElemType «twoway»
	FiledType : •ContainerType «twoway»
	MethodRetArgs : •( MethodArgFields ) «twoway»
	FiledType : •ContainerElemType «tok_identifier»
	FiledType : •ContainerType «tok_identifier»
	MethodRetArgs : •( MethodArgFields ) «tok_identifier»
	ContainerElemType : •BaseType «,»
	ContainerElemType : •CustomType «,»
	ContainerType : •ListType «,»
	ContainerType : •MapType «,»
	ContainerElemType : •BaseType «;»
	ContainerElemType : •CustomType «;»
	ContainerType : •ListType «;»
	ContainerType : •MapType «;»
	ContainerElemType : •BaseType «=»
	ContainerElemType : •CustomType «=»
	ContainerType : •ListType «=»
	ContainerType : •MapType «=»
	ContainerElemType : •BaseType «{»
	ContainerElemType : •CustomType «{»
	ContainerType : •ListType «{»
	ContainerType : •MapType «{»
	ContainerElemType : •BaseType «}»
	ContainerElemType : •CustomType «}»
	ContainerType : •ListType «}»
	ContainerType : •MapType «}»
	ContainerElemType : •BaseType «tok_doc»
	ContainerElemType : •CustomType «tok_doc»
	ContainerType : •ListType «tok_doc»
	ContainerType : •MapType «tok_doc»
	ContainerElemType : •BaseType «tok_option»
	ContainerElemType : •CustomType «tok_option»
	ContainerType : •ListType «tok_option»
	ContainerType : •MapType «tok_option»
	ContainerElemType : •BaseType «notify»
	ContainerElemType : •CustomType «notify»
	ContainerType : •ListType «notify»
	ContainerType : •MapType «notify»
	ContainerElemType : •BaseType «oneway»
	ContainerElemType : •CustomType «oneway»
	ContainerType : •ListType «oneway»
	ContainerType : •MapType «oneway»
	ContainerElemType : •BaseType «twoway»
	ContainerElemType : •CustomType «twoway»
	ContainerType : •ListType «twoway»
	ContainerType : •MapType «twoway»
	ContainerElemType : •BaseType «tok_identifier»
	ContainerElemType : •CustomType «tok_identifier»
	ContainerType : •ListType «tok_identifier»
	ContainerType : •MapType «tok_identifier»
	BaseType : •int8 «,»
	BaseType : •uint8 «,»
	BaseType : •int16 «,»
	BaseType : •uint16 «,»
	BaseType : •int32 «,»
	BaseType : •uint32 «,»
	BaseType : •int64 «,»
	BaseType : •uint64 «,»
	BaseType : •string «,»
	BaseType : •bytes «,»
	BaseType : •bool «,»
	BaseType : •i8 «,»
	BaseType : •u8 «,»
	BaseType : •i16 «,»
	BaseType : •u16 «,»
	BaseType : •i32 «,»
	BaseType : •u32 «,»
	BaseType : •i64 «,»
	BaseType : •u64 «,»
	CustomType : •tok_identifier «,»
	CustomType : •tok_option «,»
	ListType : •[ ] ContainerElemType «,»
	MapType : •map [ BaseType ] ContainerElemType «,»
	BaseType : •int8 «;»
	BaseType : •uint8 «;»
	BaseType : •int16 «;»
	BaseType : •uint16 «;»
	BaseType : •int32 «;»
	BaseType : •uint32 «;»
	BaseType : •int64 «;»
	BaseType : •uint64 «;»
	BaseType : •string «;»
	BaseType : •bytes «;»
	BaseType : •bool «;»
	BaseType : •i8 «;»
	BaseType : •u8 «;»
	BaseType : •i16 «;»
	BaseType : •u16 «;»
	BaseType : •i32 «;»
	BaseType : •u32 «;»
	BaseType : •i64 «;»
	BaseType : •u64 «;»
	CustomType : •tok_identifier «;»
	CustomType : •tok_option «;»
	ListType : •[ ] ContainerElemType «;»
	MapType : •map [ BaseType ] ContainerElemType «;»
	BaseType : •int8 «=»
	BaseType : •uint8 «=»
	BaseType : •int16 «=»
	BaseType : •uint16 «=»
	BaseType : •int32 «=»
	BaseType : •uint32 «=»
	BaseType : •int64 «=»
	BaseType : •uint64 «=»
	BaseType : •string «=»
	BaseType : •bytes «=»
	BaseType : •bool «=»
	BaseType : •i8 «=»
	BaseType : •u8 «=»
	BaseType : •i16 «=»
	BaseType : •u16 «=»
	BaseType : •i32 «=»
	BaseType : •u32 «=»
	BaseType : •i64 «=»
	BaseType : •u64 «=»
	CustomType : •tok_identifier «=»
	CustomType : •tok_option «=»
	ListType : •[ ] ContainerElemType «=»
	MapType : •map [ BaseType ] ContainerElemType «=»
	BaseType : •int8 «{»
	BaseType : •uint8 «{»
	BaseType : •int16 «{»
	BaseType : •uint16 «{»
	BaseType : •int32 «{»
	BaseType : •uint32 «{»
	BaseType : •int64 «{»
	BaseType : •uint64 «{»
	BaseType : •string «{»
	BaseType : •bytes «{»
	BaseType : •bool «{»
	BaseType : •i8 «{»
	BaseType : •u8 «{»
	BaseType : •i16 «{»
	BaseType : •u16 «{»
	BaseType : •i32 «{»
	BaseType : •u32 «{»
	BaseType : •i64 «{»
	BaseType : •u64 «{»
	CustomType : •tok_identifier «{»
	CustomType : •tok_option «{»
	ListType : •[ ] ContainerElemType «{»
	MapType : •map [ BaseType ] ContainerElemType «{»
	BaseType : •int8 «}»
	BaseType : •uint8 «}»
	BaseType : •int16 «}»
	BaseType : •uint16 «}»
	BaseType : •int32 «}»
	BaseType : •uint32 «}»
	BaseType : •int64 «}»
	BaseType : •uint64 «}»
	BaseType : •string «}»
	BaseType : •bytes «}»
	BaseType : •bool «}»
	BaseType : •i8 «}»
	BaseType : •u8 «}»
	BaseType : •i16 «}»
	BaseType : •u16 «}»
	BaseType : •i32 «}»
	BaseType : •u32 «}»
	BaseType : •i64 «}»
	BaseType : •u64 «}»
	CustomType : •tok_identifier «}»
	CustomType : •tok_option «}»
	ListType : •[ ] ContainerElemType «}»
	MapType : •map [ BaseType ] ContainerElemType «}»
	BaseType : •int8 «tok_doc»
	BaseType : •uint8 «tok_doc»
	BaseType : •int16 «tok_doc»
	BaseType : •uint16 «tok_doc»
	BaseType : •int32 «tok_doc»
	BaseType : •uint32 «tok_doc»
	BaseType : •int64 «tok_doc»
	BaseType : •uint64 «tok_doc»
	BaseType : •string «tok_doc»
	BaseType : •bytes «tok_doc»
	BaseType : •bool «tok_doc»
	BaseType : •i8 «tok_doc»
	BaseType : •u8 «tok_doc»
	BaseType : •i16 «tok_doc»
	BaseType : •u16 «tok_doc»
	BaseType : •i32 «tok_doc»
	BaseType : •u32 «tok_doc»
	BaseType : •i64 «tok_doc»
	BaseType : •u64 «tok_doc»
	CustomType : •tok_identifier «tok_doc»
	CustomType : •tok_option «tok_doc»
	ListType : •[ ] ContainerElemType «tok_doc»
	MapType : •map [ BaseType ] ContainerElemType «tok_doc»
	BaseType : •int8 «tok_option»
	BaseType : •uint8 «tok_option»
	BaseType : •int16 «tok_option»
	BaseType : •uint16 «tok_option»
	BaseType : •int32 «tok_option»
	BaseType : •uint32 «tok_option»
	BaseType : •int64 «tok_option»
	BaseType : •uint64 «tok_option»
	BaseType : •string «tok_option»
	BaseType : •bytes «tok_option»
	BaseType : •bool «tok_option»
	BaseType : •i8 «tok_option»
	BaseType : •u8 «tok_option»
	BaseType : •i16 «tok_option»
	BaseType : •u16 «tok_option»
	BaseType : •i32 «tok_option»
	BaseType : •u32 «tok_option»
	BaseType : •i64 «tok_option»
	BaseType : •u64 «tok_option»
	CustomType : •tok_identifier «tok_option»
	CustomType : •tok_option «tok_option»
	ListType : •[ ] ContainerElemType «tok_option»
	MapType : •map [ BaseType ] ContainerElemType «tok_option»
	BaseType : •int8 «notify»
	BaseType : •uint8 «notify»
	BaseType : •int16 «notify»
	BaseType : •uint16 «notify»
	BaseType : •int32 «notify»
	BaseType : •uint32 «notify»
	BaseType : •int64 «notify»
	BaseType : •uint64 «notify»
	BaseType : •string «notify»
	BaseType : •bytes «notify»
	BaseType : •bool «notify»
	BaseType : •i8 «notify»
	BaseType : •u8 «notify»
	BaseType : •i16 «notify»
	BaseType : •u16 «notify»
	BaseType : •i32 «notify»
	BaseType : •u32 «notify»
	BaseType : •i64 «notify»
	BaseType : •u64 «notify»
	CustomType : •tok_identifier «notify»
	CustomType : •tok_option «notify»
	ListType : •[ ] ContainerElemType «notify»
	MapType : •map [ BaseType ] ContainerElemType «notify»
	BaseType : •int8 «oneway»
	BaseType : •uint8 «oneway»
	BaseType : •int16 «oneway»
	BaseType : •uint16 «oneway»
	BaseType : •int32 «oneway»
	BaseType : •uint32 «oneway»
	BaseType : •int64 «oneway»
	BaseType : •uint64 «oneway»
	BaseType : •string «oneway»
	BaseType : •bytes «oneway»
	BaseType : •bool «oneway»
	BaseType : •i8 «oneway»
	BaseType : •u8 «oneway»
	BaseType : •i16 «oneway»
	BaseType : •u16 «oneway»
	BaseType : •i32 «oneway»
	BaseType : •u32 «oneway»
	BaseType : •i64 «oneway»
	BaseType : •u64 «oneway»
	CustomType : •tok_identifier «oneway»
	CustomType : •tok_option «oneway»
	ListType : •[ ] ContainerElemType «oneway»
	MapType : •map [ BaseType ] ContainerElemType «oneway»
	BaseType : •int8 «twoway»
	BaseType : •uint8 «twoway»
	BaseType : •int16 «twoway»
	BaseType : •uint16 «twoway»
	BaseType : •int32 «twoway»
	BaseType : •uint32 «twoway»
	BaseType : •int64 «twoway»
	BaseType : •uint64 «twoway»
	BaseType : •string «twoway»
	BaseType : •bytes «twoway»
	BaseType : •bool «twoway»
	BaseType : •i8 «twoway»
	BaseType : •u8 «twoway»
	BaseType : •i16 «twoway»
	BaseType : •u16 «twoway»
	BaseType : •i32 «twoway»
	BaseType : •u32 «twoway»
	BaseType : •i64 «twoway»
	BaseType : •u64 «twoway»
	CustomType : •tok_identifier «twoway»
	CustomType : •tok_option «twoway»
	ListType : •[ ] ContainerElemType «twoway»
	MapType : •map [ BaseType ] ContainerElemType «twoway»
	BaseType : •int8 «tok_identifier»
	BaseType : •uint8 «tok_identifier»
	BaseType : •int16 «tok_identifier»
	BaseType : •uint16 «tok_identifier»
	BaseType : •int32 «tok_identifier»
	BaseType : •uint32 «tok_identifier»
	BaseType : •int64 «tok_identifier»
	BaseType : •uint64 «tok_identifier»
	BaseType : •string «tok_identifier»
	BaseType : •bytes «tok_identifier»
	BaseType : •bool «tok_identifier»
	BaseType : •i8 «tok_identifier»
	BaseType : •u8 «tok_identifier»
	BaseType : •i16 «tok_identifier»
	BaseType : •u16 «tok_identifier»
	BaseType : •i32 «tok_identifier»
	BaseType : •u32 «tok_identifier»
	BaseType : •i64 «tok_identifier»
	BaseType : •u64 «tok_identifier»
	CustomType : •tok_identifier «tok_identifier»
	CustomType : •tok_option «tok_identifier»
	ListType : •[ ] ContainerElemType «tok_identifier»
	MapType : •map [ BaseType ] ContainerElemType «tok_identifier»
}
Transitions:
	tok_identifier -> 210
	tok_option -> 211
	FiledType -> 212
	ContainerElemType -> 213
	ContainerType -> 214
	ListType -> 215
	MapType -> 216
	BaseType -> 217
	CustomType -> 218
	[ -> 219
	map -> 220
	int8 -> 221
	uint8 -> 222
	int16 -> 223
	uint16 -> 224
	int32 -> 225
	uint32 -> 226
	int64 -> 227
	uint64 -> 228
	string -> 229
	bytes -> 230
	bool -> 231
	i8 -> 232
	u8 -> 233
	i16 -> 234
	u16 -> 235
	i32 -> 236
	u32 -> 237
	i64 -> 238
	u64 -> 239
	( -> 240
	MethodRet -> 241
	void -> 242
	MethodRetArgs -> 243


S200{
	MethodArgFields : MethodArgFields Doc •Field «)»
	MethodArgFields : MethodArgFields Doc •Field «[»
	MethodArgFields : MethodArgFields Doc •Field «bool»
	MethodArgFields : MethodArgFields Doc •Field «bytes»
	MethodArgFields : MethodArgFields Doc •Field «i16»
	MethodArgFields : MethodArgFields Doc •Field «i32»
	MethodArgFields : MethodArgFields Doc •Field «i64»
	MethodArgFields : MethodArgFields Doc •Field «i8»
	MethodArgFields : MethodArgFields Doc •Field «int16»
	MethodArgFields : MethodArgFields Doc •Field «int32»
	MethodArgFields : MethodArgFields Doc •Field «int64»
	MethodArgFields : MethodArgFields Doc •Field «int8»
	MethodArgFields : MethodArgFields Doc •Field «map»
	MethodArgFields : MethodArgFields Doc •Field «string»
	MethodArgFields : MethodArgFields Doc •Field «tok_doc»
	MethodArgFields : MethodArgFields Doc •Field «tok_identifier»
	MethodArgFields : MethodArgFields Doc •Field «tok_option»
	MethodArgFields : MethodArgFields Doc •Field «u16»
	MethodArgFields : MethodArgFields Doc •Field «u32»
	MethodArgFields : MethodArgFields Doc •Field «u64»
	MethodArgFields : MethodArgFields Doc •Field «u8»
	MethodArgFields : MethodArgFields Doc •Field «uint16»
	MethodArgFields : MethodArgFields Doc •Field «uint32»
	MethodArgFields : MethodArgFields Doc •Field «uint64»
	MethodArgFields : MethodArgFields Doc •Field «uint8»
	Doc : Doc •tok_doc «[»
	Doc : Doc •tok_doc «bool»
	Doc : Doc •tok_doc «bytes»
	Doc : Doc •tok_doc «i16»
	Doc : Doc •tok_doc «i32»
	Doc : Doc •tok_doc «i64»
	Doc : Doc •tok_doc «i8»
	Doc : Doc •tok_doc «int16»
	Doc : Doc •tok_doc «int32»
	Doc : Doc •tok_doc «int64»
	Doc : Doc •tok_doc «int8»
	Doc : Doc •tok_doc «map»
	Doc : Doc •tok_doc «string»
	Doc : Doc •tok_doc «tok_identifier»
	Doc : Doc •tok_doc «tok_option»
	Doc : Doc •tok_doc «u16»
	Doc : Doc •tok_doc «u32»
	Doc : Doc •tok_doc «u64»
	Doc : Doc •tok_doc «u8»
	Doc : Doc •tok_doc «uint16»
	Doc : Doc •tok_doc «uint32»
	Doc : Doc •tok_doc «uint64»
	Doc : Doc •tok_doc «uint8»
	Doc : Doc •tok_doc «tok_doc»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «)»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «[»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «bool»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «bytes»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «i16»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «i32»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «i64»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «i8»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «int16»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «int32»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «int64»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «int8»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «map»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «string»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «tok_doc»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «tok_identifier»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «tok_option»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «u16»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «u32»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «u64»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «u8»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «uint16»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «uint32»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «uint64»
	Field : •FiledType tok_identifier = tok_const_int AddtionOption OptEnd «uint8»
	FiledType : •ContainerElemType «tok_identifier»
	FiledType : •ContainerType «tok_identifier»
	ContainerElemType : •BaseType «tok_identifier»
	ContainerElemType : •CustomType «tok_identifier»
	ContainerType : •ListType «tok_identifier»
	ContainerType : •MapType «tok_identifier»
	BaseType : •int8 «tok_identifier»
	BaseType : •uint8 «tok_identifier»
	BaseType : •int16 «tok_identifier»
	BaseType : •uint16 «tok_identifier»
	BaseType : •int32 «tok_identifier»
	BaseType : •uint32 «tok_identifier»
	BaseType : •int64 «tok_identifier»
	BaseType : •uint64 «tok_identifier»
	BaseType : •string «tok_identifier»
	BaseType : •bytes «tok_identifier»
	BaseType : •bool «tok_identifier»
	BaseType : •i8 «tok_identifier»
	BaseType : •u8 «tok_identifier»
	BaseType : •i16 «tok_identifier»
	BaseType : •u16 «tok_identifier»
	BaseType : •i32 «tok_identifier»
	BaseType : •u32 «tok_identifier»
	BaseType : •i64 «tok_identifier»
	BaseType : •u64 «tok_identifier»
	CustomType : •tok_identifier «tok_identifier»
	CustomType : •tok_option «tok_identifier»
	ListType : •[ ] ContainerElemType «tok_identifier»
	MapType : •map [ BaseType ] ContainerElemType «tok_identifier»
}
Transitions:
	tok_doc -> 61
	tok_identifier -> 62
	ContainerElemType -> 66
	ContainerType -> 67
	ListType -> 68
	MapType -> 69
	BaseType -> 70
	CustomType -> 71
	[ -> 72
	map -> 73
	int8 -> 74
	uint8 -> 75
	int16 -> 76
	uint16 -> 77
	int32 -> 78
	uint32 -> 79
	int64 -> 80
	uint64 -> 81
	string -> 82
	bytes -> 83
	bool -> 84
	i8 -> 85
	u8 -> 86
	i16 -> 87
	u16 -> 88
	i32 -> 89
	u32 -> 90
	i64 -> 91
	u64 -> 92
	tok_option -> 132
	Field -> 244
	FiledType -> 245


S201{
	OptionValue : = tok_literal OptEnd• «}»
	OptionValue : = tok_literal OptEnd• «tok_doc»
	OptionValue : = tok_literal OptEnd• «tok_option»
	OptionValue : = tok_literal OptEnd• «notify»
	OptionValue : = tok_literal OptEnd• «oneway»
	OptionValue : = tok_literal OptEnd• «twoway»
	OptionValue : = tok_literal OptEnd• «tok_identifier»
}
Transitions:


S202{
	OptEnd : ;• «}»
	OptEnd : ;• «tok_doc»
	OptEnd : ;• «tok_option»
	OptEnd : ;• «notify»
	OptEnd : ;• «oneway»
	OptEnd : ;• «twoway»
	OptEnd : ;• «tok_identifier»
}
Transitions:


S203{
	OptEnd : ,• «}»
	OptEnd : ,• «tok_doc»
	OptEnd : ,• «tok_option»
	OptEnd : ,• «notify»
	OptEnd : ,• «oneway»
	OptEnd : ,• «twoway»
	OptEnd : ,• «tok_identifier»
}
Transitions:


S204{
	OptionValue : = tok_const_int OptEnd• «}»
	OptionValue : = tok_const_int OptEnd• «tok_doc»
	OptionValue : = tok_const_int OptEnd• «tok_option»
	OptionValue : = tok_const_int OptEnd• «notify»
	OptionValue : = tok_const_int OptEnd• «oneway»
	OptionValue : = tok_const_int OptEnd• «twoway»
	OptionValue : = tok_const_int OptEnd• «tok_identifier»
}
Transitions:


S205{
	AddtionOption : { •FieldOption } «,»
	AddtionOption : { •FieldOption } «;»
	AddtionOption : { •FieldOption } «}»
	AddtionOption : { •FieldOption } «[»
	AddtionOption : { •FieldOption } «bool»
	AddtionOption : { •FieldOption } «bytes»
	AddtionOption : { •FieldOption } «i16»
	AddtionOption : { •FieldOption } «i32»
	AddtionOption : { •FieldOption } «i64»
	AddtionOption : { •FieldOption } «i8»
	AddtionOption : { •FieldOption } «int16»
	AddtionOption : { •FieldOption } «int32»
	AddtionOption : { •FieldOption } «int64»
	AddtionOption : { •FieldOption } «int8»
	AddtionOption : { •FieldOption } «map»
	AddtionOption : { •FieldOption } «string»
	AddtionOption : { •FieldOption } «tok_doc»
	AddtionOption : { •FieldOption } «tok_identifier»
	AddtionOption : { •FieldOption } «tok_option»
	AddtionOption : { •FieldOption } «u16»
	AddtionOption : { •FieldOption } «u32»
	AddtionOption : { •FieldOption } «u64»
	AddtionOption : { •FieldOption } «u8»
	AddtionOption : { •FieldOption } «uint16»
	AddtionOption : { •FieldOption } «uint32»
	AddtionOption : { •FieldOption } «uint64»
	AddtionOption : { •FieldOption } «uint8»
	FieldOption : empty• «}»
	FieldOption : •FieldOption Doc Option «}»
	FieldOption : empty• «tok_doc»
	FieldOption : empty• «tok_option»
	FieldOption : •FieldOption Doc Option «tok_doc»
	FieldOption : •FieldOption Doc Option «tok_option»
}
Transitions:
	FieldOption -> 246


S206{
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «}»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «[»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «bool»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «bytes»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «i16»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «i32»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «i64»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «i8»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «int16»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «int32»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «int64»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «int8»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «map»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «string»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «tok_doc»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «tok_identifier»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «tok_option»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «u16»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «u32»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «u64»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «u8»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «uint16»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «uint32»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «uint64»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «uint8»
	OptEnd : empty• «}»
	OptEnd : •; «}»
	OptEnd : •, «}»
	OptEnd : empty• «[»
	OptEnd : •; «[»
	OptEnd : •, «[»
	OptEnd : empty• «bool»
	OptEnd : •; «bool»
	OptEnd : •, «bool»
	OptEnd : empty• «bytes»
	OptEnd : •; «bytes»
	OptEnd : •, «bytes»
	OptEnd : empty• «i16»
	OptEnd : •; «i16»
	OptEnd : •, «i16»
	OptEnd : empty• «i32»
	OptEnd : •; «i32»
	OptEnd : •, «i32»
	OptEnd : empty• «i64»
	OptEnd : •; «i64»
	OptEnd : •, «i64»
	OptEnd : empty• «i8»
	OptEnd : •; «i8»
	OptEnd : •, «i8»
	OptEnd : empty• «int16»
	OptEnd : •; «int16»
	OptEnd : •, «int16»
	OptEnd : empty• «int32»
	OptEnd : •; «int32»
	OptEnd : •, «int32»
	OptEnd : empty• «int64»
	OptEnd : •; «int64»
	OptEnd : •, «int64»
	OptEnd : empty• «int8»
	OptEnd : •; «int8»
	OptEnd : •, «int8»
	OptEnd : empty• «map»
	OptEnd : •; «map»
	OptEnd : •, «map»
	OptEnd : empty• «string»
	OptEnd : •; «string»
	OptEnd : •, «string»
	OptEnd : empty• «tok_doc»
	OptEnd : •; «tok_doc»
	OptEnd : •, «tok_doc»
	OptEnd : empty• «tok_identifier»
	OptEnd : •; «tok_identifier»
	OptEnd : •, «tok_identifier»
	OptEnd : empty• «tok_option»
	OptEnd : •; «tok_option»
	OptEnd : •, «tok_option»
	OptEnd : empty• «u16»
	OptEnd : •; «u16»
	OptEnd : •, «u16»
	OptEnd : empty• «u32»
	OptEnd : •; «u32»
	OptEnd : •, «u32»
	OptEnd : empty• «u64»
	OptEnd : •; «u64»
	OptEnd : •, «u64»
	OptEnd : empty• «u8»
	OptEnd : •; «u8»
	OptEnd : •, «u8»
	OptEnd : empty• «uint16»
	OptEnd : •; «uint16»
	OptEnd : •, «uint16»
	OptEnd : empty• «uint32»
	OptEnd : •; «uint32»
	OptEnd : •, «uint32»
	OptEnd : empty• «uint64»
	OptEnd : •; «uint64»
	OptEnd : •, «uint64»
	OptEnd : empty• «uint8»
	OptEnd : •; «uint8»
	OptEnd : •, «uint8»
}
Transitions:
	; -> 192
	, -> 193
	OptEnd -> 247


S207{
	MapType : map [ BaseType ] ContainerElemType• «tok_identifier»
}
Transitions:


S208{
	ListType : [ ] ContainerElemType• «)»
}
Transitions:


S209{
	MapType : map [ BaseType •] ContainerElemType «)»
}
Transitions:
	] -> 248


S210{
	CustomType : tok_identifier• «,»
	CustomType : tok_identifier• «;»
	CustomType : tok_identifier• «=»
	CustomType : tok_identifier• «{»
	CustomType : tok_identifier• «}»
	CustomType : tok_identifier• «tok_doc»
	CustomType : tok_identifier• «tok_option»
	CustomType : tok_identifier• «notify»
	CustomType : tok_identifier• «oneway»
	CustomType : tok_identifier• «twoway»
	CustomType : tok_identifier• «tok_identifier»
}
Transitions:


S211{
	CustomType : tok_option• «,»
	CustomType : tok_option• «;»
	CustomType : tok_option• «=»
	CustomType : tok_option• «{»
	CustomType : tok_option• «}»
	CustomType : tok_option• «tok_doc»
	CustomType : tok_option• «tok_option»
	CustomType : tok_option• «notify»
	CustomType : tok_option• «oneway»
	CustomType : tok_option• «twoway»
	CustomType : tok_option• «tok_identifier»
}
Transitions:


S212{
	MethodRet : FiledType• «,»
	MethodRet : FiledType• «;»
	MethodRet : FiledType• «=»
	MethodRet : FiledType• «{»
	MethodRet : FiledType• «}»
	MethodRet : FiledType• «tok_doc»
	MethodRet : FiledType• «tok_option»
	MethodRet : FiledType• «notify»
	MethodRet : FiledType• «oneway»
	MethodRet : FiledType• «twoway»
	MethodRet : FiledType• «tok_identifier»
}
Transitions:


S213{
	FiledType : ContainerElemType• «,»
	FiledType : ContainerElemType• «;»
	FiledType : ContainerElemType• «=»
	FiledType : ContainerElemType• «{»
	FiledType : ContainerElemType• «}»
	FiledType : ContainerElemType• «tok_doc»
	FiledType : ContainerElemType• «tok_option»
	FiledType : ContainerElemType• «notify»
	FiledType : ContainerElemType• «oneway»
	FiledType : ContainerElemType• «twoway»
	FiledType : ContainerElemType• «tok_identifier»
}
Transitions:


S214{
	FiledType : ContainerType• «,»
	FiledType : ContainerType• «;»
	FiledType : ContainerType• «=»
	FiledType : ContainerType• «{»
	FiledType : ContainerType• «}»
	FiledType : ContainerType• «tok_doc»
	FiledType : ContainerType• «tok_option»
	FiledType : ContainerType• «notify»
	FiledType : ContainerType• «oneway»
	FiledType : ContainerType• «twoway»
	FiledType : ContainerType• «tok_identifier»
}
Transitions:


S215{
	ContainerType : ListType• «,»
	ContainerType : ListType• «;»
	ContainerType : ListType• «=»
	ContainerType : ListType• «{»
	ContainerType : ListType• «}»
	ContainerType : ListType• «tok_doc»
	ContainerType : ListType• «tok_option»
	ContainerType : ListType• «notify»
	ContainerType : ListType• «oneway»
	ContainerType : ListType• «twoway»
	ContainerType : ListType• «tok_identifier»
}
Transitions:


S216{
	ContainerType : MapType• «,»
	ContainerType : MapType• «;»
	ContainerType : MapType• «=»
	ContainerType : MapType• «{»
	ContainerType : MapType• «}»
	ContainerType : MapType• «tok_doc»
	ContainerType : MapType• «tok_option»
	ContainerType : MapType• «notify»
	ContainerType : MapType• «oneway»
	ContainerType : MapType• «twoway»
	ContainerType : MapType• «tok_identifier»
}
Transitions:


S217{
	ContainerElemType : BaseType• «,»
	ContainerElemType : BaseType• «;»
	ContainerElemType : BaseType• «=»
	ContainerElemType : BaseType• «{»
	ContainerElemType : BaseType• «}»
	ContainerElemType : BaseType• «tok_doc»
	ContainerElemType : BaseType• «tok_option»
	ContainerElemType : BaseType• «notify»
	ContainerElemType : BaseType• «oneway»
	ContainerElemType : BaseType• «twoway»
	ContainerElemType : BaseType• «tok_identifier»
}
Transitions:


S218{
	ContainerElemType : CustomType• «,»
	ContainerElemType : CustomType• «;»
	ContainerElemType : CustomType• «=»
	ContainerElemType : CustomType• «{»
	ContainerElemType : CustomType• «}»
	ContainerElemType : CustomType• «tok_doc»
	ContainerElemType : CustomType• «tok_option»
	ContainerElemType : CustomType• «notify»
	ContainerElemType : CustomType• «oneway»
	ContainerElemType : CustomType• «twoway»
	ContainerElemType : CustomType• «tok_identifier»
}
Transitions:


S219{
	ListType : [ •] ContainerElemType «,»
	ListType : [ •] ContainerElemType «;»
	ListType : [ •] ContainerElemType «=»
	ListType : [ •] ContainerElemType «{»
	ListType : [ •] ContainerElemType «}»
	ListType : [ •] ContainerElemType «tok_doc»
	ListType : [ •] ContainerElemType «tok_option»
	ListType : [ •] ContainerElemType «notify»
	ListType : [ •] ContainerElemType «oneway»
	ListType : [ •] ContainerElemType «twoway»
	ListType : [ •] ContainerElemType «tok_identifier»
}
Transitions:
	] -> 249


S220{
	MapType : map •[ BaseType ] ContainerElemType «,»
	MapType : map •[ BaseType ] ContainerElemType «;»
	MapType : map •[ BaseType ] ContainerElemType «=»
	MapType : map •[ BaseType ] ContainerElemType «{»
	MapType : map •[ BaseType ] ContainerElemType «}»
	MapType : map •[ BaseType ] ContainerElemType «tok_doc»
	MapType : map •[ BaseType ] ContainerElemType «tok_option»
	MapType : map •[ BaseType ] ContainerElemType «notify»
	MapType : map •[ BaseType ] ContainerElemType «oneway»
	MapType : map •[ BaseType ] ContainerElemType «twoway»
	MapType : map •[ BaseType ] ContainerElemType «tok_identifier»
}
Transitions:
	[ -> 250


S221{
	BaseType : int8• «,»
	BaseType : int8• «;»
	BaseType : int8• «=»
	BaseType : int8• «{»
	BaseType : int8• «}»
	BaseType : int8• «tok_doc»
	BaseType : int8• «tok_option»
	BaseType : int8• «notify»
	BaseType : int8• «oneway»
	BaseType : int8• «twoway»
	BaseType : int8• «tok_identifier»
}
Transitions:


S222{
	BaseType : uint8• «,»
	BaseType : uint8• «;»
	BaseType : uint8• «=»
	BaseType : uint8• «{»
	BaseType : uint8• «}»
	BaseType : uint8• «tok_doc»
	BaseType : uint8• «tok_option»
	BaseType : uint8• «notify»
	BaseType : uint8• «oneway»
	BaseType : uint8• «twoway»
	BaseType : uint8• «tok_identifier»
}
Transitions:


S223{
	BaseType : int16• «,»
	BaseType : int16• «;»
	BaseType : int16• «=»
	BaseType : int16• «{»
	BaseType : int16• «}»
	BaseType : int16• «tok_doc»
	BaseType : int16• «tok_option»
	BaseType : int16• «notify»
	BaseType : int16• «oneway»
	BaseType : int16• «twoway»
	BaseType : int16• «tok_identifier»
}
Transitions:


S224{
	BaseType : uint16• «,»
	BaseType : uint16• «;»
	BaseType : uint16• «=»
	BaseType : uint16• «{»
	BaseType : uint16• «}»
	BaseType : uint16• «tok_doc»
	BaseType : uint16• «tok_option»
	BaseType : uint16• «notify»
	BaseType : uint16• «oneway»
	BaseType : uint16• «twoway»
	BaseType : uint16• «tok_identifier»
}
Transitions:


S225{
	BaseType : int32• «,»
	BaseType : int32• «;»
	BaseType : int32• «=»
	BaseType : int32• «{»
	BaseType : int32• «}»
	BaseType : int32• «tok_doc»
	BaseType : int32• «tok_option»
	BaseType : int32• «notify»
	BaseType : int32• «oneway»
	BaseType : int32• «twoway»
	BaseType : int32• «tok_identifier»
}
Transitions:


S226{
	BaseType : uint32• «,»
	BaseType : uint32• «;»
	BaseType : uint32• «=»
	BaseType : uint32• «{»
	BaseType : uint32• «}»
	BaseType : uint32• «tok_doc»
	BaseType : uint32• «tok_option»
	BaseType : uint32• «notify»
	BaseType : uint32• «oneway»
	BaseType : uint32• «twoway»
	BaseType : uint32• «tok_identifier»
}
Transitions:


S227{
	BaseType : int64• «,»
	BaseType : int64• «;»
	BaseType : int64• «=»
	BaseType : int64• «{»
	BaseType : int64• «}»
	BaseType : int64• «tok_doc»
	BaseType : int64• «tok_option»
	BaseType : int64• «notify»
	BaseType : int64• «oneway»
	BaseType : int64• «twoway»
	BaseType : int64• «tok_identifier»
}
Transitions:


S228{
	BaseType : uint64• «,»
	BaseType : uint64• «;»
	BaseType : uint64• «=»
	BaseType : uint64• «{»
	BaseType : uint64• «}»
	BaseType : uint64• «tok_doc»
	BaseType : uint64• «tok_option»
	BaseType : uint64• «notify»
	BaseType : uint64• «oneway»
	BaseType : uint64• «twoway»
	BaseType : uint64• «tok_identifier»
}
Transitions:


S229{
	BaseType : string• «,»
	BaseType : string• «;»
	BaseType : string• «=»
	BaseType : string• «{»
	BaseType : string• «}»
	BaseType : string• «tok_doc»
	BaseType : string• «tok_option»
	BaseType : string• «notify»
	BaseType : string• «oneway»
	BaseType : string• «twoway»
	BaseType : string• «tok_identifier»
}
Transitions:


S230{
	BaseType : bytes• «,»
	BaseType : bytes• «;»
	BaseType : bytes• «=»
	BaseType : bytes• «{»
	BaseType : bytes• «}»
	BaseType : bytes• «tok_doc»
	BaseType : bytes• «tok_option»
	BaseType : bytes• «notify»
	BaseType : bytes• «oneway»
	BaseType : bytes• «twoway»
	BaseType : bytes• «tok_identifier»
}
Transitions:


S231{
	BaseType : bool• «,»
	BaseType : bool• «;»
	BaseType : bool• «=»
	BaseType : bool• «{»
	BaseType : bool• «}»
	BaseType : bool• «tok_doc»
	BaseType : bool• «tok_option»
	BaseType : bool• «notify»
	BaseType : bool• «oneway»
	BaseType : bool• «twoway»
	BaseType : bool• «tok_identifier»
}
Transitions:


S232{
	BaseType : i8• «,»
	BaseType : i8• «;»
	BaseType : i8• «=»
	BaseType : i8• «{»
	BaseType : i8• «}»
	BaseType : i8• «tok_doc»
	BaseType : i8• «tok_option»
	BaseType : i8• «notify»
	BaseType : i8• «oneway»
	BaseType : i8• «twoway»
	BaseType : i8• «tok_identifier»
}
Transitions:


S233{
	BaseType : u8• «,»
	BaseType : u8• «;»
	BaseType : u8• «=»
	BaseType : u8• «{»
	BaseType : u8• «}»
	BaseType : u8• «tok_doc»
	BaseType : u8• «tok_option»
	BaseType : u8• «notify»
	BaseType : u8• «oneway»
	BaseType : u8• «twoway»
	BaseType : u8• «tok_identifier»
}
Transitions:


S234{
	BaseType : i16• «,»
	BaseType : i16• «;»
	BaseType : i16• «=»
	BaseType : i16• «{»
	BaseType : i16• «}»
	BaseType : i16• «tok_doc»
	BaseType : i16• «tok_option»
	BaseType : i16• «notify»
	BaseType : i16• «oneway»
	BaseType : i16• «twoway»
	BaseType : i16• «tok_identifier»
}
Transitions:


S235{
	BaseType : u16• «,»
	BaseType : u16• «;»
	BaseType : u16• «=»
	BaseType : u16• «{»
	BaseType : u16• «}»
	BaseType : u16• «tok_doc»
	BaseType : u16• «tok_option»
	BaseType : u16• «notify»
	BaseType : u16• «oneway»
	BaseType : u16• «twoway»
	BaseType : u16• «tok_identifier»
}
Transitions:


S236{
	BaseType : i32• «,»
	BaseType : i32• «;»
	BaseType : i32• «=»
	BaseType : i32• «{»
	BaseType : i32• «}»
	BaseType : i32• «tok_doc»
	BaseType : i32• «tok_option»
	BaseType : i32• «notify»
	BaseType : i32• «oneway»
	BaseType : i32• «twoway»
	BaseType : i32• «tok_identifier»
}
Transitions:


S237{
	BaseType : u32• «,»
	BaseType : u32• «;»
	BaseType : u32• «=»
	BaseType : u32• «{»
	BaseType : u32• «}»
	BaseType : u32• «tok_doc»
	BaseType : u32• «tok_option»
	BaseType : u32• «notify»
	BaseType : u32• «oneway»
	BaseType : u32• «twoway»
	BaseType : u32• «tok_identifier»
}
Transitions:


S238{
	BaseType : i64• «,»
	BaseType : i64• «;»
	BaseType : i64• «=»
	BaseType : i64• «{»
	BaseType : i64• «}»
	BaseType : i64• «tok_doc»
	BaseType : i64• «tok_option»
	BaseType : i64• «notify»
	BaseType : i64• «oneway»
	BaseType : i64• «twoway»
	BaseType : i64• «tok_identifier»
}
Transitions:


S239{
	BaseType : u64• «,»
	BaseType : u64• «;»
	BaseType : u64• «=»
	BaseType : u64• «{»
	BaseType : u64• «}»
	BaseType : u64• «tok_doc»
	BaseType : u64• «tok_option»
	BaseType : u64• «notify»
	BaseType : u64• «oneway»
	BaseType : u64• «twoway»
	BaseType : u64• «tok_identifier»
}
Transitions:


S240{
	MethodRetArgs : ( •MethodArgFields ) «,»
	MethodRetArgs : ( •MethodArgFields ) «;»
	MethodRetArgs : ( •MethodArgFields ) «=»
	MethodRetArgs : ( •MethodArgFields ) «{»
	MethodRetArgs : ( •MethodArgFields ) «}»
	MethodRetArgs : ( •MethodArgFields ) «tok_doc»
	MethodRetArgs : ( •MethodArgFields ) «tok_option»
	MethodRetArgs : ( •MethodArgFields ) «notify»
	MethodRetArgs : ( •MethodArgFields ) «oneway»
	MethodRetArgs : ( •MethodArgFields ) «twoway»
	MethodRetArgs : ( •MethodArgFields ) «tok_identifier»
	MethodArgFields : •MethodArgFields Doc Field «)»
	MethodArgFields : •MethodArgFields Doc Field «[»
	MethodArgFields : •MethodArgFields Doc Field «bool»
	MethodArgFields : •MethodArgFields Doc Field «bytes»
	MethodArgFields : •MethodArgFields Doc Field «i16»
	MethodArgFields : •MethodArgFields Doc Field «i32»
	MethodArgFields : •MethodArgFields Doc Field «i64»
	MethodArgFields : •MethodArgFields Doc Field «i8»
	MethodArgFields : •MethodArgFields Doc Field «int16»
	MethodArgFields : •MethodArgFields Doc Field «int32»
	MethodArgFields : •MethodArgFields Doc Field «int64»
	MethodArgFields : •MethodArgFields Doc Field «int8»
	MethodArgFields : •MethodArgFields Doc Field «map»
	MethodArgFields : •MethodArgFields Doc Field «string»
	MethodArgFields : •MethodArgFields Doc Field «tok_doc»
	MethodArgFields : •MethodArgFields Doc Field «tok_identifier»
	MethodArgFields : •MethodArgFields Doc Field «tok_option»
	MethodArgFields : •MethodArgFields Doc Field «u16»
	MethodArgFields : •MethodArgFields Doc Field «u32»
	MethodArgFields : •MethodArgFields Doc Field «u64»
	MethodArgFields : •MethodArgFields Doc Field «u8»
	MethodArgFields : •MethodArgFields Doc Field «uint16»
	MethodArgFields : •MethodArgFields Doc Field «uint32»
	MethodArgFields : •MethodArgFields Doc Field «uint64»
	MethodArgFields : •MethodArgFields Doc Field «uint8»
}
Transitions:
	MethodArgFields -> 251


S241{
	Method : tok_identifier ( MethodArgs ) MethodRet •MethodNo AddtionOption OptEnd «}»
	Method : tok_identifier ( MethodArgs ) MethodRet •MethodNo AddtionOption OptEnd «tok_doc»
	Method : tok_identifier ( MethodArgs ) MethodRet •MethodNo AddtionOption OptEnd «tok_option»
	Method : tok_identifier ( MethodArgs ) MethodRet •MethodNo AddtionOption OptEnd «notify»
	Method : tok_identifier ( MethodArgs ) MethodRet •MethodNo AddtionOption OptEnd «oneway»
	Method : tok_identifier ( MethodArgs ) MethodRet •MethodNo AddtionOption OptEnd «twoway»
	Method : tok_identifier ( MethodArgs ) MethodRet •MethodNo AddtionOption OptEnd «tok_identifier»
	MethodNo : empty• «,»
	MethodNo : empty• «;»
	MethodNo : empty• «{»
	MethodNo : empty• «}»
	MethodNo : •= tok_const_int «,»
	MethodNo : •= tok_const_int «;»
	MethodNo : •= tok_const_int «{»
	MethodNo : •= tok_const_int «}»
	MethodNo : empty• «tok_doc»
	MethodNo : •= tok_const_int «tok_doc»
	MethodNo : empty• «tok_option»
	MethodNo : •= tok_const_int «tok_option»
	MethodNo : empty• «notify»
	MethodNo : •= tok_const_int «notify»
	MethodNo : empty• «oneway»
	MethodNo : •= tok_const_int «oneway»
	MethodNo : empty• «twoway»
	MethodNo : •= tok_const_int «twoway»
	MethodNo : empty• «tok_identifier»
	MethodNo : •= tok_const_int «tok_identifier»
}
Transitions:
	= -> 252
	MethodNo -> 253


S242{
	MethodRet : void• «,»
	MethodRet : void• «;»
	MethodRet : void• «=»
	MethodRet : void• «{»
	MethodRet : void• «}»
	MethodRet : void• «tok_doc»
	MethodRet : void• «tok_option»
	MethodRet : void• «notify»
	MethodRet : void• «oneway»
	MethodRet : void• «twoway»
	MethodRet : void• «tok_identifier»
}
Transitions:


S243{
	MethodRet : MethodRetArgs• «,»
	MethodRet : MethodRetArgs• «;»
	MethodRet : MethodRetArgs• «=»
	MethodRet : MethodRetArgs• «{»
	MethodRet : MethodRetArgs• «}»
	MethodRet : MethodRetArgs• «tok_doc»
	MethodRet : MethodRetArgs• «tok_option»
	MethodRet : MethodRetArgs• «notify»
	MethodRet : MethodRetArgs• «oneway»
	MethodRet : MethodRetArgs• «twoway»
	MethodRet : MethodRetArgs• «tok_identifier»
}
Transitions:


S244{
	MethodArgFields : MethodArgFields Doc Field• «)»
	MethodArgFields : MethodArgFields Doc Field• «[»
	MethodArgFields : MethodArgFields Doc Field• «bool»
	MethodArgFields : MethodArgFields Doc Field• «bytes»
	MethodArgFields : MethodArgFields Doc Field• «i16»
	MethodArgFields : MethodArgFields Doc Field• «i32»
	MethodArgFields : MethodArgFields Doc Field• «i64»
	MethodArgFields : MethodArgFields Doc Field• «i8»
	MethodArgFields : MethodArgFields Doc Field• «int16»
	MethodArgFields : MethodArgFields Doc Field• «int32»
	MethodArgFields : MethodArgFields Doc Field• «int64»
	MethodArgFields : MethodArgFields Doc Field• «int8»
	MethodArgFields : MethodArgFields Doc Field• «map»
	MethodArgFields : MethodArgFields Doc Field• «string»
	MethodArgFields : MethodArgFields Doc Field• «tok_doc»
	MethodArgFields : MethodArgFields Doc Field• «tok_identifier»
	MethodArgFields : MethodArgFields Doc Field• «tok_option»
	MethodArgFields : MethodArgFields Doc Field• «u16»
	MethodArgFields : MethodArgFields Doc Field• «u32»
	MethodArgFields : MethodArgFields Doc Field• «u64»
	MethodArgFields : MethodArgFields Doc Field• «u8»
	MethodArgFields : MethodArgFields Doc Field• «uint16»
	MethodArgFields : MethodArgFields Doc Field• «uint32»
	MethodArgFields : MethodArgFields Doc Field• «uint64»
	MethodArgFields : MethodArgFields Doc Field• «uint8»
}
Transitions:


S245{
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «)»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «[»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «bool»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «bytes»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «i16»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «i32»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «i64»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «i8»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «int16»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «int32»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «int64»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «int8»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «map»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «string»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «tok_doc»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «tok_identifier»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «tok_option»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «u16»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «u32»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «u64»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «u8»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «uint16»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «uint32»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «uint64»
	Field : FiledType •tok_identifier = tok_const_int AddtionOption OptEnd «uint8»
}
Transitions:
	tok_identifier -> 254


S246{
	AddtionOption : { FieldOption •} «,»
	AddtionOption : { FieldOption •} «;»
	AddtionOption : { FieldOption •} «}»
	AddtionOption : { FieldOption •} «[»
	AddtionOption : { FieldOption •} «bool»
	AddtionOption : { FieldOption •} «bytes»
	AddtionOption : { FieldOption •} «i16»
	AddtionOption : { FieldOption •} «i32»
	AddtionOption : { FieldOption •} «i64»
	AddtionOption : { FieldOption •} «i8»
	AddtionOption : { FieldOption •} «int16»
	AddtionOption : { FieldOption •} «int32»
	AddtionOption : { FieldOption •} «int64»
	AddtionOption : { FieldOption •} «int8»
	AddtionOption : { FieldOption •} «map»
	AddtionOption : { FieldOption •} «string»
	AddtionOption : { FieldOption •} «tok_doc»
	AddtionOption : { FieldOption •} «tok_identifier»
	AddtionOption : { FieldOption •} «tok_option»
	AddtionOption : { FieldOption •} «u16»
	AddtionOption : { FieldOption •} «u32»
	AddtionOption : { FieldOption •} «u64»
	AddtionOption : { FieldOption •} «u8»
	AddtionOption : { FieldOption •} «uint16»
	AddtionOption : { FieldOption •} «uint32»
	AddtionOption : { FieldOption •} «uint64»
	AddtionOption : { FieldOption •} «uint8»
	FieldOption : FieldOption •Doc Option «}»
	FieldOption : FieldOption •Doc Option «tok_doc»
	FieldOption : FieldOption •Doc Option «tok_option»
	Doc : empty• «tok_option»
	Doc : •Doc tok_doc «tok_option»
	Doc : empty• «tok_doc»
	Doc : •Doc tok_doc «tok_doc»
}
Transitions:
	Doc -> 255
	} -> 256


S247{
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «}»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «[»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «bool»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «bytes»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «i16»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «i32»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «i64»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «i8»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «int16»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «int32»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «int64»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «int8»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «map»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «string»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «tok_doc»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «tok_identifier»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «tok_option»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «u16»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «u32»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «u64»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «u8»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «uint16»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «uint32»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «uint64»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «uint8»
}
Transitions:


S248{
	MapType : map [ BaseType ] •ContainerElemType «)»
	ContainerElemType : •BaseType «)»
	ContainerElemType : •CustomType «)»
	BaseType : •int8 «)»
	BaseType : •uint8 «)»
	BaseType : •int16 «)»
	BaseType : •uint16 «)»
	BaseType : •int32 «)»
	BaseType : •uint32 «)»
	BaseType : •int64 «)»
	BaseType : •uint64 «)»
	BaseType : •string «)»
	BaseType : •bytes «)»
	BaseType : •bool «)»
	BaseType : •i8 «)»
	BaseType : •u8 «)»
	BaseType : •i16 «)»
	BaseType : •u16 «)»
	BaseType : •i32 «)»
	BaseType : •u32 «)»
	BaseType : •i64 «)»
	BaseType : •u64 «)»
	CustomType : •tok_identifier «)»
	CustomType : •tok_option «)»
}
Transitions:
	tok_identifier -> 154
	tok_option -> 155
	BaseType -> 161
	CustomType -> 162
	int8 -> 165
	uint8 -> 166
	int16 -> 167
	uint16 -> 168
	int32 -> 169
	uint32 -> 170
	int64 -> 171
	uint64 -> 172
	string -> 173
	bytes -> 174
	bool -> 175
	i8 -> 176
	u8 -> 177
	i16 -> 178
	u16 -> 179
	i32 -> 180
	u32 -> 181
	i64 -> 182
	u64 -> 183
	ContainerElemType -> 257


S249{
	ListType : [ ] •ContainerElemType «,»
	ListType : [ ] •ContainerElemType «;»
	ListType : [ ] •ContainerElemType «=»
	ListType : [ ] •ContainerElemType «{»
	ListType : [ ] •ContainerElemType «}»
	ListType : [ ] •ContainerElemType «tok_doc»
	ListType : [ ] •ContainerElemType «tok_option»
	ListType : [ ] •ContainerElemType «notify»
	ListType : [ ] •ContainerElemType «oneway»
	ListType : [ ] •ContainerElemType «twoway»
	ListType : [ ] •ContainerElemType «tok_identifier»
	ContainerElemType : •BaseType «,»
	ContainerElemType : •CustomType «,»
	ContainerElemType : •BaseType «;»
	ContainerElemType : •CustomType «;»
	ContainerElemType : •BaseType «=»
	ContainerElemType : •CustomType «=»
	ContainerElemType : •BaseType «{»
	ContainerElemType : •CustomType «{»
	ContainerElemType : •BaseType «}»
	ContainerElemType : •CustomType «}»
	ContainerElemType : •BaseType «tok_doc»
	ContainerElemType : •CustomType «tok_doc»
	ContainerElemType : •BaseType «tok_option»
	ContainerElemType : •CustomType «tok_option»
	ContainerElemType : •BaseType «notify»
	ContainerElemType : •CustomType «notify»
	ContainerElemType : •BaseType «oneway»
	ContainerElemType : •CustomType «oneway»
	ContainerElemType : •BaseType «twoway»
	ContainerElemType : •CustomType «twoway»
	ContainerElemType : •BaseType «tok_identifier»
	ContainerElemType : •CustomType «tok_identifier»
	BaseType : •int8 «,»
	BaseType : •uint8 «,»
	BaseType : •int16 «,»
	BaseType : •uint16 «,»
	BaseType : •int32 «,»
	BaseType : •uint32 «,»
	BaseType : •int64 «,»
	BaseType : •uint64 «,»
	BaseType : •string «,»
	BaseType : •bytes «,»
	BaseType : •bool «,»
	BaseType : •i8 «,»
	BaseType : •u8 «,»
	BaseType : •i16 «,»
	BaseType : •u16 «,»
	BaseType : •i32 «,»
	BaseType : •u32 «,»
	BaseType : •i64 «,»
	BaseType : •u64 «,»
	CustomType : •tok_identifier «,»
	CustomType : •tok_option «,»
	BaseType : •int8 «;»
	BaseType : •uint8 «;»
	BaseType : •int16 «;»
	BaseType : •uint16 «;»
	BaseType : •int32 «;»
	BaseType : •uint32 «;»
	BaseType : •int64 «;»
	BaseType : •uint64 «;»
	BaseType : •string «;»
	BaseType : •bytes «;»
	BaseType : •bool «;»
	BaseType : •i8 «;»
	BaseType : •u8 «;»
	BaseType : •i16 «;»
	BaseType : •u16 «;»
	BaseType : •i32 «;»
	BaseType : •u32 «;»
	BaseType : •i64 «;»
	BaseType : •u64 «;»
	CustomType : •tok_identifier «;»
	CustomType : •tok_option «;»
	BaseType : •int8 «=»
	BaseType : •uint8 «=»
	BaseType : •int16 «=»
	BaseType : •uint16 «=»
	BaseType : •int32 «=»
	BaseType : •uint32 «=»
	BaseType : •int64 «=»
	BaseType : •uint64 «=»
	BaseType : •string «=»
	BaseType : •bytes «=»
	BaseType : •bool «=»
	BaseType : •i8 «=»
	BaseType : •u8 «=»
	BaseType : •i16 «=»
	BaseType : •u16 «=»
	BaseType : •i32 «=»
	BaseType : •u32 «=»
	BaseType : •i64 «=»
	BaseType : •u64 «=»
	CustomType : •tok_identifier «=»
	CustomType : •tok_option «=»
	BaseType : •int8 «{»
	BaseType : •uint8 «{»
	BaseType : •int16 «{»
	BaseType : •uint16 «{»
	BaseType : •int32 «{»
	BaseType : •uint32 «{»
	BaseType : •int64 «{»
	BaseType : •uint64 «{»
	BaseType : •string «{»
	BaseType : •bytes «{»
	BaseType : •bool «{»
	BaseType : •i8 «{»
	BaseType : •u8 «{»
	BaseType : •i16 «{»
	BaseType : •u16 «{»
	BaseType : •i32 «{»
	BaseType : •u32 «{»
	BaseType : •i64 «{»
	BaseType : •u64 «{»
	CustomType : •tok_identifier «{»
	CustomType : •tok_option «{»
	BaseType : •int8 «}»
	BaseType : •uint8 «}»
	BaseType : •int16 «}»
	BaseType : •uint16 «}»
	BaseType : •int32 «}»
	BaseType : •uint32 «}»
	BaseType : •int64 «}»
	BaseType : •uint64 «}»
	BaseType : •string «}»
	BaseType : •bytes «}»
	BaseType : •bool «}»
	BaseType : •i8 «}»
	BaseType : •u8 «}»
	BaseType : •i16 «}»
	BaseType : •u16 «}»
	BaseType : •i32 «}»
	BaseType : •u32 «}»
	BaseType : •i64 «}»
	BaseType : •u64 «}»
	CustomType : •tok_identifier «}»
	CustomType : •tok_option «}»
	BaseType : •int8 «tok_doc»
	BaseType : •uint8 «tok_doc»
	BaseType : •int16 «tok_doc»
	BaseType : •uint16 «tok_doc»
	BaseType : •int32 «tok_doc»
	BaseType : •uint32 «tok_doc»
	BaseType : •int64 «tok_doc»
	BaseType : •uint64 «tok_doc»
	BaseType : •string «tok_doc»
	BaseType : •bytes «tok_doc»
	BaseType : •bool «tok_doc»
	BaseType : •i8 «tok_doc»
	BaseType : •u8 «tok_doc»
	BaseType : •i16 «tok_doc»
	BaseType : •u16 «tok_doc»
	BaseType : •i32 «tok_doc»
	BaseType : •u32 «tok_doc»
	BaseType : •i64 «tok_doc»
	BaseType : •u64 «tok_doc»
	CustomType : •tok_identifier «tok_doc»
	CustomType : •tok_option «tok_doc»
	BaseType : •int8 «tok_option»
	BaseType : •uint8 «tok_option»
	BaseType : •int16 «tok_option»
	BaseType : •uint16 «tok_option»
	BaseType : •int32 «tok_option»
	BaseType : •uint32 «tok_option»
	BaseType : •int64 «tok_option»
	BaseType : •uint64 «tok_option»
	BaseType : •string «tok_option»
	BaseType : •bytes «tok_option»
	BaseType : •bool «tok_option»
	BaseType : •i8 «tok_option»
	BaseType : •u8 «tok_option»
	BaseType : •i16 «tok_option»
	BaseType : •u16 «tok_option»
	BaseType : •i32 «tok_option»
	BaseType : •u32 «tok_option»
	BaseType : •i64 «tok_option»
	BaseType : •u64 «tok_option»
	CustomType : •tok_identifier «tok_option»
	CustomType : •tok_option «tok_option»
	BaseType : •int8 «notify»
	BaseType : •uint8 «notify»
	BaseType : •int16 «notify»
	BaseType : •uint16 «notify»
	BaseType : •int32 «notify»
	BaseType : •uint32 «notify»
	BaseType : •int64 «notify»
	BaseType : •uint64 «notify»
	BaseType : •string «notify»
	BaseType : •bytes «notify»
	BaseType : •bool «notify»
	BaseType : •i8 «notify»
	BaseType : •u8 «notify»
	BaseType : •i16 «notify»
	BaseType : •u16 «notify»
	BaseType : •i32 «notify»
	BaseType : •u32 «notify»
	BaseType : •i64 «notify»
	BaseType : •u64 «notify»
	CustomType : •tok_identifier «notify»
	CustomType : •tok_option «notify»
	BaseType : •int8 «oneway»
	BaseType : •uint8 «oneway»
	BaseType : •int16 «oneway»
	BaseType : •uint16 «oneway»
	BaseType : •int32 «oneway»
	BaseType : •uint32 «oneway»
	BaseType : •int64 «oneway»
	BaseType : •uint64 «oneway»
	BaseType : •string «oneway»
	BaseType : •bytes «oneway»
	BaseType : •bool «oneway»
	BaseType : •i8 «oneway»
	BaseType : •u8 «oneway»
	BaseType : •i16 «oneway»
	BaseType : •u16 «oneway»
	BaseType : •i32 «oneway»
	BaseType : •u32 «oneway»
	BaseType : •i64 «oneway»
	BaseType : •u64 «oneway»
	CustomType : •tok_identifier «oneway»
	CustomType : •tok_option «oneway»
	BaseType : •int8 «twoway»
	BaseType : •uint8 «twoway»
	BaseType : •int16 «twoway»
	BaseType : •uint16 «twoway»
	BaseType : •int32 «twoway»
	BaseType : •uint32 «twoway»
	BaseType : •int64 «twoway»
	BaseType : •uint64 «twoway»
	BaseType : •string «twoway»
	BaseType : •bytes «twoway»
	BaseType : •bool «twoway»
	BaseType : •i8 «twoway»
	BaseType : •u8 «twoway»
	BaseType : •i16 «twoway»
	BaseType : •u16 «twoway»
	BaseType : •i32 «twoway»
	BaseType : •u32 «twoway»
	BaseType : •i64 «twoway»
	BaseType : •u64 «twoway»
	CustomType : •tok_identifier «twoway»
	CustomType : •tok_option «twoway»
	BaseType : •int8 «tok_identifier»
	BaseType : •uint8 «tok_identifier»
	BaseType : •int16 «tok_identifier»
	BaseType : •uint16 «tok_identifier»
	BaseType : •int32 «tok_identifier»
	BaseType : •uint32 «tok_identifier»
	BaseType : •int64 «tok_identifier»
	BaseType : •uint64 «tok_identifier»
	BaseType : •string «tok_identifier»
	BaseType : •bytes «tok_identifier»
	BaseType : •bool «tok_identifier»
	BaseType : •i8 «tok_identifier»
	BaseType : •u8 «tok_identifier»
	BaseType : •i16 «tok_identifier»
	BaseType : •u16 «tok_identifier»
	BaseType : •i32 «tok_identifier»
	BaseType : •u32 «tok_identifier»
	BaseType : •i64 «tok_identifier»
	BaseType : •u64 «tok_identifier»
	CustomType : •tok_identifier «tok_identifier»
	CustomType : •tok_option «tok_identifier»
}
Transitions:
	tok_identifier -> 210
	tok_option -> 211
	BaseType -> 217
	CustomType -> 218
	int8 -> 221
	uint8 -> 222
	int16 -> 223
	uint16 -> 224
	int32 -> 225
	uint32 -> 226
	int64 -> 227
	uint64 -> 228
	string -> 229
	bytes -> 230
	bool -> 231
	i8 -> 232
	u8 -> 233
	i16 -> 234
	u16 -> 235
	i32 -> 236
	u32 -> 237
	i64 -> 238
	u64 -> 239
	ContainerElemType -> 258


S250{
	MapType : map [ •BaseType ] ContainerElemType «,»
	MapType : map [ •BaseType ] ContainerElemType «;»
	MapType : map [ •BaseType ] ContainerElemType «=»
	MapType : map [ •BaseType ] ContainerElemType «{»
	MapType : map [ •BaseType ] ContainerElemType «}»
	MapType : map [ •BaseType ] ContainerElemType «tok_doc»
	MapType : map [ •BaseType ] ContainerElemType «tok_option»
	MapType : map [ •BaseType ] ContainerElemType «notify»
	MapType : map [ •BaseType ] ContainerElemType «oneway»
	MapType : map [ •BaseType ] ContainerElemType «twoway»
	MapType : map [ •BaseType ] ContainerElemType «tok_identifier»
	BaseType : •int8 «]»
	BaseType : •uint8 «]»
	BaseType : •int16 «]»
	BaseType : •uint16 «]»
	BaseType : •int32 «]»
	BaseType : •uint32 «]»
	BaseType : •int64 «]»
	BaseType : •uint64 «]»
	BaseType : •string «]»
	BaseType : •bytes «]»
	BaseType : •bool «]»
	BaseType : •i8 «]»
	BaseType : •u8 «]»
	BaseType : •i16 «]»
	BaseType : •u16 «]»
	BaseType : •i32 «]»
	BaseType : •u32 «]»
	BaseType : •i64 «]»
	BaseType : •u64 «]»
}
Transitions:
	int8 -> 135
	uint8 -> 136
	int16 -> 137
	uint16 -> 138
	int32 -> 139
	uint32 -> 140
	int64 -> 141
	uint64 -> 142
	string -> 143
	bytes -> 144
	bool -> 145
	i8 -> 146
	u8 -> 147
	i16 -> 148
	u16 -> 149
	i32 -> 150
	u32 -> 151
	i64 -> 152
	u64 -> 153
	BaseType -> 259


S251{
	MethodRetArgs : ( MethodArgFields •) «,»
	MethodRetArgs : ( MethodArgFields •) «;»
	MethodRetArgs : ( MethodArgFields •) «=»
	MethodRetArgs : ( MethodArgFields •) «{»
	MethodRetArgs : ( MethodArgFields •) «}»
	MethodRetArgs : ( MethodArgFields •) «tok_doc»
	MethodRetArgs : ( MethodArgFields •) «tok_option»
	MethodRetArgs : ( MethodArgFields •) «notify»
	MethodRetArgs : ( MethodArgFields •) «oneway»
	MethodRetArgs : ( MethodArgFields •) «twoway»
	MethodRetArgs : ( MethodArgFields •) «tok_identifier»
	MethodArgFields : MethodArgFields •Doc Field «)»
	MethodArgFields : MethodArgFields •Doc Field «[»
	MethodArgFields : MethodArgFields •Doc Field «bool»
	MethodArgFields : MethodArgFields •Doc Field «bytes»
	MethodArgFields : MethodArgFields •Doc Field «i16»
	MethodArgFields : MethodArgFields •Doc Field «i32»
	MethodArgFields : MethodArgFields •Doc Field «i64»
	MethodArgFields : MethodArgFields •Doc Field «i8»
	MethodArgFields : MethodArgFields •Doc Field «int16»
	MethodArgFields : MethodArgFields •Doc Field «int32»
	MethodArgFields : MethodArgFields •Doc Field «int64»
	MethodArgFields : MethodArgFields •Doc Field «int8»
	MethodArgFields : MethodArgFields •Doc Field «map»
	MethodArgFields : MethodArgFields •Doc Field «string»
	MethodArgFields : MethodArgFields •Doc Field «tok_doc»
	MethodArgFields : MethodArgFields •Doc Field «tok_identifier»
	MethodArgFields : MethodArgFields •Doc Field «tok_option»
	MethodArgFields : MethodArgFields •Doc Field «u16»
	MethodArgFields : MethodArgFields •Doc Field «u32»
	MethodArgFields : MethodArgFields •Doc Field «u64»
	MethodArgFields : MethodArgFields •Doc Field «u8»
	MethodArgFields : MethodArgFields •Doc Field «uint16»
	MethodArgFields : MethodArgFields •Doc Field «uint32»
	MethodArgFields : MethodArgFields •Doc Field «uint64»
	MethodArgFields : MethodArgFields •Doc Field «uint8»
	Doc : empty• «[»
	Doc : empty• «bool»
	Doc : empty• «bytes»
	Doc : empty• «i16»
	Doc : empty• «i32»
	Doc : empty• «i64»
	Doc : empty• «i8»
	Doc : empty• «int16»
	Doc : empty• «int32»
	Doc : empty• «int64»
	Doc : empty• «int8»
	Doc : empty• «map»
	Doc : empty• «string»
	Doc : empty• «tok_identifier»
	Doc : empty• «tok_option»
	Doc : empty• «u16»
	Doc : empty• «u32»
	Doc : empty• «u64»
	Doc : empty• «u8»
	Doc : empty• «uint16»
	Doc : empty• «uint32»
	Doc : empty• «uint64»
	Doc : empty• «uint8»
	Doc : •Doc tok_doc «[»
	Doc : •Doc tok_doc «bool»
	Doc : •Doc tok_doc «bytes»
	Doc : •Doc tok_doc «i16»
	Doc : •Doc tok_doc «i32»
	Doc : •Doc tok_doc «i64»
	Doc : •Doc tok_doc «i8»
	Doc : •Doc tok_doc «int16»
	Doc : •Doc tok_doc «int32»
	Doc : •Doc tok_doc «int64»
	Doc : •Doc tok_doc «int8»
	Doc : •Doc tok_doc «map»
	Doc : •Doc tok_doc «string»
	Doc : •Doc tok_doc «tok_identifier»
	Doc : •Doc tok_doc «tok_option»
	Doc : •Doc tok_doc «u16»
	Doc : •Doc tok_doc «u32»
	Doc : •Doc tok_doc «u64»
	Doc : •Doc tok_doc «u8»
	Doc : •Doc tok_doc «uint16»
	Doc : •Doc tok_doc «uint32»
	Doc : •Doc tok_doc «uint64»
	Doc : •Doc tok_doc «uint8»
	Doc : empty• «tok_doc»
	Doc : •Doc tok_doc «tok_doc»
}
Transitions:
	Doc -> 200
	) -> 260


S252{
	MethodNo : = •tok_const_int «,»
	MethodNo : = •tok_const_int «;»
	MethodNo : = •tok_const_int «{»
	MethodNo : = •tok_const_int «}»
	MethodNo : = •tok_const_int «tok_doc»
	MethodNo : = •tok_const_int «tok_option»
	MethodNo : = •tok_const_int «notify»
	MethodNo : = •tok_const_int «oneway»
	MethodNo : = •tok_const_int «twoway»
	MethodNo : = •tok_const_int «tok_identifier»
}
Transitions:
	tok_const_int -> 261


S253{
	Method : tok_identifier ( MethodArgs ) MethodRet MethodNo •AddtionOption OptEnd «}»
	Method : tok_identifier ( MethodArgs ) MethodRet MethodNo •AddtionOption OptEnd «tok_doc»
	Method : tok_identifier ( MethodArgs ) MethodRet MethodNo •AddtionOption OptEnd «tok_option»
	Method : tok_identifier ( MethodArgs ) MethodRet MethodNo •AddtionOption OptEnd «notify»
	Method : tok_identifier ( MethodArgs ) MethodRet MethodNo •AddtionOption OptEnd «oneway»
	Method : tok_identifier ( MethodArgs ) MethodRet MethodNo •AddtionOption OptEnd «twoway»
	Method : tok_identifier ( MethodArgs ) MethodRet MethodNo •AddtionOption OptEnd «tok_identifier»
	AddtionOption : empty• «,»
	AddtionOption : empty• «;»
	AddtionOption : empty• «}»
	AddtionOption : •{ FieldOption } «,»
	AddtionOption : •{ FieldOption } «;»
	AddtionOption : •{ FieldOption } «}»
	AddtionOption : empty• «tok_doc»
	AddtionOption : •{ FieldOption } «tok_doc»
	AddtionOption : empty• «tok_option»
	AddtionOption : •{ FieldOption } «tok_option»
	AddtionOption : empty• «notify»
	AddtionOption : •{ FieldOption } «notify»
	AddtionOption : empty• «oneway»
	AddtionOption : •{ FieldOption } «oneway»
	AddtionOption : empty• «twoway»
	AddtionOption : •{ FieldOption } «twoway»
	AddtionOption : empty• «tok_identifier»
	AddtionOption : •{ FieldOption } «tok_identifier»
}
Transitions:
	{ -> 262
	AddtionOption -> 263


S254{
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «)»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «[»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «bool»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «bytes»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «i16»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «i32»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «i64»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «i8»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «int16»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «int32»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «int64»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «int8»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «map»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «string»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «tok_doc»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «tok_identifier»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «tok_option»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «u16»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «u32»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «u64»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «u8»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «uint16»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «uint32»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «uint64»
	Field : FiledType tok_identifier •= tok_const_int AddtionOption OptEnd «uint8»
}
Transitions:
	= -> 264


S255{
	FieldOption : FieldOption Doc •Option «}»
	FieldOption : FieldOption Doc •Option «tok_doc»
	FieldOption : FieldOption Doc •Option «tok_option»
	Doc : Doc •tok_doc «tok_option»
	Doc : Doc •tok_doc «tok_doc»
	Option : •tok_option OptionValue «}»
	Option : •tok_option OptionValue «tok_doc»
	Option : •tok_option OptionValue «tok_option»
}
Transitions:
	Option -> 265
	tok_doc -> 266
	tok_option -> 267


S256{
	AddtionOption : { FieldOption }• «,»
	AddtionOption : { FieldOption }• «;»
	AddtionOption : { FieldOption }• «}»
	AddtionOption : { FieldOption }• «[»
	AddtionOption : { FieldOption }• «bool»
	AddtionOption : { FieldOption }• «bytes»
	AddtionOption : { FieldOption }• «i16»
	AddtionOption : { FieldOption }• «i32»
	AddtionOption : { FieldOption }• «i64»
	AddtionOption : { FieldOption }• «i8»
	AddtionOption : { FieldOption }• «int16»
	AddtionOption : { FieldOption }• «int32»
	AddtionOption : { FieldOption }• «int64»
	AddtionOption : { FieldOption }• «int8»
	AddtionOption : { FieldOption }• «map»
	AddtionOption : { FieldOption }• «string»
	AddtionOption : { FieldOption }• «tok_doc»
	AddtionOption : { FieldOption }• «tok_identifier»
	AddtionOption : { FieldOption }• «tok_option»
	AddtionOption : { FieldOption }• «u16»
	AddtionOption : { FieldOption }• «u32»
	AddtionOption : { FieldOption }• «u64»
	AddtionOption : { FieldOption }• «u8»
	AddtionOption : { FieldOption }• «uint16»
	AddtionOption : { FieldOption }• «uint32»
	AddtionOption : { FieldOption }• «uint64»
	AddtionOption : { FieldOption }• «uint8»
}
Transitions:


S257{
	MapType : map [ BaseType ] ContainerElemType• «)»
}
Transitions:


S258{
	ListType : [ ] ContainerElemType• «,»
	ListType : [ ] ContainerElemType• «;»
	ListType : [ ] ContainerElemType• «=»
	ListType : [ ] ContainerElemType• «{»
	ListType : [ ] ContainerElemType• «}»
	ListType : [ ] ContainerElemType• «tok_doc»
	ListType : [ ] ContainerElemType• «tok_option»
	ListType : [ ] ContainerElemType• «notify»
	ListType : [ ] ContainerElemType• «oneway»
	ListType : [ ] ContainerElemType• «twoway»
	ListType : [ ] ContainerElemType• «tok_identifier»
}
Transitions:


S259{
	MapType : map [ BaseType •] ContainerElemType «,»
	MapType : map [ BaseType •] ContainerElemType «;»
	MapType : map [ BaseType •] ContainerElemType «=»
	MapType : map [ BaseType •] ContainerElemType «{»
	MapType : map [ BaseType •] ContainerElemType «}»
	MapType : map [ BaseType •] ContainerElemType «tok_doc»
	MapType : map [ BaseType •] ContainerElemType «tok_option»
	MapType : map [ BaseType •] ContainerElemType «notify»
	MapType : map [ BaseType •] ContainerElemType «oneway»
	MapType : map [ BaseType •] ContainerElemType «twoway»
	MapType : map [ BaseType •] ContainerElemType «tok_identifier»
}
Transitions:
	] -> 268


S260{
	MethodRetArgs : ( MethodArgFields )• «,»
	MethodRetArgs : ( MethodArgFields )• «;»
	MethodRetArgs : ( MethodArgFields )• «=»
	MethodRetArgs : ( MethodArgFields )• «{»
	MethodRetArgs : ( MethodArgFields )• «}»
	MethodRetArgs : ( MethodArgFields )• «tok_doc»
	MethodRetArgs : ( MethodArgFields )• «tok_option»
	MethodRetArgs : ( MethodArgFields )• «notify»
	MethodRetArgs : ( MethodArgFields )• «oneway»
	MethodRetArgs : ( MethodArgFields )• «twoway»
	MethodRetArgs : ( MethodArgFields )• «tok_identifier»
}
Transitions:


S261{
	MethodNo : = tok_const_int• «,»
	MethodNo : = tok_const_int• «;»
	MethodNo : = tok_const_int• «{»
	MethodNo : = tok_const_int• «}»
	MethodNo : = tok_const_int• «tok_doc»
	MethodNo : = tok_const_int• «tok_option»
	MethodNo : = tok_const_int• «notify»
	MethodNo : = tok_const_int• «oneway»
	MethodNo : = tok_const_int• «twoway»
	MethodNo : = tok_const_int• «tok_identifier»
}
Transitions:


S262{
	AddtionOption : { •FieldOption } «,»
	AddtionOption : { •FieldOption } «;»
	AddtionOption : { •FieldOption } «}»
	AddtionOption : { •FieldOption } «tok_doc»
	AddtionOption : { •FieldOption } «tok_option»
	AddtionOption : { •FieldOption } «notify»
	AddtionOption : { •FieldOption } «oneway»
	AddtionOption : { •FieldOption } «twoway»
	AddtionOption : { •FieldOption } «tok_identifier»
	FieldOption : empty• «}»
	FieldOption : •FieldOption Doc Option «}»
	FieldOption : empty• «tok_doc»
	FieldOption : empty• «tok_option»
	FieldOption : •FieldOption Doc Option «tok_doc»
	FieldOption : •FieldOption Doc Option «tok_option»
}
Transitions:
	FieldOption -> 269


S263{
	Method : tok_identifier ( MethodArgs ) MethodRet MethodNo AddtionOption •OptEnd «}»
	Method : tok_identifier ( MethodArgs ) MethodRet MethodNo AddtionOption •OptEnd «tok_doc»
	Method : tok_identifier ( MethodArgs ) MethodRet MethodNo AddtionOption •OptEnd «tok_option»
	Method : tok_identifier ( MethodArgs ) MethodRet MethodNo AddtionOption •OptEnd «notify»
	Method : tok_identifier ( MethodArgs ) MethodRet MethodNo AddtionOption •OptEnd «oneway»
	Method : tok_identifier ( MethodArgs ) MethodRet MethodNo AddtionOption •OptEnd «twoway»
	Method : tok_identifier ( MethodArgs ) MethodRet MethodNo AddtionOption •OptEnd «tok_identifier»
	OptEnd : empty• «}»
	OptEnd : •; «}»
	OptEnd : •, «}»
	OptEnd : empty• «tok_doc»
	OptEnd : •; «tok_doc»
	OptEnd : •, «tok_doc»
	OptEnd : empty• «tok_option»
	OptEnd : •; «tok_option»
	OptEnd : •, «tok_option»
	OptEnd : empty• «notify»
	OptEnd : •; «notify»
	OptEnd : •, «notify»
	OptEnd : empty• «oneway»
	OptEnd : •; «oneway»
	OptEnd : •, «oneway»
	OptEnd : empty• «twoway»
	OptEnd : •; «twoway»
	OptEnd : •, «twoway»
	OptEnd : empty• «tok_identifier»
	OptEnd : •; «tok_identifier»
	OptEnd : •, «tok_identifier»
}
Transitions:
	; -> 202
	, -> 203
	OptEnd -> 270


S264{
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «)»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «[»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «bool»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «bytes»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «i16»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «i32»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «i64»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «i8»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «int16»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «int32»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «int64»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «int8»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «map»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «string»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «tok_doc»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «tok_identifier»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «tok_option»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «u16»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «u32»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «u64»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «u8»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «uint16»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «uint32»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «uint64»
	Field : FiledType tok_identifier = •tok_const_int AddtionOption OptEnd «uint8»
}
Transitions:
	tok_const_int -> 271


S265{
	FieldOption : FieldOption Doc Option• «}»
	FieldOption : FieldOption Doc Option• «tok_doc»
	FieldOption : FieldOption Doc Option• «tok_option»
}
Transitions:


S266{
	Doc : Doc tok_doc• «tok_option»
	Doc : Doc tok_doc• «tok_doc»
}
Transitions:


S267{
	Option : tok_option •OptionValue «}»
	Option : tok_option •OptionValue «tok_doc»
	Option : tok_option •OptionValue «tok_option»
	OptionValue : empty• «}»
	OptionValue : •= tok_literal OptEnd «}»
	OptionValue : •= tok_const_int OptEnd «}»
	OptionValue : empty• «tok_doc»
	OptionValue : •= tok_literal OptEnd «tok_doc»
	OptionValue : •= tok_const_int OptEnd «tok_doc»
	OptionValue : empty• «tok_option»
	OptionValue : •= tok_literal OptEnd «tok_option»
	OptionValue : •= tok_const_int OptEnd «tok_option»
}
Transitions:
	OptionValue -> 272
	= -> 273


S268{
	MapType : map [ BaseType ] •ContainerElemType «,»
	MapType : map [ BaseType ] •ContainerElemType «;»
	MapType : map [ BaseType ] •ContainerElemType «=»
	MapType : map [ BaseType ] •ContainerElemType «{»
	MapType : map [ BaseType ] •ContainerElemType «}»
	MapType : map [ BaseType ] •ContainerElemType «tok_doc»
	MapType : map [ BaseType ] •ContainerElemType «tok_option»
	MapType : map [ BaseType ] •ContainerElemType «notify»
	MapType : map [ BaseType ] •ContainerElemType «oneway»
	MapType : map [ BaseType ] •ContainerElemType «twoway»
	MapType : map [ BaseType ] •ContainerElemType «tok_identifier»
	ContainerElemType : •BaseType «,»
	ContainerElemType : •CustomType «,»
	ContainerElemType : •BaseType «;»
	ContainerElemType : •CustomType «;»
	ContainerElemType : •BaseType «=»
	ContainerElemType : •CustomType «=»
	ContainerElemType : •BaseType «{»
	ContainerElemType : •CustomType «{»
	ContainerElemType : •BaseType «}»
	ContainerElemType : •CustomType «}»
	ContainerElemType : •BaseType «tok_doc»
	ContainerElemType : •CustomType «tok_doc»
	ContainerElemType : •BaseType «tok_option»
	ContainerElemType : •CustomType «tok_option»
	ContainerElemType : •BaseType «notify»
	ContainerElemType : •CustomType «notify»
	ContainerElemType : •BaseType «oneway»
	ContainerElemType : •CustomType «oneway»
	ContainerElemType : •BaseType «twoway»
	ContainerElemType : •CustomType «twoway»
	ContainerElemType : •BaseType «tok_identifier»
	ContainerElemType : •CustomType «tok_identifier»
	BaseType : •int8 «,»
	BaseType : •uint8 «,»
	BaseType : •int16 «,»
	BaseType : •uint16 «,»
	BaseType : •int32 «,»
	BaseType : •uint32 «,»
	BaseType : •int64 «,»
	BaseType : •uint64 «,»
	BaseType : •string «,»
	BaseType : •bytes «,»
	BaseType : •bool «,»
	BaseType : •i8 «,»
	BaseType : •u8 «,»
	BaseType : •i16 «,»
	BaseType : •u16 «,»
	BaseType : •i32 «,»
	BaseType : •u32 «,»
	BaseType : •i64 «,»
	BaseType : •u64 «,»
	CustomType : •tok_identifier «,»
	CustomType : •tok_option «,»
	BaseType : •int8 «;»
	BaseType : •uint8 «;»
	BaseType : •int16 «;»
	BaseType : •uint16 «;»
	BaseType : •int32 «;»
	BaseType : •uint32 «;»
	BaseType : •int64 «;»
	BaseType : •uint64 «;»
	BaseType : •string «;»
	BaseType : •bytes «;»
	BaseType : •bool «;»
	BaseType : •i8 «;»
	BaseType : •u8 «;»
	BaseType : •i16 «;»
	BaseType : •u16 «;»
	BaseType : •i32 «;»
	BaseType : •u32 «;»
	BaseType : •i64 «;»
	BaseType : •u64 «;»
	CustomType : •tok_identifier «;»
	CustomType : •tok_option «;»
	BaseType : •int8 «=»
	BaseType : •uint8 «=»
	BaseType : •int16 «=»
	BaseType : •uint16 «=»
	BaseType : •int32 «=»
	BaseType : •uint32 «=»
	BaseType : •int64 «=»
	BaseType : •uint64 «=»
	BaseType : •string «=»
	BaseType : •bytes «=»
	BaseType : •bool «=»
	BaseType : •i8 «=»
	BaseType : •u8 «=»
	BaseType : •i16 «=»
	BaseType : •u16 «=»
	BaseType : •i32 «=»
	BaseType : •u32 «=»
	BaseType : •i64 «=»
	BaseType : •u64 «=»
	CustomType : •tok_identifier «=»
	CustomType : •tok_option «=»
	BaseType : •int8 «{»
	BaseType : •uint8 «{»
	BaseType : •int16 «{»
	BaseType : •uint16 «{»
	BaseType : •int32 «{»
	BaseType : •uint32 «{»
	BaseType : •int64 «{»
	BaseType : •uint64 «{»
	BaseType : •string «{»
	BaseType : •bytes «{»
	BaseType : •bool «{»
	BaseType : •i8 «{»
	BaseType : •u8 «{»
	BaseType : •i16 «{»
	BaseType : •u16 «{»
	BaseType : •i32 «{»
	BaseType : •u32 «{»
	BaseType : •i64 «{»
	BaseType : •u64 «{»
	CustomType : •tok_identifier «{»
	CustomType : •tok_option «{»
	BaseType : •int8 «}»
	BaseType : •uint8 «}»
	BaseType : •int16 «}»
	BaseType : •uint16 «}»
	BaseType : •int32 «}»
	BaseType : •uint32 «}»
	BaseType : •int64 «}»
	BaseType : •uint64 «}»
	BaseType : •string «}»
	BaseType : •bytes «}»
	BaseType : •bool «}»
	BaseType : •i8 «}»
	BaseType : •u8 «}»
	BaseType : •i16 «}»
	BaseType : •u16 «}»
	BaseType : •i32 «}»
	BaseType : •u32 «}»
	BaseType : •i64 «}»
	BaseType : •u64 «}»
	CustomType : •tok_identifier «}»
	CustomType : •tok_option «}»
	BaseType : •int8 «tok_doc»
	BaseType : •uint8 «tok_doc»
	BaseType : •int16 «tok_doc»
	BaseType : •uint16 «tok_doc»
	BaseType : •int32 «tok_doc»
	BaseType : •uint32 «tok_doc»
	BaseType : •int64 «tok_doc»
	BaseType : •uint64 «tok_doc»
	BaseType : •string «tok_doc»
	BaseType : •bytes «tok_doc»
	BaseType : •bool «tok_doc»
	BaseType : •i8 «tok_doc»
	BaseType : •u8 «tok_doc»
	BaseType : •i16 «tok_doc»
	BaseType : •u16 «tok_doc»
	BaseType : •i32 «tok_doc»
	BaseType : •u32 «tok_doc»
	BaseType : •i64 «tok_doc»
	BaseType : •u64 «tok_doc»
	CustomType : •tok_identifier «tok_doc»
	CustomType : •tok_option «tok_doc»
	BaseType : •int8 «tok_option»
	BaseType : •uint8 «tok_option»
	BaseType : •int16 «tok_option»
	BaseType : •uint16 «tok_option»
	BaseType : •int32 «tok_option»
	BaseType : •uint32 «tok_option»
	BaseType : •int64 «tok_option»
	BaseType : •uint64 «tok_option»
	BaseType : •string «tok_option»
	BaseType : •bytes «tok_option»
	BaseType : •bool «tok_option»
	BaseType : •i8 «tok_option»
	BaseType : •u8 «tok_option»
	BaseType : •i16 «tok_option»
	BaseType : •u16 «tok_option»
	BaseType : •i32 «tok_option»
	BaseType : •u32 «tok_option»
	BaseType : •i64 «tok_option»
	BaseType : •u64 «tok_option»
	CustomType : •tok_identifier «tok_option»
	CustomType : •tok_option «tok_option»
	BaseType : •int8 «notify»
	BaseType : •uint8 «notify»
	BaseType : •int16 «notify»
	BaseType : •uint16 «notify»
	BaseType : •int32 «notify»
	BaseType : •uint32 «notify»
	BaseType : •int64 «notify»
	BaseType : •uint64 «notify»
	BaseType : •string «notify»
	BaseType : •bytes «notify»
	BaseType : •bool «notify»
	BaseType : •i8 «notify»
	BaseType : •u8 «notify»
	BaseType : •i16 «notify»
	BaseType : •u16 «notify»
	BaseType : •i32 «notify»
	BaseType : •u32 «notify»
	BaseType : •i64 «notify»
	BaseType : •u64 «notify»
	CustomType : •tok_identifier «notify»
	CustomType : •tok_option «notify»
	BaseType : •int8 «oneway»
	BaseType : •uint8 «oneway»
	BaseType : •int16 «oneway»
	BaseType : •uint16 «oneway»
	BaseType : •int32 «oneway»
	BaseType : •uint32 «oneway»
	BaseType : •int64 «oneway»
	BaseType : •uint64 «oneway»
	BaseType : •string «oneway»
	BaseType : •bytes «oneway»
	BaseType : •bool «oneway»
	BaseType : •i8 «oneway»
	BaseType : •u8 «oneway»
	BaseType : •i16 «oneway»
	BaseType : •u16 «oneway»
	BaseType : •i32 «oneway»
	BaseType : •u32 «oneway»
	BaseType : •i64 «oneway»
	BaseType : •u64 «oneway»
	CustomType : •tok_identifier «oneway»
	CustomType : •tok_option «oneway»
	BaseType : •int8 «twoway»
	BaseType : •uint8 «twoway»
	BaseType : •int16 «twoway»
	BaseType : •uint16 «twoway»
	BaseType : •int32 «twoway»
	BaseType : •uint32 «twoway»
	BaseType : •int64 «twoway»
	BaseType : •uint64 «twoway»
	BaseType : •string «twoway»
	BaseType : •bytes «twoway»
	BaseType : •bool «twoway»
	BaseType : •i8 «twoway»
	BaseType : •u8 «twoway»
	BaseType : •i16 «twoway»
	BaseType : •u16 «twoway»
	BaseType : •i32 «twoway»
	BaseType : •u32 «twoway»
	BaseType : •i64 «twoway»
	BaseType : •u64 «twoway»
	CustomType : •tok_identifier «twoway»
	CustomType : •tok_option «twoway»
	BaseType : •int8 «tok_identifier»
	BaseType : •uint8 «tok_identifier»
	BaseType : •int16 «tok_identifier»
	BaseType : •uint16 «tok_identifier»
	BaseType : •int32 «tok_identifier»
	BaseType : •uint32 «tok_identifier»
	BaseType : •int64 «tok_identifier»
	BaseType : •uint64 «tok_identifier»
	BaseType : •string «tok_identifier»
	BaseType : •bytes «tok_identifier»
	BaseType : •bool «tok_identifier»
	BaseType : •i8 «tok_identifier»
	BaseType : •u8 «tok_identifier»
	BaseType : •i16 «tok_identifier»
	BaseType : •u16 «tok_identifier»
	BaseType : •i32 «tok_identifier»
	BaseType : •u32 «tok_identifier»
	BaseType : •i64 «tok_identifier»
	BaseType : •u64 «tok_identifier»
	CustomType : •tok_identifier «tok_identifier»
	CustomType : •tok_option «tok_identifier»
}
Transitions:
	tok_identifier -> 210
	tok_option -> 211
	BaseType -> 217
	CustomType -> 218
	int8 -> 221
	uint8 -> 222
	int16 -> 223
	uint16 -> 224
	int32 -> 225
	uint32 -> 226
	int64 -> 227
	uint64 -> 228
	string -> 229
	bytes -> 230
	bool -> 231
	i8 -> 232
	u8 -> 233
	i16 -> 234
	u16 -> 235
	i32 -> 236
	u32 -> 237
	i64 -> 238
	u64 -> 239
	ContainerElemType -> 274


S269{
	AddtionOption : { FieldOption •} «,»
	AddtionOption : { FieldOption •} «;»
	AddtionOption : { FieldOption •} «}»
	AddtionOption : { FieldOption •} «tok_doc»
	AddtionOption : { FieldOption •} «tok_option»
	AddtionOption : { FieldOption •} «notify»
	AddtionOption : { FieldOption •} «oneway»
	AddtionOption : { FieldOption •} «twoway»
	AddtionOption : { FieldOption •} «tok_identifier»
	FieldOption : FieldOption •Doc Option «}»
	FieldOption : FieldOption •Doc Option «tok_doc»
	FieldOption : FieldOption •Doc Option «tok_option»
	Doc : empty• «tok_option»
	Doc : •Doc tok_doc «tok_option»
	Doc : empty• «tok_doc»
	Doc : •Doc tok_doc «tok_doc»
}
Transitions:
	Doc -> 255
	} -> 275


S270{
	Method : tok_identifier ( MethodArgs ) MethodRet MethodNo AddtionOption OptEnd• «}»
	Method : tok_identifier ( MethodArgs ) MethodRet MethodNo AddtionOption OptEnd• «tok_doc»
	Method : tok_identifier ( MethodArgs ) MethodRet MethodNo AddtionOption OptEnd• «tok_option»
	Method : tok_identifier ( MethodArgs ) MethodRet MethodNo AddtionOption OptEnd• «notify»
	Method : tok_identifier ( MethodArgs ) MethodRet MethodNo AddtionOption OptEnd• «oneway»
	Method : tok_identifier ( MethodArgs ) MethodRet MethodNo AddtionOption OptEnd• «twoway»
	Method : tok_identifier ( MethodArgs ) MethodRet MethodNo AddtionOption OptEnd• «tok_identifier»
}
Transitions:


S271{
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «)»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «[»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «bool»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «bytes»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «i16»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «i32»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «i64»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «i8»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «int16»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «int32»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «int64»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «int8»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «map»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «string»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «tok_doc»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «tok_identifier»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «tok_option»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «u16»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «u32»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «u64»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «u8»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «uint16»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «uint32»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «uint64»
	Field : FiledType tok_identifier = tok_const_int •AddtionOption OptEnd «uint8»
	AddtionOption : empty• «)»
	AddtionOption : empty• «,»
	AddtionOption : empty• «;»
	AddtionOption : •{ FieldOption } «)»
	AddtionOption : •{ FieldOption } «,»
	AddtionOption : •{ FieldOption } «;»
	AddtionOption : empty• «[»
	AddtionOption : •{ FieldOption } «[»
	AddtionOption : empty• «bool»
	AddtionOption : •{ FieldOption } «bool»
	AddtionOption : empty• «bytes»
	AddtionOption : •{ FieldOption } «bytes»
	AddtionOption : empty• «i16»
	AddtionOption : •{ FieldOption } «i16»
	AddtionOption : empty• «i32»
	AddtionOption : •{ FieldOption } «i32»
	AddtionOption : empty• «i64»
	AddtionOption : •{ FieldOption } «i64»
	AddtionOption : empty• «i8»
	AddtionOption : •{ FieldOption } «i8»
	AddtionOption : empty• «int16»
	AddtionOption : •{ FieldOption } «int16»
	AddtionOption : empty• «int32»
	AddtionOption : •{ FieldOption } «int32»
	AddtionOption : empty• «int64»
	AddtionOption : •{ FieldOption } «int64»
	AddtionOption : empty• «int8»
	AddtionOption : •{ FieldOption } «int8»
	AddtionOption : empty• «map»
	AddtionOption : •{ FieldOption } «map»
	AddtionOption : empty• «string»
	AddtionOption : •{ FieldOption } «string»
	AddtionOption : empty• «tok_doc»
	AddtionOption : •{ FieldOption } «tok_doc»
	AddtionOption : empty• «tok_identifier»
	AddtionOption : •{ FieldOption } «tok_identifier»
	AddtionOption : empty• «tok_option»
	AddtionOption : •{ FieldOption } «tok_option»
	AddtionOption : empty• «u16»
	AddtionOption : •{ FieldOption } «u16»
	AddtionOption : empty• «u32»
	AddtionOption : •{ FieldOption } «u32»
	AddtionOption : empty• «u64»
	AddtionOption : •{ FieldOption } «u64»
	AddtionOption : empty• «u8»
	AddtionOption : •{ FieldOption } «u8»
	AddtionOption : empty• «uint16»
	AddtionOption : •{ FieldOption } «uint16»
	AddtionOption : empty• «uint32»
	AddtionOption : •{ FieldOption } «uint32»
	AddtionOption : empty• «uint64»
	AddtionOption : •{ FieldOption } «uint64»
	AddtionOption : empty• «uint8»
	AddtionOption : •{ FieldOption } «uint8»
}
Transitions:
	{ -> 276
	AddtionOption -> 277


S272{
	Option : tok_option OptionValue• «}»
	Option : tok_option OptionValue• «tok_doc»
	Option : tok_option OptionValue• «tok_option»
}
Transitions:


S273{
	OptionValue : = •tok_literal OptEnd «}»
	OptionValue : = •tok_const_int OptEnd «}»
	OptionValue : = •tok_literal OptEnd «tok_doc»
	OptionValue : = •tok_const_int OptEnd «tok_doc»
	OptionValue : = •tok_literal OptEnd «tok_option»
	OptionValue : = •tok_const_int OptEnd «tok_option»
}
Transitions:
	tok_literal -> 278
	tok_const_int -> 279


S274{
	MapType : map [ BaseType ] ContainerElemType• «,»
	MapType : map [ BaseType ] ContainerElemType• «;»
	MapType : map [ BaseType ] ContainerElemType• «=»
	MapType : map [ BaseType ] ContainerElemType• «{»
	MapType : map [ BaseType ] ContainerElemType• «}»
	MapType : map [ BaseType ] ContainerElemType• «tok_doc»
	MapType : map [ BaseType ] ContainerElemType• «tok_option»
	MapType : map [ BaseType ] ContainerElemType• «notify»
	MapType : map [ BaseType ] ContainerElemType• «oneway»
	MapType : map [ BaseType ] ContainerElemType• «twoway»
	MapType : map [ BaseType ] ContainerElemType• «tok_identifier»
}
Transitions:


S275{
	AddtionOption : { FieldOption }• «,»
	AddtionOption : { FieldOption }• «;»
	AddtionOption : { FieldOption }• «}»
	AddtionOption : { FieldOption }• «tok_doc»
	AddtionOption : { FieldOption }• «tok_option»
	AddtionOption : { FieldOption }• «notify»
	AddtionOption : { FieldOption }• «oneway»
	AddtionOption : { FieldOption }• «twoway»
	AddtionOption : { FieldOption }• «tok_identifier»
}
Transitions:


S276{
	AddtionOption : { •FieldOption } «)»
	AddtionOption : { •FieldOption } «,»
	AddtionOption : { •FieldOption } «;»
	AddtionOption : { •FieldOption } «[»
	AddtionOption : { •FieldOption } «bool»
	AddtionOption : { •FieldOption } «bytes»
	AddtionOption : { •FieldOption } «i16»
	AddtionOption : { •FieldOption } «i32»
	AddtionOption : { •FieldOption } «i64»
	AddtionOption : { •FieldOption } «i8»
	AddtionOption : { •FieldOption } «int16»
	AddtionOption : { •FieldOption } «int32»
	AddtionOption : { •FieldOption } «int64»
	AddtionOption : { •FieldOption } «int8»
	AddtionOption : { •FieldOption } «map»
	AddtionOption : { •FieldOption } «string»
	AddtionOption : { •FieldOption } «tok_doc»
	AddtionOption : { •FieldOption } «tok_identifier»
	AddtionOption : { •FieldOption } «tok_option»
	AddtionOption : { •FieldOption } «u16»
	AddtionOption : { •FieldOption } «u32»
	AddtionOption : { •FieldOption } «u64»
	AddtionOption : { •FieldOption } «u8»
	AddtionOption : { •FieldOption } «uint16»
	AddtionOption : { •FieldOption } «uint32»
	AddtionOption : { •FieldOption } «uint64»
	AddtionOption : { •FieldOption } «uint8»
	FieldOption : empty• «}»
	FieldOption : •FieldOption Doc Option «}»
	FieldOption : empty• «tok_doc»
	FieldOption : empty• «tok_option»
	FieldOption : •FieldOption Doc Option «tok_doc»
	FieldOption : •FieldOption Doc Option «tok_option»
}
Transitions:
	FieldOption -> 280


S277{
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «)»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «[»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «bool»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «bytes»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «i16»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «i32»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «i64»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «i8»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «int16»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «int32»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «int64»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «int8»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «map»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «string»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «tok_doc»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «tok_identifier»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «tok_option»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «u16»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «u32»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «u64»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «u8»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «uint16»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «uint32»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «uint64»
	Field : FiledType tok_identifier = tok_const_int AddtionOption •OptEnd «uint8»
	OptEnd : empty• «)»
	OptEnd : •; «)»
	OptEnd : •, «)»
	OptEnd : empty• «[»
	OptEnd : •; «[»
	OptEnd : •, «[»
	OptEnd : empty• «bool»
	OptEnd : •; «bool»
	OptEnd : •, «bool»
	OptEnd : empty• «bytes»
	OptEnd : •; «bytes»
	OptEnd : •, «bytes»
	OptEnd : empty• «i16»
	OptEnd : •; «i16»
	OptEnd : •, «i16»
	OptEnd : empty• «i32»
	OptEnd : •; «i32»
	OptEnd : •, «i32»
	OptEnd : empty• «i64»
	OptEnd : •; «i64»
	OptEnd : •, «i64»
	OptEnd : empty• «i8»
	OptEnd : •; «i8»
	OptEnd : •, «i8»
	OptEnd : empty• «int16»
	OptEnd : •; «int16»
	OptEnd : •, «int16»
	OptEnd : empty• «int32»
	OptEnd : •; «int32»
	OptEnd : •, «int32»
	OptEnd : empty• «int64»
	OptEnd : •; «int64»
	OptEnd : •, «int64»
	OptEnd : empty• «int8»
	OptEnd : •; «int8»
	OptEnd : •, «int8»
	OptEnd : empty• «map»
	OptEnd : •; «map»
	OptEnd : •, «map»
	OptEnd : empty• «string»
	OptEnd : •; «string»
	OptEnd : •, «string»
	OptEnd : empty• «tok_doc»
	OptEnd : •; «tok_doc»
	OptEnd : •, «tok_doc»
	OptEnd : empty• «tok_identifier»
	OptEnd : •; «tok_identifier»
	OptEnd : •, «tok_identifier»
	OptEnd : empty• «tok_option»
	OptEnd : •; «tok_option»
	OptEnd : •, «tok_option»
	OptEnd : empty• «u16»
	OptEnd : •; «u16»
	OptEnd : •, «u16»
	OptEnd : empty• «u32»
	OptEnd : •; «u32»
	OptEnd : •, «u32»
	OptEnd : empty• «u64»
	OptEnd : •; «u64»
	OptEnd : •, «u64»
	OptEnd : empty• «u8»
	OptEnd : •; «u8»
	OptEnd : •, «u8»
	OptEnd : empty• «uint16»
	OptEnd : •; «uint16»
	OptEnd : •, «uint16»
	OptEnd : empty• «uint32»
	OptEnd : •; «uint32»
	OptEnd : •, «uint32»
	OptEnd : empty• «uint64»
	OptEnd : •; «uint64»
	OptEnd : •, «uint64»
	OptEnd : empty• «uint8»
	OptEnd : •; «uint8»
	OptEnd : •, «uint8»
}
Transitions:
	OptEnd -> 281
	; -> 282
	, -> 283


S278{
	OptionValue : = tok_literal •OptEnd «}»
	OptionValue : = tok_literal •OptEnd «tok_doc»
	OptionValue : = tok_literal •OptEnd «tok_option»
	OptEnd : empty• «}»
	OptEnd : •; «}»
	OptEnd : •, «}»
	OptEnd : empty• «tok_doc»
	OptEnd : •; «tok_doc»
	OptEnd : •, «tok_doc»
	OptEnd : empty• «tok_option»
	OptEnd : •; «tok_option»
	OptEnd : •, «tok_option»
}
Transitions:
	OptEnd -> 284
	; -> 285
	, -> 286


S279{
	OptionValue : = tok_const_int •OptEnd «}»
	OptionValue : = tok_const_int •OptEnd «tok_doc»
	OptionValue : = tok_const_int •OptEnd «tok_option»
	OptEnd : empty• «}»
	OptEnd : •; «}»
	OptEnd : •, «}»
	OptEnd : empty• «tok_doc»
	OptEnd : •; «tok_doc»
	OptEnd : •, «tok_doc»
	OptEnd : empty• «tok_option»
	OptEnd : •; «tok_option»
	OptEnd : •, «tok_option»
}
Transitions:
	; -> 285
	, -> 286
	OptEnd -> 287


S280{
	AddtionOption : { FieldOption •} «)»
	AddtionOption : { FieldOption •} «,»
	AddtionOption : { FieldOption •} «;»
	AddtionOption : { FieldOption •} «[»
	AddtionOption : { FieldOption •} «bool»
	AddtionOption : { FieldOption •} «bytes»
	AddtionOption : { FieldOption •} «i16»
	AddtionOption : { FieldOption •} «i32»
	AddtionOption : { FieldOption •} «i64»
	AddtionOption : { FieldOption •} «i8»
	AddtionOption : { FieldOption •} «int16»
	AddtionOption : { FieldOption •} «int32»
	AddtionOption : { FieldOption •} «int64»
	AddtionOption : { FieldOption •} «int8»
	AddtionOption : { FieldOption •} «map»
	AddtionOption : { FieldOption •} «string»
	AddtionOption : { FieldOption •} «tok_doc»
	AddtionOption : { FieldOption •} «tok_identifier»
	AddtionOption : { FieldOption •} «tok_option»
	AddtionOption : { FieldOption •} «u16»
	AddtionOption : { FieldOption •} «u32»
	AddtionOption : { FieldOption •} «u64»
	AddtionOption : { FieldOption •} «u8»
	AddtionOption : { FieldOption •} «uint16»
	AddtionOption : { FieldOption •} «uint32»
	AddtionOption : { FieldOption •} «uint64»
	AddtionOption : { FieldOption •} «uint8»
	FieldOption : FieldOption •Doc Option «}»
	FieldOption : FieldOption •Doc Option «tok_doc»
	FieldOption : FieldOption •Doc Option «tok_option»
	Doc : empty• «tok_option»
	Doc : •Doc tok_doc «tok_option»
	Doc : empty• «tok_doc»
	Doc : •Doc tok_doc «tok_doc»
}
Transitions:
	Doc -> 255
	} -> 288


S281{
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «)»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «[»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «bool»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «bytes»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «i16»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «i32»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «i64»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «i8»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «int16»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «int32»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «int64»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «int8»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «map»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «string»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «tok_doc»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «tok_identifier»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «tok_option»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «u16»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «u32»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «u64»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «u8»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «uint16»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «uint32»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «uint64»
	Field : FiledType tok_identifier = tok_const_int AddtionOption OptEnd• «uint8»
}
Transitions:


S282{
	OptEnd : ;• «)»
	OptEnd : ;• «[»
	OptEnd : ;• «bool»
	OptEnd : ;• «bytes»
	OptEnd : ;• «i16»
	OptEnd : ;• «i32»
	OptEnd : ;• «i64»
	OptEnd : ;• «i8»
	OptEnd : ;• «int16»
	OptEnd : ;• «int32»
	OptEnd : ;• «int64»
	OptEnd : ;• «int8»
	OptEnd : ;• «map»
	OptEnd : ;• «string»
	OptEnd : ;• «tok_doc»
	OptEnd : ;• «tok_identifier»
	OptEnd : ;• «tok_option»
	OptEnd : ;• «u16»
	OptEnd : ;• «u32»
	OptEnd : ;• «u64»
	OptEnd : ;• «u8»
	OptEnd : ;• «uint16»
	OptEnd : ;• «uint32»
	OptEnd : ;• «uint64»
	OptEnd : ;• «uint8»
}
Transitions:


S283{
	OptEnd : ,• «)»
	OptEnd : ,• «[»
	OptEnd : ,• «bool»
	OptEnd : ,• «bytes»
	OptEnd : ,• «i16»
	OptEnd : ,• «i32»
	OptEnd : ,• «i64»
	OptEnd : ,• «i8»
	OptEnd : ,• «int16»
	OptEnd : ,• «int32»
	OptEnd : ,• «int64»
	OptEnd : ,• «int8»
	OptEnd : ,• «map»
	OptEnd : ,• «string»
	OptEnd : ,• «tok_doc»
	OptEnd : ,• «tok_identifier»
	OptEnd : ,• «tok_option»
	OptEnd : ,• «u16»
	OptEnd : ,• «u32»
	OptEnd : ,• «u64»
	OptEnd : ,• «u8»
	OptEnd : ,• «uint16»
	OptEnd : ,• «uint32»
	OptEnd : ,• «uint64»
	OptEnd : ,• «uint8»
}
Transitions:


S284{
	OptionValue : = tok_literal OptEnd• «}»
	OptionValue : = tok_literal OptEnd• «tok_doc»
	OptionValue : = tok_literal OptEnd• «tok_option»
}
Transitions:


S285{
	OptEnd : ;• «}»
	OptEnd : ;• «tok_doc»
	OptEnd : ;• «tok_option»
}
Transitions:


S286{
	OptEnd : ,• «}»
	OptEnd : ,• «tok_doc»
	OptEnd : ,• «tok_option»
}
Transitions:


S287{
	OptionValue : = tok_const_int OptEnd• «}»
	OptionValue : = tok_const_int OptEnd• «tok_doc»
	OptionValue : = tok_const_int OptEnd• «tok_option»
}
Transitions:


S288{
	AddtionOption : { FieldOption }• «)»
	AddtionOption : { FieldOption }• «,»
	AddtionOption : { FieldOption }• «;»
	AddtionOption : { FieldOption }• «[»
	AddtionOption : { FieldOption }• «bool»
	AddtionOption : { FieldOption }• «bytes»
	AddtionOption : { FieldOption }• «i16»
	AddtionOption : { FieldOption }• «i32»
	AddtionOption : { FieldOption }• «i64»
	AddtionOption : { FieldOption }• «i8»
	AddtionOption : { FieldOption }• «int16»
	AddtionOption : { FieldOption }• «int32»
	AddtionOption : { FieldOption }• «int64»
	AddtionOption : { FieldOption }• «int8»
	AddtionOption : { FieldOption }• «map»
	AddtionOption : { FieldOption }• «string»
	AddtionOption : { FieldOption }• «tok_doc»
	AddtionOption : { FieldOption }• «tok_identifier»
	AddtionOption : { FieldOption }• «tok_option»
	AddtionOption : { FieldOption }• «u16»
	AddtionOption : { FieldOption }• «u32»
	AddtionOption : { FieldOption }• «u64»
	AddtionOption : { FieldOption }• «u8»
	AddtionOption : { FieldOption }• «uint16»
	AddtionOption : { FieldOption }• «uint32»
	AddtionOption : { FieldOption }• «uint64»
	AddtionOption : { FieldOption }• «uint8»
}
Transitions:


