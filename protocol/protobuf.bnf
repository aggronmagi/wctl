// Copyright © 2020 aggronmagi <czy463@163.com>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

////////////////////////////////////////////////////////////////////////////////
// parser
////////////////////////////////////////////////////////////////////////////////
_sign : ['+'|'-'];
_integer : '0' - '9';
// _hex : _integer | 'a'-'f' | 'A'-'F';
_letter : 'a' - 'z'| 'A'-'Z' | '_' | '.';
_identifier : _letter|_integer;
tok_const_int: _sign _integer {_integer} | _integer {_integer};
// tok_const_hex: '0' 'x' _hex {_hex};
// tok_option : _letter{_identifier} '.' _letter{_identifier};
tok_identifier:  _letter{_identifier};
!whitespace : ' ' | '\t' | '\n' | '\r' ;
_multidoc : '/' '*' {.} '*' '/';
_comment : '/' '/' {.} '\n';
!unixcomment: '#' {.} '\n';
tok_doc: _multidoc | _comment ;
tok_literal:'"'{.}'"';

////////////////////////////////////////////////////////////////////////////////
<<
import "github.com/aggronmagi/wctl/protocol/ast"
>>
////////////////////////////////////////////////////////////////////////////////

Start:
	FileElements						<< ast.CheckProgram($0) >>
;


FileElements:
	empty								<< ast.NewFileElements1() >>
|	FileElements Doc Element			<< ast.AppendFileElements($0, $1, $2) >>
;

////////////////////////////////////////////////////////////////////////////////
// 文件元素
////////////////////////////////////////////////////////////////////////////////
Element:
	Syntax
|	Package
|	Import
|	Option
|	Enum
|	Message
|	Service
;

// Syntax 定义
Syntax:
	"syntax" "=" tok_literal ";"			<< ast.ProtoNewSyntax($2) >>
;

////////////////////////////////////////////////////////////////////////////////
// package 定义 包定义
Package:
	"package" tok_identifier ";"		<< ast.NewPackage($1) >>
;


////////////////////////////////////////////////////////////////////////////////
// import. 依赖文件
Import:
	"import" tok_literal ";"			<< ast.NewImport(nil, $1) >>
;


////////////////////////////////////////////////////////////////////////////////
// 选项配置定义
Option:
	"option" tok_identifier "=" tok_literal ";"	<< ast.ProtoNewOption($1, $3) >>
;

////////////////////////////////////////////////////////////////////////////////
// 文档,注释
Doc:
	empty
|	Doc tok_doc									<< ast.AppendDoc($0, $1) >> 
;

////////////////////////////////////////////////////////////////////////////////
// 枚举定义
Enum:
	"enum" tok_identifier "{" EnumItems "}"		<< ast.NewEnum($1, $3) >> 
;

EnumItems:
	empty
|	EnumItems Doc EnumItem						<< ast.AppendEnumItem($0, $2, $1) >> 
;

EnumItem:
	tok_identifier EnumItemValue ";"			<< ast.NewEnumValue($0, $1) >> 
;

EnumItemValue:
	empty
|	"=" tok_const_int							<< $1,nil >> 
;

////////////////////////////////////////////////////////////////////////////////
// 消息定义
Message:
	"message" tok_identifier "{" MessageElements "}" << ast.NewMessage($1, $3) >> 
;

MessageElements:
	empty
|	MessageElements Doc Field					<< ast.AppendMessageField($0, $1, $2) >>
;

// 字段 Field: tok_const_int ":" FiledType tok_identifier AddtionOption OptEnd
Field:
	FiledType tok_identifier "=" tok_const_int ";"	<< ast.NewField($3, $0, $1, nil) >> 
;

// 字段类型
FiledType:
	ContainerElemType
|	ContainerType
;

ContainerType:
	ListType
|	MapType
;

ContainerElemType:
	BaseType									<< ast.NewFieldTypeBase($0) >>
|	CustomType
;


CustomType:
	tok_identifier								<< ast.NewFieldTypeCustom($0) >>
;

ListType:
	"repeated" ContainerElemType					<< ast.NewFieldTypeList($1) >> 
;

MapType:
	"map" "<" BaseType "," ContainerElemType ">"  << ast.NewFieldTypeMap($2,$4) >>
;

BaseType:
	"int8"										<< ast.BaseTypeInt8, nil >>
|	"uint8"										<< ast.BaseTypeUint8, nil >>
|	"int16"										<< ast.BaseTypeInt16, nil >>
|	"uint16"									<< ast.BaseTypeUint16, nil >>
|	"int32"										<< ast.BaseTypeInt32, nil >>
|	"uint32"									<< ast.BaseTypeUint32, nil >>
|	"int64"										<< ast.BaseTypeInt64, nil >>
|	"uint64"									<< ast.BaseTypeUint64, nil >>
|	"string"									<< ast.BaseTypeString, nil >>
|	"bytes"										<< ast.BaseTypeBinary, nil >>
|	"bool"										<< ast.BaseTypeBool, nil >>
|	"i8"										<< ast.BaseTypeInt8, nil >>
|	"u8"										<< ast.BaseTypeUint8, nil >>
|	"i16"										<< ast.BaseTypeInt16, nil >>
|	"u16"										<< ast.BaseTypeUint16, nil >>
|	"i32"										<< ast.BaseTypeInt32, nil >>
|	"u32"										<< ast.BaseTypeUint32, nil >>
|	"i64"										<< ast.BaseTypeInt64, nil >>
|	"u64"										<< ast.BaseTypeUint64, nil >>
;

////////////////////////////////////////////////////////////////////////////////
// 服务定义
Service:
	"service" tok_identifier "{" ServiceElements "}"		<< ast.NewService($1, $3) >> 
;


ServiceElements:
	empty
|	ServiceElements Doc Method					<< ast.AppendServiceMethod($0, $1, $2) >>
;


////////////////////////////////////////////////////////////////////////////////
// 方法定义
Method:
	"rpc" tok_identifier "(" tok_identifier ")" "returns" "(" tok_identifier ")" "{" "}"	<< ast.ProtoNewMethod($1, $3, $7) >> 
;
