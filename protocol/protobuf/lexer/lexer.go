// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/aggronmagi/wctl/protocol/token"
)

const (
	NoState    = -1
	NumStates  = 133
	NumSymbols = 175
)

type Lexer struct {
	src     []byte
	pos     int
	line    int
	column  int
	Context token.Context
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:     src,
		pos:     0,
		line:    1,
		column:  1,
		Context: nil,
	}
	return lexer
}

// SourceContext is a simple instance of a token.Context which
// contains the name of the source file.
type SourceContext struct {
	Filepath string
}

func (s *SourceContext) Source() string {
	return s.Filepath
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	lexer := NewLexer(src)
	lexer.Context = &SourceContext{Filepath: fpath}
	return lexer, nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = &token.Token{}
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		tok.Pos.Context = l.Context
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn
	tok.Pos.Context = l.Context

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '"'
1: '"'
2: 's'
3: 'y'
4: 'n'
5: 't'
6: 'a'
7: 'x'
8: '='
9: ';'
10: 'p'
11: 'a'
12: 'c'
13: 'k'
14: 'a'
15: 'g'
16: 'e'
17: 'i'
18: 'm'
19: 'p'
20: 'o'
21: 'r'
22: 't'
23: 'o'
24: 'p'
25: 't'
26: 'i'
27: 'o'
28: 'n'
29: 'e'
30: 'n'
31: 'u'
32: 'm'
33: '{'
34: '}'
35: 'm'
36: 'e'
37: 's'
38: 's'
39: 'a'
40: 'g'
41: 'e'
42: 'r'
43: 'e'
44: 'p'
45: 'e'
46: 'a'
47: 't'
48: 'e'
49: 'd'
50: 'm'
51: 'a'
52: 'p'
53: '<'
54: ','
55: '>'
56: 'i'
57: 'n'
58: 't'
59: '8'
60: 'u'
61: 'i'
62: 'n'
63: 't'
64: '8'
65: 'i'
66: 'n'
67: 't'
68: '1'
69: '6'
70: 'u'
71: 'i'
72: 'n'
73: 't'
74: '1'
75: '6'
76: 'i'
77: 'n'
78: 't'
79: '3'
80: '2'
81: 'u'
82: 'i'
83: 'n'
84: 't'
85: '3'
86: '2'
87: 'i'
88: 'n'
89: 't'
90: '6'
91: '4'
92: 'u'
93: 'i'
94: 'n'
95: 't'
96: '6'
97: '4'
98: 's'
99: 't'
100: 'r'
101: 'i'
102: 'n'
103: 'g'
104: 'b'
105: 'y'
106: 't'
107: 'e'
108: 's'
109: 'b'
110: 'o'
111: 'o'
112: 'l'
113: 'i'
114: '8'
115: 'u'
116: '8'
117: 'i'
118: '1'
119: '6'
120: 'u'
121: '1'
122: '6'
123: 'i'
124: '3'
125: '2'
126: 'u'
127: '3'
128: '2'
129: 'i'
130: '6'
131: '4'
132: 'u'
133: '6'
134: '4'
135: 's'
136: 'e'
137: 'r'
138: 'v'
139: 'i'
140: 'c'
141: 'e'
142: 'r'
143: 'p'
144: 'c'
145: '('
146: ')'
147: 'r'
148: 'e'
149: 't'
150: 'u'
151: 'r'
152: 'n'
153: 's'
154: '+'
155: '-'
156: '_'
157: '.'
158: '/'
159: '*'
160: '*'
161: '/'
162: '/'
163: '/'
164: '\n'
165: ' '
166: '\t'
167: '\n'
168: '\r'
169: '#'
170: '\n'
171: '0'-'9'
172: 'a'-'z'
173: 'A'-'Z'
174: .
*/
