// Code generated by gocc; DO NOT EDIT.

package parser

import "github.com/aggronmagi/wctl/protocol/ast"

type (
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib, interface{}) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Start	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Start : FileElements	<< ast.CheckProgram(X[0]) >>`,
		Id:         "Start",
		NTType:     1,
		Index:      1,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.CheckProgram(X[0])
		},
	},
	ProdTabEntry{
		String: `FileElements : empty	<< ast.NewFileElements1() >>`,
		Id:         "FileElements",
		NTType:     2,
		Index:      2,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewFileElements1()
		},
	},
	ProdTabEntry{
		String: `FileElements : FileElements Doc Element	<< ast.AppendFileElements(X[0], X[1], X[2]) >>`,
		Id:         "FileElements",
		NTType:     2,
		Index:      3,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendFileElements(X[0], X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `Element : Syntax	<<  >>`,
		Id:         "Element",
		NTType:     3,
		Index:      4,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Element : Package	<<  >>`,
		Id:         "Element",
		NTType:     3,
		Index:      5,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Element : Import	<<  >>`,
		Id:         "Element",
		NTType:     3,
		Index:      6,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Element : Option	<<  >>`,
		Id:         "Element",
		NTType:     3,
		Index:      7,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Element : Enum	<<  >>`,
		Id:         "Element",
		NTType:     3,
		Index:      8,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Element : Message	<<  >>`,
		Id:         "Element",
		NTType:     3,
		Index:      9,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Element : Service	<<  >>`,
		Id:         "Element",
		NTType:     3,
		Index:      10,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Syntax : "syntax" "=" tok_literal ";"	<< ast.ProtoNewSyntax(X[2]) >>`,
		Id:         "Syntax",
		NTType:     4,
		Index:      11,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.ProtoNewSyntax(X[2])
		},
	},
	ProdTabEntry{
		String: `Package : "package" tok_identifier ";"	<< ast.NewPackage(X[1]) >>`,
		Id:         "Package",
		NTType:     5,
		Index:      12,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewPackage(X[1])
		},
	},
	ProdTabEntry{
		String: `Import : "import" tok_literal ";"	<< ast.NewImport(nil, X[1]) >>`,
		Id:         "Import",
		NTType:     6,
		Index:      13,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewImport(nil, X[1])
		},
	},
	ProdTabEntry{
		String: `Option : "option" tok_identifier "=" tok_literal ";"	<< ast.ProtoNewOption(X[1], X[3]) >>`,
		Id:         "Option",
		NTType:     7,
		Index:      14,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.ProtoNewOption(X[1], X[3])
		},
	},
	ProdTabEntry{
		String: `Doc : empty	<<  >>`,
		Id:         "Doc",
		NTType:     8,
		Index:      15,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Doc : Doc tok_doc	<< ast.AppendDoc(X[0], X[1]) >>`,
		Id:         "Doc",
		NTType:     8,
		Index:      16,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendDoc(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `Enum : "enum" tok_identifier "{" EnumItems "}"	<< ast.NewEnum(X[1], X[3]) >>`,
		Id:         "Enum",
		NTType:     9,
		Index:      17,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewEnum(X[1], X[3])
		},
	},
	ProdTabEntry{
		String: `EnumItems : empty	<<  >>`,
		Id:         "EnumItems",
		NTType:     10,
		Index:      18,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `EnumItems : EnumItems Doc EnumItem	<< ast.AppendEnumItem(X[0], X[2], X[1]) >>`,
		Id:         "EnumItems",
		NTType:     10,
		Index:      19,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendEnumItem(X[0], X[2], X[1])
		},
	},
	ProdTabEntry{
		String: `EnumItem : tok_identifier EnumItemValue ";"	<< ast.NewEnumValue(X[0], X[1]) >>`,
		Id:         "EnumItem",
		NTType:     11,
		Index:      20,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewEnumValue(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `EnumItemValue : empty	<<  >>`,
		Id:         "EnumItemValue",
		NTType:     12,
		Index:      21,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `EnumItemValue : "=" tok_const_int	<< X[1],nil >>`,
		Id:         "EnumItemValue",
		NTType:     12,
		Index:      22,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1],nil
		},
	},
	ProdTabEntry{
		String: `Message : "message" tok_identifier "{" MessageElements "}"	<< ast.NewMessage(X[1], X[3]) >>`,
		Id:         "Message",
		NTType:     13,
		Index:      23,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewMessage(X[1], X[3])
		},
	},
	ProdTabEntry{
		String: `MessageElements : empty	<<  >>`,
		Id:         "MessageElements",
		NTType:     14,
		Index:      24,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `MessageElements : MessageElements Doc Field	<< ast.AppendMessageField(X[0], X[1], X[2]) >>`,
		Id:         "MessageElements",
		NTType:     14,
		Index:      25,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendMessageField(X[0], X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `Field : FiledType tok_identifier "=" tok_const_int ";"	<< ast.NewField(X[3], X[0], X[1], nil) >>`,
		Id:         "Field",
		NTType:     15,
		Index:      26,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewField(X[3], X[0], X[1], nil)
		},
	},
	ProdTabEntry{
		String: `FiledType : ContainerElemType	<<  >>`,
		Id:         "FiledType",
		NTType:     16,
		Index:      27,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FiledType : ContainerType	<<  >>`,
		Id:         "FiledType",
		NTType:     16,
		Index:      28,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ContainerType : ListType	<<  >>`,
		Id:         "ContainerType",
		NTType:     17,
		Index:      29,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ContainerType : MapType	<<  >>`,
		Id:         "ContainerType",
		NTType:     17,
		Index:      30,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ContainerElemType : BaseType	<< ast.NewFieldTypeBase(X[0]) >>`,
		Id:         "ContainerElemType",
		NTType:     18,
		Index:      31,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewFieldTypeBase(X[0])
		},
	},
	ProdTabEntry{
		String: `ContainerElemType : CustomType	<<  >>`,
		Id:         "ContainerElemType",
		NTType:     18,
		Index:      32,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `CustomType : tok_identifier	<< ast.NewFieldTypeCustom(X[0]) >>`,
		Id:         "CustomType",
		NTType:     19,
		Index:      33,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewFieldTypeCustom(X[0])
		},
	},
	ProdTabEntry{
		String: `ListType : "repeated" ContainerElemType	<< ast.NewFieldTypeList(X[1]) >>`,
		Id:         "ListType",
		NTType:     20,
		Index:      34,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewFieldTypeList(X[1])
		},
	},
	ProdTabEntry{
		String: `MapType : "map" "<" BaseType "," ContainerElemType ">"	<< ast.NewFieldTypeMap(X[2],X[4]) >>`,
		Id:         "MapType",
		NTType:     21,
		Index:      35,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewFieldTypeMap(X[2],X[4])
		},
	},
	ProdTabEntry{
		String: `BaseType : "int8"	<< ast.BaseTypeInt8, nil >>`,
		Id:         "BaseType",
		NTType:     22,
		Index:      36,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeInt8, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "uint8"	<< ast.BaseTypeUint8, nil >>`,
		Id:         "BaseType",
		NTType:     22,
		Index:      37,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeUint8, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "int16"	<< ast.BaseTypeInt16, nil >>`,
		Id:         "BaseType",
		NTType:     22,
		Index:      38,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeInt16, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "uint16"	<< ast.BaseTypeUint16, nil >>`,
		Id:         "BaseType",
		NTType:     22,
		Index:      39,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeUint16, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "int32"	<< ast.BaseTypeInt32, nil >>`,
		Id:         "BaseType",
		NTType:     22,
		Index:      40,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeInt32, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "uint32"	<< ast.BaseTypeUint32, nil >>`,
		Id:         "BaseType",
		NTType:     22,
		Index:      41,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeUint32, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "int64"	<< ast.BaseTypeInt64, nil >>`,
		Id:         "BaseType",
		NTType:     22,
		Index:      42,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeInt64, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "uint64"	<< ast.BaseTypeUint64, nil >>`,
		Id:         "BaseType",
		NTType:     22,
		Index:      43,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeUint64, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "string"	<< ast.BaseTypeString, nil >>`,
		Id:         "BaseType",
		NTType:     22,
		Index:      44,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeString, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "bytes"	<< ast.BaseTypeBinary, nil >>`,
		Id:         "BaseType",
		NTType:     22,
		Index:      45,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeBinary, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "bool"	<< ast.BaseTypeBool, nil >>`,
		Id:         "BaseType",
		NTType:     22,
		Index:      46,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeBool, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "i8"	<< ast.BaseTypeInt8, nil >>`,
		Id:         "BaseType",
		NTType:     22,
		Index:      47,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeInt8, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "u8"	<< ast.BaseTypeUint8, nil >>`,
		Id:         "BaseType",
		NTType:     22,
		Index:      48,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeUint8, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "i16"	<< ast.BaseTypeInt16, nil >>`,
		Id:         "BaseType",
		NTType:     22,
		Index:      49,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeInt16, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "u16"	<< ast.BaseTypeUint16, nil >>`,
		Id:         "BaseType",
		NTType:     22,
		Index:      50,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeUint16, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "i32"	<< ast.BaseTypeInt32, nil >>`,
		Id:         "BaseType",
		NTType:     22,
		Index:      51,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeInt32, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "u32"	<< ast.BaseTypeUint32, nil >>`,
		Id:         "BaseType",
		NTType:     22,
		Index:      52,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeUint32, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "i64"	<< ast.BaseTypeInt64, nil >>`,
		Id:         "BaseType",
		NTType:     22,
		Index:      53,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeInt64, nil
		},
	},
	ProdTabEntry{
		String: `BaseType : "u64"	<< ast.BaseTypeUint64, nil >>`,
		Id:         "BaseType",
		NTType:     22,
		Index:      54,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.BaseTypeUint64, nil
		},
	},
	ProdTabEntry{
		String: `Service : "service" tok_identifier "{" ServiceElements "}"	<< ast.NewService(X[1], X[3]) >>`,
		Id:         "Service",
		NTType:     23,
		Index:      55,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewService(X[1], X[3])
		},
	},
	ProdTabEntry{
		String: `ServiceElements : empty	<<  >>`,
		Id:         "ServiceElements",
		NTType:     24,
		Index:      56,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `ServiceElements : ServiceElements Doc Method	<< ast.AppendServiceMethod(X[0], X[1], X[2]) >>`,
		Id:         "ServiceElements",
		NTType:     24,
		Index:      57,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.AppendServiceMethod(X[0], X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `Method : "rpc" tok_identifier "(" tok_identifier ")" "returns" "(" tok_identifier ")" "{" "}"	<< ast.ProtoNewMethod(X[1], X[3], X[7]) >>`,
		Id:         "Method",
		NTType:     25,
		Index:      58,
		NumSymbols: 11,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.ProtoNewMethod(X[1], X[3], X[7])
		},
	},
}
