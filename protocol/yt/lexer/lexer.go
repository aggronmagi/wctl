// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/aggronmagi/wctl/protocol/token"
)

const (
	NoState    = -1
	NumStates  = 142
	NumSymbols = 176
)

type Lexer struct {
	src     []byte
	pos     int
	line    int
	column  int
	Context token.Context
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:     src,
		pos:     0,
		line:    1,
		column:  1,
		Context: nil,
	}
	return lexer
}

// SourceContext is a simple instance of a token.Context which
// contains the name of the source file.
type SourceContext struct {
	Filepath string
}

func (s *SourceContext) Source() string {
	return s.Filepath
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	lexer := NewLexer(src)
	lexer.Context = &SourceContext{Filepath: fpath}
	return lexer, nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = &token.Token{}
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		tok.Pos.Context = l.Context
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn
	tok.Pos.Context = l.Context

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '.'
1: 'p'
2: 'a'
3: 'c'
4: 'k'
5: 'a'
6: 'g'
7: 'e'
8: ';'
9: ','
10: 'i'
11: 'm'
12: 'p'
13: 'o'
14: 'r'
15: 't'
16: '='
17: 'e'
18: 'n'
19: 'u'
20: 'm'
21: '{'
22: '}'
23: 'm'
24: 'e'
25: 's'
26: 's'
27: 'a'
28: 'g'
29: 'e'
30: ':'
31: '['
32: ']'
33: 'm'
34: 'a'
35: 'p'
36: 'i'
37: 'n'
38: 't'
39: '8'
40: 'u'
41: 'i'
42: 'n'
43: 't'
44: '8'
45: 'i'
46: 'n'
47: 't'
48: '1'
49: '6'
50: 'u'
51: 'i'
52: 'n'
53: 't'
54: '1'
55: '6'
56: 'i'
57: 'n'
58: 't'
59: '3'
60: '2'
61: 'u'
62: 'i'
63: 'n'
64: 't'
65: '3'
66: '2'
67: 'i'
68: 'n'
69: 't'
70: '6'
71: '4'
72: 'u'
73: 'i'
74: 'n'
75: 't'
76: '6'
77: '4'
78: 's'
79: 't'
80: 'r'
81: 'i'
82: 'n'
83: 'g'
84: 'b'
85: 'y'
86: 't'
87: 'e'
88: 's'
89: 'b'
90: 'o'
91: 'o'
92: 'l'
93: 'i'
94: '8'
95: 'u'
96: '8'
97: 'i'
98: '1'
99: '6'
100: 'u'
101: '1'
102: '6'
103: 'i'
104: '3'
105: '2'
106: 'u'
107: '3'
108: '2'
109: 'i'
110: '6'
111: '4'
112: 'u'
113: '6'
114: '4'
115: 's'
116: 'e'
117: 'r'
118: 'v'
119: 'i'
120: 'c'
121: 'e'
122: 'o'
123: 'n'
124: 'e'
125: 'w'
126: 'a'
127: 'y'
128: 'n'
129: 'o'
130: 't'
131: 'i'
132: 'f'
133: 'y'
134: 't'
135: 'w'
136: 'o'
137: 'w'
138: 'a'
139: 'y'
140: '('
141: ')'
142: 'v'
143: 'o'
144: 'i'
145: 'd'
146: 'p'
147: 'r'
148: 'o'
149: 'j'
150: 'e'
151: 'c'
152: 't'
153: '+'
154: '-'
155: '_'
156: '/'
157: '*'
158: '*'
159: '/'
160: '/'
161: '/'
162: '\n'
163: '`'
164: '`'
165: '"'
166: '"'
167: ' '
168: '\t'
169: '\n'
170: '\r'
171: '#'
172: '\n'
173: '0'-'9'
174: 'a'-'z'
175: .
*/
